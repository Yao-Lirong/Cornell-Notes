{"version":2,"kind":"Article","sha256":"5e41ce2f75932adb56b43ed10612190177a1b94ddd77a2fc81ece64708860a58","slug":"2020-02-18-specifications","location":"/CS3110/2020-02-18-Specifications.md","dependencies":[],"frontmatter":{"title":"Specifications","tags":["Cornell","20SP","CS3110"],"date":"2020-02-18","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-18-Specifications.md","url":"/cornell-notes/build/2020-02-18-Specifica-648bfed862a648c89dc1272c39695d8a.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"SQ6rSlWGes"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/abstract/intro.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Specifications and Abstractions","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"tyQoLyY2vA"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/abstract/intro.html","key":"fJzgtZZ7et"}],"key":"bK6ZpbA0Wk"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"SFrut5jjA1"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Specification of Functions","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"r6adRLMPyy"}],"identifier":"specification-of-functions","label":"Specification of Functions","html_id":"specification-of-functions","implicit":true,"key":"RNkZxzzEPx"},{"type":"code","lang":"ocaml","value":"(** [f x] is ...\n\tExample: ...\n\tRequires: ...\n\tRaises: ... \n*)\nlet f x  = ","position":{"start":{"line":16,"column":1},"end":{"line":23,"column":1}},"key":"qreCvPnATs"},{"type":"comment","value":"more","key":"jczL4HcvbB"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":27,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"strong","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Returns","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"TZoGs9hWVE"}],"key":"MC3sOIvDeu"},{"type":"text","value":": Don’t write ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"vvxbCWsPnT"},{"type":"inlineCode","value":"Returns: ...","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"UxNtlVx2sc"},{"type":"text","value":", instead, just use ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"REYzJxpe3w"},{"type":"inlineCode","value":"[f x] is ...","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"DZZYCd1oi3"}],"key":"dyd3Xlib7q"},{"type":"listItem","spread":true,"position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"strong","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Requires","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"D4GTLqLyj9"}],"key":"FHdherAUxS"},{"type":"text","value":": specific conditions on input ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"ykqdTSSNeJ"},{"type":"inlineCode","value":"Requires: [x >=0]","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"QHgdnZtVoq"}],"key":"nWmU5B592g"},{"type":"listItem","spread":true,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"strong","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Raises","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"sN7s7sq0NX"}],"key":"lrOqSZf28w"},{"type":"text","value":": what the program will do if a bad input is given ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"DMqMTzVJjN"},{"type":"inlineCode","value":"Raises: xxx Exception if [x<0]","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"sniobsM1rF"}],"key":"uk2lNIcT1y"},{"type":"listItem","spread":true,"position":{"start":{"line":30,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"strong","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Examples","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"RtILN74vCR"}],"key":"PqY27UEAUx"},{"type":"text","value":": give an example input and output of the function to better explain what it does","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"Te6dUC4SQv"}],"key":"OrpFeUI7Ks"}],"key":"ylDISCwivI"},{"type":"heading","depth":2,"position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Specification of Modules","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"YQWAcmJiPi"}],"identifier":"specification-of-modules","label":"Specification of Modules","html_id":"specification-of-modules","implicit":true,"key":"r6uwOTBLvC"},{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"What to document in a module:","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"Q6hrQsvmzd"}],"key":"XVdGD5BwrP"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":36,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"functions not specified in the interface","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"nPAZM1PHXw"}],"key":"OI9HmBaehj"},{"type":"listItem","spread":true,"position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"abstraction function","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"DBNy6q9LrN"}],"key":"ES49QATwkn"},{"type":"listItem","spread":true,"position":{"start":{"line":38,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"representation invariant","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"CxCUSgOLFE"}],"key":"ZLSL2hbOJX"}],"key":"gAXbi569LN"},{"type":"code","lang":"ocaml","value":"(* Implementation of sets as lists without duplicates.\n * Includes rep_ok checks. *)\nmodule ListSetNoDupsRepOk : Set = struct\n  (* Abstraction function:  the list [a1; ...; an] represents the \n   * set {a1, ..., an}.  [] represents the empty set {}.\n   *\n   * Representation invariant: the list contains no duplicates.\n   *)\n  type 'a set = 'a list\n\n  let rep_ok (l : 'a set) : 'a set =\n    List.fold_right\n      (fun x t -> assert (not (List.mem x t)); x :: t)\n      l []\n\n  let empty = []\n  let mem x l = List.mem x (rep_ok l)\n  let add x l = rep_ok (if mem x (rep_ok l) then l else x :: l)\n  let rem x l = rep_ok (List.filter ((<>) x) (rep_ok l))\n  let size l = List.length (rep_ok l)\n  let union l1 l2 =  \n    rep_ok (List.fold_left\n          (fun a x -> if mem x l2 then a else x :: a) \n          (rep_ok l2) (rep_ok l1))\n  let inter l1 l2 = rep_ok (List.filter (fun h -> mem h l2) (rep_ok l1))\nend","position":{"start":{"line":40,"column":1},"end":{"line":67,"column":1}},"key":"aHUqDDMlgP"},{"type":"paragraph","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"children":[{"type":"text","value":"note that the above code keeps representation invariant, abstraction function, and other spec about implementation details inside the module definition, because when we generate the docs of this module, everything outside the definition of the module will be come “public” specs for clients and everything inside will become “private” spec for maintainers.","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"MCfrYVMKhg"}],"key":"qyvTzkDOVi"},{"type":"heading","depth":3,"position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"text","value":"Abstraction Function","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"fUSkXhGuV0"}],"identifier":"abstraction-function","label":"Abstraction Function","html_id":"abstraction-function","implicit":true,"key":"wOFdvmvZBU"},{"type":"paragraph","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"text","value":"Abstraction function maps valid concrete values to abstract values","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"key":"VEhX3dRrF0"}],"key":"F2fbgL6MOS"},{"type":"code","lang":"ocaml","value":"(** AF: ... *)\n\nmodule ListSetDups : Set = struct\n  (* AF: the list [a1; ...; an] represents the\n   * smallest set containing all the elements a1, ..., an.\n   * The list may contain duplicates.\n   * [] represents the empty set.\n   *)\n  type 'a set = 'a list\n  ...\n  \nmodule ListSetNoDups : Set = struct\n  (* AF: the list [a1; ...; an] represents the set\n   * {a1, ..., an}.  [] represents the empty set.\n   *)\n  type 'a set = 'a list\n  ...","position":{"start":{"line":75,"column":1},"end":{"line":93,"column":1}},"key":"CwYtKjvBG3"},{"type":"heading","depth":3,"position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"Representation Invariant","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"v70cK5HYrS"}],"identifier":"representation-invariant","label":"Representation Invariant","html_id":"representation-invariant","implicit":true,"key":"VKqtg72PpT"},{"type":"paragraph","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"children":[{"type":"text","value":"Representation Invariant distinguishes valid concrete values and from invalid concrete values and is the implicit part of all the precondition and postcondition.","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"yxvFF26ZFl"}],"key":"E1rSnbwt2H"},{"type":"code","lang":"ocaml","value":"(** RI: ... *)\n\nmodule ListSetNoDupsRepOk : Set = struct\n  (* RI: the list contains no duplicates.\n   *)\n  type 'a set = 'a list\n  ...","position":{"start":{"line":99,"column":1},"end":{"line":107,"column":1}},"key":"nHWkkXHN9Q"},{"type":"heading","depth":2,"position":{"start":{"line":109,"column":1},"end":{"line":109,"column":1}},"children":[{"type":"text","value":"Common Mistakes","position":{"start":{"line":109,"column":1},"end":{"line":109,"column":1}},"key":"envCKQ8Zo8"}],"identifier":"common-mistakes","label":"Common Mistakes","html_id":"common-mistakes","implicit":true,"key":"uvN0E2hdXI"},{"type":"paragraph","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"children":[{"type":"text","value":"Some common mistakes include not stating enough in preconditions, failing to identify when exceptions will be thrown, failing to specify behavior at boundary cases, writing operational specifications instead of definitional and stating too much in postconditions.","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"Hnq4CnloEU"}],"key":"Pwl4I0re2u"},{"type":"heading","depth":3,"position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"children":[{"type":"text","value":"Long Variable Name","position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"key":"Xx3tSthZyc"}],"identifier":"long-variable-name","label":"Long Variable Name","html_id":"long-variable-name","implicit":true,"key":"b9jCMGPwey"},{"type":"code","lang":"ocaml","value":"let number_of_zeros_in_the_list =\n   fold_left (fun (accumulator:int) (list_element:int) ->\n          accumulator + (if list_element=0 then 1 else 0)) 0 the_list\nin ...","position":{"start":{"line":115,"column":1},"end":{"line":120,"column":1}},"key":"XY7e4wRqI7"},{"type":"paragraph","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"children":[{"type":"text","value":"Code using such long names is verbose and hard to read. Instead of trying to embed a complete description of a variable in its name, use a short and suggestive name (e.g., ","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"QlDoN6YvYW"},{"type":"inlineCode","value":"zeroes","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"mYzTfUq0T9"},{"type":"text","value":"), and if necessary, add a comment at its declaration explaining the purpose of the variable.","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"RJXKUGquTQ"}],"key":"ndNZekopHy"}],"key":"kxY0UDv3i3"}],"key":"gkpx9RzIZ1"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Code Reuse with Modules","url":"/2020-02-13-code-reuse-with-modules","group":"C S3110"},"next":{"title":"Mutability","url":"/2020-03-03-mutability","group":"C S3110"}}},"domain":"http://localhost:3000"}