{"version":2,"kind":"Article","sha256":"c7313aafec1a40050695a3268fd9592cbc202a4b47f9e2f6e4bfd8f4c599336b","slug":"2019-11-07-concurrency","location":"/CS2112/2019-11-07-Concurrency.md","dependencies":[],"frontmatter":{"title":"Concurrency","tags":["Cornell","19FA","CS2112"],"date":"2019-11-07","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2019-11-07-Concurrency.md","url":"/cornell-notes/build/2019-11-07-Concurren-05a031da137fd29f50946b937adf59ca.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Lecture: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"SafWvfaklh"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs2112/2019fa/lectures/lecture.html?id=concurrency","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Concurrency","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"q2qJvzg85j"}],"urlSource":"https://www.cs.cornell.edu/courses/cs2112/2019fa/lectures/lecture.html?id=concurrency","key":"JzkWPWUna7"}],"key":"kcDNDKwAEm"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"BQrLqDxs8O"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Concurrency and Parallelism","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"JgyLYudgZJ"}],"identifier":"concurrency-and-parallelism","label":"Concurrency and Parallelism","html_id":"concurrency-and-parallelism","implicit":true,"key":"CDofduwJFu"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Concurrency: multiple threads (java level, can be executed by one core or multiple core)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"fMF6JIWNgg"}],"key":"OgzsjLEx5M"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"parallelism: multiple cores (hardware level. can execute one thread or multiple thread)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"xc8cp6ZJth"}],"key":"yPPRzXfz7s"}],"key":"TER4yGHhI6"},{"type":"comment","value":"more","key":"k5CcwhKlw1"},{"type":"code","lang":"java","value":"import java.lang.Thread;\n\nclass Thread{\n    /** starts a new thread executing run() */\n    void start();\n    \n    /** Effect: anything; but default does nothing*/\n    void run();\n}","position":{"start":{"line":22,"column":1},"end":{"line":32,"column":1}},"key":"Qje8FU5lh0"},{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"inlineCode","value":"run()","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"tdDdWTOzNa"},{"type":"text","value":" 里面就是写的这个thread到底应该干什么","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"eyw57lYOaZ"}],"key":"eGtuDzEegZ"},{"type":"heading","depth":2,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Threads Interference","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"lossBT4IS7"}],"identifier":"threads-interference","label":"Threads Interference","html_id":"threads-interference","implicit":true,"key":"GEMsLWCuah"},{"type":"paragraph","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Best approach: most objects owned by 1 thread","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"iBs5v5Tisa"}],"key":"LHZtncQ6bf"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Read-Only sharing ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"AyLlSw4ftJ"},{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"ok","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"UJ6c9xQQuZ"}],"key":"urSuAxTI3Z"}],"key":"IHwXjObT6i"},{"type":"paragraph","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"Read/Write sharing | Write/Write sharing ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"UHu1NJsgeA"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"dangerous","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"JCnSdEhsbv"}],"key":"hCXTMyBKt5"}],"key":"Z214Q72603"},{"type":"code","lang":"java","value":"class Account {\n  int balance;\n  void withdraw(int n) {\n   int b = balance - n; // R1\u0001\n   balance = b;         // W1\u0001\n  }\n  void deposit(int n) {\n   int b = balance + n; // R2\u0001\n   balance = b;         // W2\u0001\n  }\n}","position":{"start":{"line":46,"column":1},"end":{"line":58,"column":1}},"key":"aR8ZhFAgB8"},{"type":"paragraph","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"text","value":"e.g. initial balance: $100, T1 executes ","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"o5v6eQWe23"},{"type":"inlineCode","value":"witdraw(50)","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"ExWvJLefWH"},{"type":"text","value":", T2 executes ","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"qRoSlUUkuy"},{"type":"inlineCode","value":"deposit(50)","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"BYivBQikTK"}],"key":"L4afxgfEfO"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":62,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":62,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"children":[{"type":"text","value":"(R1, W1, R2, W2) or (R2, W2, R1, W1), the final balance is indeed $100.","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"nmhTyBQtqS"}],"key":"B8KlztZHWr"}],"key":"AaSS4A5lUi"},{"type":"listItem","spread":true,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"(R1, R2, W2, W1) destroys $50 -> $50","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"TAiu4szoB8"}],"key":"ViMAGQpjZ7"}],"key":"d1koVeptOY"},{"type":"listItem","spread":true,"position":{"start":{"line":65,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"(R2, R1, W1, W2) creates ​$50 -> $150","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"o2YiiBPORi"}],"key":"iiruKzLBDj"}],"key":"eJWIEX99XH"}],"key":"rBT3ckTPVz"},{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"We therefore want deposit, withdraw method to be (or at least act to be) ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"T7H9xBI56B"},{"type":"strong","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"atomic","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"aOW79nNyhr"}],"key":"LnJ1mbzShI"},{"type":"text","value":" (indivisible), as if this sentence cannot be influenced by other threads (reading and writing are happening simultaneously) .","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"adkFrWxzrA"}],"key":"yZWCHdCFEL"},{"type":"heading","depth":2,"position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"children":[{"type":"text","value":"Mutex","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"MfZapb7rQp"}],"identifier":"mutex","label":"Mutex","html_id":"mutex","implicit":true,"key":"hUE88c6Q9r"},{"type":"paragraph","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"text","value":"(mutual exclusion locks)","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"mNjg9Dm9Al"}],"key":"Zi6VlLBf3X"}],"key":"q2HJg1fhT1"},{"type":"blockquote","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"text","value":"Threads can acquire them and release them. At most one thread can hold a mutex at a time. While a mutex is being held by a thread, all other threads that try to acquire it will be blocked until it is released, at which point just one waiting thread will manage to acquire it.","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"key":"PBLDIXNRCl"}],"key":"rMF6G00oha"}],"key":"It93AHHYyx"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"every write and read to a shared mutable variable, mutex must be held","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"DIFc089fRZ"}],"key":"Vz9LRG5lq5"},{"type":"code","lang":"java","value":"/** Effect: blocks current thread until mutex is held by another thread\n\t\t\tthen acquires mutex */\nacquire();\n\n/** Effect: release mutex */\nrelease();\n","position":{"start":{"line":77,"column":1},"end":{"line":85,"column":1}},"key":"kBXOzpYeqk"},{"type":"code","lang":"java","value":"synchronized(Object o){\n    //acquire o's mutex\n    ... // do some operations\n    //release o's mutex\n}","position":{"start":{"line":90,"column":1},"end":{"line":96,"column":1}},"key":"Eohq1tMeDc"},{"type":"thematicBreak","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"PZNhzlPBJE"},{"type":"paragraph","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"Y1IX38gzUN"},{"type":"inlineCode","value":"deposit & withdraw","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"nUNDyDMCGN"},{"type":"text","value":" as an example:","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"ipwZ7swywy"}],"key":"EkpcF2w2a1"},{"type":"code","lang":"java","value":"void withdraw(int n) {\n   //do something\n   synchronized(this) {\n      //acquire o's mutex\n      balance -= n;\n      //release o's mutex\n   }\n   //do something else\n}","position":{"start":{"line":102,"column":1},"end":{"line":112,"column":1}},"key":"AxWaTiB4oc"},{"type":"paragraph","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"children":[{"type":"text","value":"Because the pattern of wrapping entire method bodies in ","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"QSg84MmFjm"},{"type":"inlineCode","value":"synchronized(this)","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"ORKcDVWLPV"},{"type":"text","value":" is so common, Java has syntactic sugar for it:","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"EGndWov4YQ"}],"key":"Iwz9q2do6B"},{"type":"code","lang":"java","value":"synchronized void withdraw(int n) {\n   balance -= n;\n}","position":{"start":{"line":116,"column":1},"end":{"line":120,"column":1}},"key":"Fk9GfvgyoY"},{"type":"thematicBreak","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"f7EhymUGHI"},{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"Whenever mutex is not held, that variable guarded by the mutex will ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"Tjs3mfMg6O"},{"type":"strong","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"change unpredictably","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"bLzntmZ2Au"}],"key":"FeerFoKRns"},{"type":"text","value":" and the invariant will ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"IEJ533up3R"},{"type":"strong","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"not","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"P2vmt1RsfF"}],"key":"GeAJDPQw3d"},{"type":"text","value":" hold","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"BC1BPYdxZv"}],"key":"oxVc0TF3ng"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"as long as we called ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"BenXR60UBx"},{"type":"inlineCode","value":"synchronized someMethodName()","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"wIRhFAq8VB"},{"type":"text","value":" or ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"V7G1ynYpu4"},{"type":"inlineCode","value":"synchronized(this)","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"aRTjo8UziY"},{"type":"text","value":". Everything in this object/class ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"dyjnWNZHgH"},{"type":"inlineCode","value":"this","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"jaOsvKgjRx"},{"type":"text","value":" will be held mutex (?). So we want to write small methods and small classes. As mentioned previously:","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"HRbA1GigUA"}],"key":"W8DMfFV0Wi"},{"type":"blockquote","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"Best approach: most objects owned by 1 thread","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"hlsZwpE2Fq"}],"key":"HlG76Oof0g"}],"key":"qNYnpKK0Mo"},{"type":"heading","depth":2,"position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"Fsc8QdfK42"}],"identifier":"conclusion","label":"Conclusion","html_id":"conclusion","implicit":true,"key":"MRGjzKUeHv"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":132,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"strong","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"text","value":"avoid unnecessary concurrency","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"PSIq2uoq8a"}],"key":"wofr2582JQ"},{"type":"text","value":": slows down the program","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"EoCfFxozzC"}],"key":"SjRmUiF67Q"},{"type":"listItem","spread":true,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"strong","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"limit sharing of mutable state","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"xmKGD6esB3"}],"key":"i92Z6jEa4G"},{"type":"text","value":": we don’t have to care about concurrency if its immutable(read only)","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"bxiuY3HsmE"}],"key":"FgosOtm9fz"},{"type":"listItem","spread":true,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"strong","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"guard all accesses to shared mutable state with mutexes","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"cnMh2wARvd"}],"key":"cY3JcBwtGg"},{"type":"text","value":": in case of thread interference","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"PutToHxwtz"}],"key":"XVdvpzVEOL"}],"key":"QdOA7LNbTw"}],"key":"C4Pe7aPIR0"}],"key":"kGhNlc7x7A"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Building GUI","url":"/2019-10-29-event-handlers","group":"CS2112 Object-Oriented Design (Honors)"},"next":{"title":"Synchronization","url":"/2019-11-12-synchronization","group":"CS2112 Object-Oriented Design (Honors)"}}},"domain":"http://localhost:3000"}