{"version":2,"kind":"Article","sha256":"c7313aafec1a40050695a3268fd9592cbc202a4b47f9e2f6e4bfd8f4c599336b","slug":"2019-11-07-concurrency","location":"/CS2112/2019-11-07-Concurrency.md","dependencies":[],"frontmatter":{"title":"Concurrency","tags":["Cornell","19FA","CS2112"],"date":"2019-11-07","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2019-11-07-Concurrency.md","url":"/cornell-notes/build/2019-11-07-Concurren-05a031da137fd29f50946b937adf59ca.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Lecture: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"sZbHrndZ3t"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs2112/2019fa/lectures/lecture.html?id=concurrency","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Concurrency","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"iF7ppfhkaZ"}],"urlSource":"https://www.cs.cornell.edu/courses/cs2112/2019fa/lectures/lecture.html?id=concurrency","key":"Ds6bahuQIX"}],"key":"lnnfrVksVz"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"VchbOk3fh0"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Concurrency and Parallelism","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Z96W3UKoN4"}],"identifier":"concurrency-and-parallelism","label":"Concurrency and Parallelism","html_id":"concurrency-and-parallelism","implicit":true,"key":"G92VTJDFlJ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Concurrency: multiple threads (java level, can be executed by one core or multiple core)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"uO4hpBUvb6"}],"key":"bLdWVuvsC7"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"parallelism: multiple cores (hardware level. can execute one thread or multiple thread)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"nMv6IUqxL0"}],"key":"EUWRMGT8jN"}],"key":"FpwWzUEg7B"},{"type":"comment","value":"more","key":"LDapazbBeQ"},{"type":"code","lang":"java","value":"import java.lang.Thread;\n\nclass Thread{\n    /** starts a new thread executing run() */\n    void start();\n    \n    /** Effect: anything; but default does nothing*/\n    void run();\n}","position":{"start":{"line":22,"column":1},"end":{"line":32,"column":1}},"key":"gtcGai1yme"},{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"inlineCode","value":"run()","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"Yp17Ebe6Kg"},{"type":"text","value":" 里面就是写的这个thread到底应该干什么","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"jlZ7mmt9tL"}],"key":"DDY2oLEee7"},{"type":"heading","depth":2,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Threads Interference","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"w7VgxJkpjf"}],"identifier":"threads-interference","label":"Threads Interference","html_id":"threads-interference","implicit":true,"key":"rIWO9Aj9uV"},{"type":"paragraph","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Best approach: most objects owned by 1 thread","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"NjuUAlJJZv"}],"key":"jv5Ae0yrMq"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Read-Only sharing ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"CoGwDXVuI5"},{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"ok","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"CrMyUnIX3X"}],"key":"yHIwXOdTjV"}],"key":"CmBzIn6M9P"},{"type":"paragraph","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"Read/Write sharing | Write/Write sharing ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"ZNOtuovvpN"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"dangerous","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"mrjE0vopqM"}],"key":"c15kLA6Bhe"}],"key":"emElED58vP"},{"type":"code","lang":"java","value":"class Account {\n  int balance;\n  void withdraw(int n) {\n   int b = balance - n; // R1\u0001\n   balance = b;         // W1\u0001\n  }\n  void deposit(int n) {\n   int b = balance + n; // R2\u0001\n   balance = b;         // W2\u0001\n  }\n}","position":{"start":{"line":46,"column":1},"end":{"line":58,"column":1}},"key":"rIHs3X8dW3"},{"type":"paragraph","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"text","value":"e.g. initial balance: $100, T1 executes ","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"v69eGQ3MT6"},{"type":"inlineCode","value":"witdraw(50)","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"KkC7A1e9lb"},{"type":"text","value":", T2 executes ","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"nuncu3cs7d"},{"type":"inlineCode","value":"deposit(50)","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"uo3sfctHWT"}],"key":"O28EYAIFim"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":62,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":62,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"children":[{"type":"text","value":"(R1, W1, R2, W2) or (R2, W2, R1, W1), the final balance is indeed $100.","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"HEUgjq4qE8"}],"key":"DCEoH8QRoJ"}],"key":"BtdT3tZjec"},{"type":"listItem","spread":true,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"(R1, R2, W2, W1) destroys $50 -> $50","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"GlVn3Knt38"}],"key":"fXtEBlh1vX"}],"key":"EtBZlLwMAz"},{"type":"listItem","spread":true,"position":{"start":{"line":65,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"(R2, R1, W1, W2) creates ​$50 -> $150","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"O9xVjMJe3V"}],"key":"MkR9HG2Ryh"}],"key":"grTdmCKoF7"}],"key":"X4Q56xwMXh"},{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"We therefore want deposit, withdraw method to be (or at least act to be) ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"TY6fLxtwFp"},{"type":"strong","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"atomic","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"taD0wsFjZf"}],"key":"lwSq2DOZWd"},{"type":"text","value":" (indivisible), as if this sentence cannot be influenced by other threads (reading and writing are happening simultaneously) .","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"KWUvy0ADjs"}],"key":"oWqX08g7BA"},{"type":"heading","depth":2,"position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"children":[{"type":"text","value":"Mutex","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"RGAxNMe3AG"}],"identifier":"mutex","label":"Mutex","html_id":"mutex","implicit":true,"key":"m4VK4yPyxp"},{"type":"paragraph","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"text","value":"(mutual exclusion locks)","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"RZAWSadppe"}],"key":"buRmb1GW5k"}],"key":"izLZQAhyGA"},{"type":"blockquote","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"text","value":"Threads can acquire them and release them. At most one thread can hold a mutex at a time. While a mutex is being held by a thread, all other threads that try to acquire it will be blocked until it is released, at which point just one waiting thread will manage to acquire it.","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"key":"QKwXADPcdT"}],"key":"Iisyaql0Ue"}],"key":"M9m0a95o2j"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"every write and read to a shared mutable variable, mutex must be held","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"fY0QRdVwAH"}],"key":"jVfhjadlzF"},{"type":"code","lang":"java","value":"/** Effect: blocks current thread until mutex is held by another thread\n\t\t\tthen acquires mutex */\nacquire();\n\n/** Effect: release mutex */\nrelease();\n","position":{"start":{"line":77,"column":1},"end":{"line":85,"column":1}},"key":"zvjMru2pFA"},{"type":"code","lang":"java","value":"synchronized(Object o){\n    //acquire o's mutex\n    ... // do some operations\n    //release o's mutex\n}","position":{"start":{"line":90,"column":1},"end":{"line":96,"column":1}},"key":"efS91wC1lF"},{"type":"thematicBreak","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"xTTNanSdfi"},{"type":"paragraph","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"yQNw9KcizE"},{"type":"inlineCode","value":"deposit & withdraw","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"ohmqQzGsYG"},{"type":"text","value":" as an example:","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"zjk0sDkY7U"}],"key":"r2VoyVY1G3"},{"type":"code","lang":"java","value":"void withdraw(int n) {\n   //do something\n   synchronized(this) {\n      //acquire o's mutex\n      balance -= n;\n      //release o's mutex\n   }\n   //do something else\n}","position":{"start":{"line":102,"column":1},"end":{"line":112,"column":1}},"key":"yqPDbdxlsE"},{"type":"paragraph","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"children":[{"type":"text","value":"Because the pattern of wrapping entire method bodies in ","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"gouzIv0eif"},{"type":"inlineCode","value":"synchronized(this)","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"TLXRswarxV"},{"type":"text","value":" is so common, Java has syntactic sugar for it:","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"DL6ToyYmkI"}],"key":"irXTtRL2yG"},{"type":"code","lang":"java","value":"synchronized void withdraw(int n) {\n   balance -= n;\n}","position":{"start":{"line":116,"column":1},"end":{"line":120,"column":1}},"key":"BJ5XofTntf"},{"type":"thematicBreak","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"oTVY6fDwVX"},{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"Whenever mutex is not held, that variable guarded by the mutex will ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"jln5joXAph"},{"type":"strong","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"change unpredictably","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"wbUo8tyGmG"}],"key":"IRC5ylR03r"},{"type":"text","value":" and the invariant will ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"nppl8ORe7L"},{"type":"strong","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"not","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"sCtcBjAjj8"}],"key":"O5vj2HGHQJ"},{"type":"text","value":" hold","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"tZ7CKR9rMJ"}],"key":"t6mT1sLj8o"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"as long as we called ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"tn7g80eJAU"},{"type":"inlineCode","value":"synchronized someMethodName()","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"xQjUEbqPdm"},{"type":"text","value":" or ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"Fea1KNWYqQ"},{"type":"inlineCode","value":"synchronized(this)","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"np8WzJ3cPs"},{"type":"text","value":". Everything in this object/class ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"VRCrQaU7HR"},{"type":"inlineCode","value":"this","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"cfJz7kMJfd"},{"type":"text","value":" will be held mutex (?). So we want to write small methods and small classes. As mentioned previously:","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"olazGuyby4"}],"key":"tn69qIGpaJ"},{"type":"blockquote","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"Best approach: most objects owned by 1 thread","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"TegPVygUt2"}],"key":"kYYgppO7kG"}],"key":"gVtn3Hj32G"},{"type":"heading","depth":2,"position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"BGDxmkjTKn"}],"identifier":"conclusion","label":"Conclusion","html_id":"conclusion","implicit":true,"key":"pLrnJtF88r"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":132,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"strong","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"text","value":"avoid unnecessary concurrency","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"U6soyIpJ1x"}],"key":"TbSi2Z7PLI"},{"type":"text","value":": slows down the program","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"W6VGbHCCty"}],"key":"rmqfX9Z5oC"},{"type":"listItem","spread":true,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"strong","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"limit sharing of mutable state","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"JMuIlAhWyM"}],"key":"kGEFsTF5g5"},{"type":"text","value":": we don’t have to care about concurrency if its immutable(read only)","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"NLDlIIQ9ay"}],"key":"JYtV0yiQo5"},{"type":"listItem","spread":true,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"strong","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"guard all accesses to shared mutable state with mutexes","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"ijUuqhchtG"}],"key":"FHMcEHw6Yo"},{"type":"text","value":": in case of thread interference","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"EP8PB1w5QI"}],"key":"EHscXxEiH3"}],"key":"jxzxbHhCK9"}],"key":"FSIm1g5jEZ"}],"key":"DuzfoK3MZL"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Building GUI","url":"/2019-10-29-event-handlers","group":"CS2112 Object-Oriented Design (Honors)"},"next":{"title":"Synchronization","url":"/2019-11-12-synchronization","group":"CS2112 Object-Oriented Design (Honors)"}}},"domain":"http://localhost:3000"}