{"version":2,"kind":"Article","sha256":"c7313aafec1a40050695a3268fd9592cbc202a4b47f9e2f6e4bfd8f4c599336b","slug":"2019-11-07-concurrency","location":"/CS2112/2019-11-07-Concurrency.md","dependencies":[],"frontmatter":{"title":"Concurrency","tags":["Cornell","19FA","CS2112"],"date":"2019-11-07","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2019-11-07-Concurrency.md","url":"/build/2019-11-07-Concurren-7fae3edf9d68006d3b87f78d01ba52ed.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Lecture: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"W42CegM0LY"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs2112/2019fa/lectures/lecture.html?id=concurrency","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Concurrency","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"FKY4KcHgjS"}],"urlSource":"https://www.cs.cornell.edu/courses/cs2112/2019fa/lectures/lecture.html?id=concurrency","key":"YmKawbJuFM"}],"key":"u1qUgDyg6i"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"UXlDVJFBLZ"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Concurrency and Parallelism","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"HKeAleVSiG"}],"identifier":"concurrency-and-parallelism","label":"Concurrency and Parallelism","html_id":"concurrency-and-parallelism","implicit":true,"key":"KF7ctrJSxR"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Concurrency: multiple threads (java level, can be executed by one core or multiple core)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"t8mTchLLAC"}],"key":"NhXqMr3iND"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"parallelism: multiple cores (hardware level. can execute one thread or multiple thread)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"VWPRDTcHn8"}],"key":"FjKZEgVTuD"}],"key":"OwS7Sld8Hy"},{"type":"comment","value":"more","key":"yPRWjKHs0m"},{"type":"code","lang":"java","value":"import java.lang.Thread;\n\nclass Thread{\n    /** starts a new thread executing run() */\n    void start();\n    \n    /** Effect: anything; but default does nothing*/\n    void run();\n}","position":{"start":{"line":22,"column":1},"end":{"line":32,"column":1}},"key":"cyVrwB3NR9"},{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"inlineCode","value":"run()","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"BgQgHCnexm"},{"type":"text","value":" 里面就是写的这个thread到底应该干什么","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"SNVp9da48E"}],"key":"nL1d22bfnu"},{"type":"heading","depth":2,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Threads Interference","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"e0C8WxuZ8r"}],"identifier":"threads-interference","label":"Threads Interference","html_id":"threads-interference","implicit":true,"key":"isAi2r8EGQ"},{"type":"paragraph","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"Best approach: most objects owned by 1 thread","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"SWSJKDYQnA"}],"key":"FOTZSnaDLh"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Read-Only sharing ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"MEy7aYL3B5"},{"type":"emphasis","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"ok","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"fWHFRsvcYZ"}],"key":"o8Bw0BIks8"}],"key":"QOQehPxhjX"},{"type":"paragraph","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"Read/Write sharing | Write/Write sharing ","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"odAeDBdMh9"},{"type":"emphasis","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"children":[{"type":"text","value":"dangerous","position":{"start":{"line":44,"column":1},"end":{"line":44,"column":1}},"key":"yn6mIZEgjc"}],"key":"AQNI2b5PkL"}],"key":"a0IOZbkvpC"},{"type":"code","lang":"java","value":"class Account {\n  int balance;\n  void withdraw(int n) {\n   int b = balance - n; // R1\u0001\n   balance = b;         // W1\u0001\n  }\n  void deposit(int n) {\n   int b = balance + n; // R2\u0001\n   balance = b;         // W2\u0001\n  }\n}","position":{"start":{"line":46,"column":1},"end":{"line":58,"column":1}},"key":"S2TAnaHJfA"},{"type":"paragraph","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"text","value":"e.g. initial balance: $100, T1 executes ","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"JyvF10exXr"},{"type":"inlineCode","value":"witdraw(50)","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"XGc6pWGWZC"},{"type":"text","value":", T2 executes ","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"i3hJOYT0xn"},{"type":"inlineCode","value":"deposit(50)","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"V8eqlnKZUf"}],"key":"o9Y4l5xeDs"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":62,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":62,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"children":[{"type":"text","value":"(R1, W1, R2, W2) or (R2, W2, R1, W1), the final balance is indeed $100.","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"effoSZsEWC"}],"key":"eAEQPEBGpq"}],"key":"MAmHla2GME"},{"type":"listItem","spread":true,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"(R1, R2, W2, W1) destroys $50 -> $50","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"dyhGT0PQLW"}],"key":"j8AKsLt9yR"}],"key":"iWz72XGrPD"},{"type":"listItem","spread":true,"position":{"start":{"line":65,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"(R2, R1, W1, W2) creates ​$50 -> $150","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"USqn6jZhcW"}],"key":"DUct566Lz1"}],"key":"lADkrBJI09"}],"key":"Z4toDlMbgr"},{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"We therefore want deposit, withdraw method to be (or at least act to be) ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"iygfToj2qT"},{"type":"strong","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"atomic","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"JATJ1nGmYe"}],"key":"xebLyu1oIl"},{"type":"text","value":" (indivisible), as if this sentence cannot be influenced by other threads (reading and writing are happening simultaneously) .","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"RnCsqiMmbc"}],"key":"Vn2UYNejaC"},{"type":"heading","depth":2,"position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"children":[{"type":"text","value":"Mutex","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"KPUZpqzyYf"}],"identifier":"mutex","label":"Mutex","html_id":"mutex","implicit":true,"key":"OFMVOBFsEw"},{"type":"paragraph","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"text","value":"(mutual exclusion locks)","position":{"start":{"line":71,"column":1},"end":{"line":71,"column":1}},"key":"MjgKBsWuzy"}],"key":"XX5DrKMfds"}],"key":"uE6bPmifOJ"},{"type":"blockquote","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"children":[{"type":"text","value":"Threads can acquire them and release them. At most one thread can hold a mutex at a time. While a mutex is being held by a thread, all other threads that try to acquire it will be blocked until it is released, at which point just one waiting thread will manage to acquire it.","position":{"start":{"line":73,"column":1},"end":{"line":73,"column":1}},"key":"ZbrUi2w0Mx"}],"key":"EIqhG4zsyC"}],"key":"nyYWGVAWgK"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"every write and read to a shared mutable variable, mutex must be held","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"C4WCiqraME"}],"key":"I07myqKhXH"},{"type":"code","lang":"java","value":"/** Effect: blocks current thread until mutex is held by another thread\n\t\t\tthen acquires mutex */\nacquire();\n\n/** Effect: release mutex */\nrelease();\n","position":{"start":{"line":77,"column":1},"end":{"line":85,"column":1}},"key":"LbhfB32bUH"},{"type":"code","lang":"java","value":"synchronized(Object o){\n    //acquire o's mutex\n    ... // do some operations\n    //release o's mutex\n}","position":{"start":{"line":90,"column":1},"end":{"line":96,"column":1}},"key":"IIStcfHPew"},{"type":"thematicBreak","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"v7MdwhljYl"},{"type":"paragraph","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"itEjS0hZsj"},{"type":"inlineCode","value":"deposit & withdraw","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"CYVPEJY1fF"},{"type":"text","value":" as an example:","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"vx035MyoIq"}],"key":"RxH2su0QoN"},{"type":"code","lang":"java","value":"void withdraw(int n) {\n   //do something\n   synchronized(this) {\n      //acquire o's mutex\n      balance -= n;\n      //release o's mutex\n   }\n   //do something else\n}","position":{"start":{"line":102,"column":1},"end":{"line":112,"column":1}},"key":"uvyE5B3p0h"},{"type":"paragraph","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"children":[{"type":"text","value":"Because the pattern of wrapping entire method bodies in ","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"u0fLi5t4DF"},{"type":"inlineCode","value":"synchronized(this)","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"rRHopd3L2o"},{"type":"text","value":" is so common, Java has syntactic sugar for it:","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"mO4xR6DkNL"}],"key":"FHGUOuOJ1f"},{"type":"code","lang":"java","value":"synchronized void withdraw(int n) {\n   balance -= n;\n}","position":{"start":{"line":116,"column":1},"end":{"line":120,"column":1}},"key":"Ks6FxTwMlx"},{"type":"thematicBreak","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"SOJXpKvZbZ"},{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"Whenever mutex is not held, that variable guarded by the mutex will ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"TmnsFCwm6w"},{"type":"strong","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"change unpredictably","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"x4trXQaEYc"}],"key":"t7v6zoq8ey"},{"type":"text","value":" and the invariant will ","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"WSBWquVRLg"},{"type":"strong","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"not","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"UcoYbSPnCO"}],"key":"MrgSPcLnMA"},{"type":"text","value":" hold","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"rlCFwCfyM4"}],"key":"Ynf3UAaKDF"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"as long as we called ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"DklfoLfRQe"},{"type":"inlineCode","value":"synchronized someMethodName()","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"qewKylT0Cm"},{"type":"text","value":" or ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"BuUGUqanvx"},{"type":"inlineCode","value":"synchronized(this)","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"KK87xCiOBE"},{"type":"text","value":". Everything in this object/class ","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"TYfVRDrVlM"},{"type":"inlineCode","value":"this","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"nnA0dXrVPa"},{"type":"text","value":" will be held mutex (?). So we want to write small methods and small classes. As mentioned previously:","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"uP8MjtPyPY"}],"key":"YcNEt3t8hN"},{"type":"blockquote","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"Best approach: most objects owned by 1 thread","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"NirKbZ4MHC"}],"key":"XyNNdnnlFD"}],"key":"c6ywTEHNV3"},{"type":"heading","depth":2,"position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"Conclusion","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"wJHozRBSBO"}],"identifier":"conclusion","label":"Conclusion","html_id":"conclusion","implicit":true,"key":"pzEDhOhC2B"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":132,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"strong","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"text","value":"avoid unnecessary concurrency","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"rFuDSdOJZX"}],"key":"mKsCKtKPGX"},{"type":"text","value":": slows down the program","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"YMQFP3Fh0E"}],"key":"sjK6R8Drym"},{"type":"listItem","spread":true,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"strong","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"limit sharing of mutable state","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"QuRCEN1xEK"}],"key":"p8QbODMPi9"},{"type":"text","value":": we don’t have to care about concurrency if its immutable(read only)","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"xykPSZQndw"}],"key":"sa5WrFZyq4"},{"type":"listItem","spread":true,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"strong","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"guard all accesses to shared mutable state with mutexes","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"dhhjIDWS9o"}],"key":"S7HN5xHCxZ"},{"type":"text","value":": in case of thread interference","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"YJMzItAvV7"}],"key":"KAdzXFsIm4"}],"key":"ZoRc7uS6Fm"}],"key":"N2UIhByrOY"}],"key":"yhGMAMwwbJ"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Building GUI","url":"/2019-10-29-event-handlers","group":"C S2112"},"next":{"title":"Synchronization","url":"/2019-11-12-synchronization","group":"C S2112"}}},"domain":"http://localhost:3000"}