{"version":2,"kind":"Article","sha256":"ca64131a9ecf2a7ea84eec752622ae040e3d7e1bca53781d6a48991ce914f621","slug":"2020-02-06-higher-order-functions","location":"/CS3110/2020-02-06-Higher-Order-Functions.md","dependencies":[],"frontmatter":{"title":"Higher-Order Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-02-06","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-06-Higher-Order-Functions.md","url":"/cornell-notes/build/2020-02-06-Higher-Or-8b96a13d278326bb61857c6a3bd07a36.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"ok6rAh0V5g"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Higher Order Programming","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"q6GAed4L6v"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","key":"hGuY0QAx99"}],"key":"CiGgyIFHHC"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"UIJ43NdLKp"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"miwSVRnBM7"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"DBLMFTAZVc"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"higher-order: functions as values, you can pass functions as arguments into other functions, functions at the same level as other variables","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"n1aoTusfen"}],"key":"yNsL7ZiryR"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"lower-order: languages like C, functions as something higher than other variables","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"Dsa8kO1RED"}],"key":"mtild8Vshi"}],"key":"D74ZyMO9On"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Pipeline is a higher-order function.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"mo8lf0aTz7"}],"key":"jUjST8Fvlx"},{"type":"code","lang":"ocaml","value":"let pipeline x f = f x\nlet (|>) = pipeline\nlet x = 5 |> double  (* 10 *)","position":{"start":{"line":21,"column":1},"end":{"line":25,"column":1}},"key":"FQEUPMtPTf"},{"type":"comment","value":"more","key":"IkHfcrh8lq"},{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Map (Transforms Elements)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"lZRv4jMvck"}],"identifier":"map-transforms-elements","label":"Map (Transforms Elements)","html_id":"map-transforms-elements","implicit":true,"key":"LUPRKQ8tme"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"it ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"Eq2BgFfuBl"},{"type":"emphasis","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"maps","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"HigSmdwTTH"}],"key":"D2JekivzrA"},{"type":"text","value":" each element of the list through a function","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"S2zQ6R3C3x"}],"key":"NwnJbdoOGB"},{"type":"code","lang":"ocaml","value":"(* [map f [x1; x2; ...; xn]] is [f x1; f x2; ...; f xn] *)\nlet rec map f = function\n  | [] -> []\n  | h::t -> (f h)::(map f t)\n\nlet add1 = map (fun x-> x+1);\nlet add1' = map ((+)1);\n\nlet concat3110 = map (fun x -> x^\"3110\")","position":{"start":{"line":33,"column":1},"end":{"line":43,"column":1}},"key":"DxNtOBpwGm"},{"type":"heading","depth":2,"position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"Filter (Eliminates Elements)","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"HVqQVGzAS7"}],"identifier":"filter-eliminates-elements","label":"Filter (Eliminates Elements)","html_id":"filter-eliminates-elements","implicit":true,"key":"ZP2wfavKO6"},{"type":"paragraph","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"inlineCode","value":"List.filter <predicate> <list>","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"nmFH9wmWTd"},{"type":"text","value":"it picks all elements which meet predicate p to form a new list.","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"W1FmoxwiBJ"}],"key":"wnLxwT3pOi"},{"type":"code","lang":"ocaml","value":"(* [filter p l] is the list of elements of [l] that satisfy the predicate [p]. \n * The order of the elements in the input list is preserved. *)\nlet rec filter f = function\n  | [] -> []\n  | h::t -> if f h then h::(filter f t) else filter f t","position":{"start":{"line":51,"column":1},"end":{"line":57,"column":1}},"key":"WjvAGUk5tx"},{"type":"heading","depth":2,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Fold (Combines Elements)","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"XwlEDuIp8j"}],"identifier":"fold-combines-elements","label":"Fold (Combines Elements)","html_id":"fold-combines-elements","implicit":true,"key":"f1qGPRqBC9"},{"type":"heading","depth":3,"position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Fold Right","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"tect3lMlSM"}],"identifier":"fold-right","label":"Fold Right","html_id":"fold-right","implicit":true,"key":"Mwg76wKo2L"},{"type":"blockquote","position":{"start":{"line":63,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Can we abstract the following two functions as a single function?","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"V06ByX6KsO"}],"key":"Jn7zerIVPv"},{"type":"code","lang":"ocaml","value":"let rec sum = function\n  | [] -> 0\n  | h::t -> h + (sum t)\n\nlet rec concat = function\n  | [] -> \"\"\n  | h::t -> h ^ (concat t)","position":{"start":{"line":65,"column":1},"end":{"line":73,"column":1}},"key":"juDwDayY4G"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"First, we abstract the initial value","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"HarQVmnVv0"}],"key":"xiq6BdDQzD"},{"type":"code","lang":"ocaml","value":"let rec sum' init = function\n  | [] -> init\n  | h::t -> h + sum' init t\n\nlet sum = sum' 0\n\nlet rec concat' init = function\n  | [] -> init\n  | h::t -> h ^ concat' init t\n\nlet concat = concat' \"\"","position":{"start":{"line":77,"column":1},"end":{"line":89,"column":1}},"key":"M4i41cyiFh"},{"type":"paragraph","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"text","value":"We find out the only thing these two functions have in difference is the operator. So the next step, we factor out the operator.","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"key":"hvsD3Jvo9E"}],"key":"AUPxcE9N1b"}],"key":"kPQC9tRFnU"},{"type":"code","lang":"ocaml","value":"let rec combine init op = function\n| [] -> init\n| h::t -> op h (combine init op t);;","position":{"start":{"line":93,"column":1},"end":{"line":97,"column":1}},"key":"a8xGNffYbS"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"The intuition for why this function is called ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"zNotyE0QXg"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"HY5XSgUhdf"},{"type":"text","value":" is that the way it works is to “fold in” elements of the list from the right to the left, combining each new element using the operator. For example, ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"jbZKywNbX7"},{"type":"inlineCode","value":"fold_right (+) [a;b;c] 0","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"gTlu0y4YIH"},{"type":"text","value":" results in evaluation of the expression ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"sVcndF7jIQ"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"pVKbUynqyI"},{"type":"text","value":". The parentheses associate from the right-most subexpression to the left.","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"MYEOlZ1bbg"}],"key":"qdHXUxlLiL"},{"type":"paragraph","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"children":[{"type":"text","value":"One way to think of ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"oF7vSNqhcM"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"RkpLSAJLbx"},{"type":"text","value":" would be that the ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"Tfe3Mx4jHl"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"ZDRGDVygmc"},{"type":"text","value":" value in the list gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"kPHi8YbbVA"},{"type":"inlineCode","value":"init","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"B8PMNyFAYY"},{"type":"text","value":", and each ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"fVwE5lGNpI"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"nkkdsH9JrE"},{"type":"text","value":" constructor gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"CaUi4Sbkyx"},{"type":"inlineCode","value":"op","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"COI4c888z2"},{"type":"text","value":". For example, ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"pKYxq2khjG"},{"type":"inlineCode","value":"[a;b;c]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"up3xTYEW9Y"},{"type":"text","value":" is just syntactic sugar for ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"l5AGtBvehR"},{"type":"inlineCode","value":"a::(b::(c::[]))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"MM4D2u0kna"},{"type":"text","value":". So if we replace ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"bzzRwZ4eN3"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"smvUiQRmUh"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"voKUUsCyFm"},{"type":"inlineCode","value":"0","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"rpXow3M56c"},{"type":"text","value":" and ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"VX4o6eTF1s"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"aaHrcybAMF"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"gRwfTNxiIe"},{"type":"inlineCode","value":"(+)","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"HgF84Somaz"},{"type":"text","value":", we get ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"ZdFajVUmUJ"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"O2RJ1cd7sX"},{"type":"text","value":".","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"JMukfpJCRE"}],"key":"teM7L5pI60"},{"type":"heading","depth":3,"position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"children":[{"type":"text","value":"Fold Left","position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"key":"pP1MfyGRJ5"}],"identifier":"fold-left","label":"Fold Left","html_id":"fold-left","implicit":true,"key":"rXqYJbA507"},{"type":"code","lang":"ocaml","value":"let rec fold_left op acc = function\n  | []   -> acc\n  | h :: t -> fold_left op (op acc h) t","position":{"start":{"line":105,"column":1},"end":{"line":109,"column":1}},"key":"hhcihFAhPL"},{"type":"paragraph","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"children":[{"type":"text","value":"The idea is that ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"noCgez1roF"},{"type":"inlineCode","value":"fold_left (+) 0 [a;b;c]","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"qKWWaqxLLe"},{"type":"text","value":" results in evaluation of ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"eYqixIQLuU"},{"type":"inlineCode","value":"((0+a)+b)+c","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"J0KiRu4hd7"},{"type":"text","value":". The parentheses associate from the left-most subexpression to the right. So ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"w1x1RameTG"},{"type":"inlineCode","value":"fold_left","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"Af4v6RkiDh"},{"type":"text","value":" is “folding in” elements of the list from the left to the right, combining each new element using the operator.","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"X2BtcfWo19"}],"key":"mvmxlbYtr5"},{"type":"heading","depth":3,"position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"children":[{"type":"text","value":"Fold Left vs. Fold Right","position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"key":"BIWAwlGqZ5"}],"identifier":"fold-left-vs-fold-right","label":"Fold Left vs. Fold Right","html_id":"fold-left-vs-fold-right","implicit":true,"key":"pZxDdHiWWi"},{"type":"paragraph","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"strong","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"text","value":"Why is there a difference of the order the operand takes in arguments (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"UKGGRy48zI"},{"type":"inlineCode","value":"op acc h; op: 'a -> 'b -> 'a","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"jcIt1jsHfX"},{"type":"text","value":" as in fold_left; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"KnVtnFYEe8"},{"type":"inlineCode","value":"op h (combine init op t); op: 'a -> 'b -> 'b ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"rO7RsmZYSN"},{"type":"text","value":" as in fold_right)? And why is there a difference of the order these two functions take in argument (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"FXBOXqblAG"},{"type":"inlineCode","value":"fold_left op acc lst","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"InGQKL7D3b"},{"type":"text","value":"; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"qoNHva9i0h"},{"type":"inlineCode","value":"fold_right op lst init","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"E2JrgjKtqw"},{"type":"text","value":")?","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"six5YQjHes"}],"key":"dXYmp918JZ"}],"key":"d943F8wTXi"},{"type":"paragraph","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"strong","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"inlineCode","value":"fold_left f init [v1; v2;...; vn]","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"QCvbXFZaya"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"cr0MD6vMAx"},{"type":"inlineCode","value":"f (... (f (f init v1) v2)...) vn","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"S3bxuIpJid"},{"type":"text","value":" whereas ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"OIWaTg2qRK"},{"type":"inlineCode","value":"fold_right f [v1; v2;...; vn] init","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"LP7nPa0OMp"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"XsPikScqJC"},{"type":"inlineCode","value":"f v1 (f v2 (...(f vn init)...))","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"DEUBz88c2E"},{"type":"text","value":" (-- Nate Foster)","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"lTtE2O6UWw"}],"key":"VVB0gqO0I3"}],"key":"b9gsTJQ3Tu"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":119,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":119,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"children":[{"type":"text","value":"order of evaluation:","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"key":"ALCAUxW6RY"}],"key":"v1z8J99xrN"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":121,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"children":[{"type":"text","value":"fold_left evaluates from left to right","position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"key":"vXVrKS9F9t"}],"key":"wGvFqHFaaP"},{"type":"listItem","spread":true,"position":{"start":{"line":122,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"fold_right evaluates from right to left","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"QeiP86ZiD4"}],"key":"qpPMJa6hie"}],"key":"qwMloiArRq"}],"key":"WF4rp6cV3i"},{"type":"listItem","spread":true,"position":{"start":{"line":124,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"tail-recursive:","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"UhdzSKA4pi"}],"key":"HNlEBwPwJD"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"because of the way these two functions evaluate","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"z85PO0ZGXo"}],"key":"iIbHN69V1W"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"fold_left is tail-recursive. We can add that value to ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"AS6fSgMQly"},{"type":"inlineCode","value":"acc","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"k1w0LwUYGX"},{"type":"text","value":", the group of elements completed evaluation, after evaluating the current element.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"j7RyNIFpgx"}],"key":"w6t53jDKya"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"fold_right is not recursive. Because it cannot evaluate the nth element before evaluating the (n+1)th element. And the evaluation of nth element depends on (n+1)th element. This pattern violates the definition of tail-recursive","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"W9jxYXCfbI"}],"key":"o0M99GFRNM"}],"key":"x3pWPIetHc"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"Then is there a tail-recursive version of fold_right? You can first reverse the list and then fold_left.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"yQ3jamRoMp"}],"key":"AFOkwquhvr"}],"key":"CImPWAzkGk"}],"key":"KmKikLJNLg"},{"type":"heading","depth":3,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Fold Application","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"YqaP5qMCdk"}],"identifier":"fold-application","label":"Fold Application","html_id":"fold-application","implicit":true,"key":"u4j8QJsXa5"},{"type":"code","lang":"ocaml","value":"let length l = List.fold_left (fun a _ -> a+1) 0 l\nlet rev l = List.fold_left (fun a x -> x::a) [] l\nlet map f l = List.fold_right (fun x a -> (f x)::a) l []\nlet filter f l = List.fold_right (fun x a -> if f x then x::a else a) l []\n\n(*test whether a list is full of true*)\nlet lst_and_fold =\n    List.fold_left (fun acc elt -> acc && elt) true","position":{"start":{"line":135,"column":1},"end":{"line":144,"column":1}},"key":"xiool3ejd4"},{"type":"heading","depth":3,"position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"children":[{"type":"text","value":"Generalized Fold","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"iwxdWX798g"}],"identifier":"generalized-fold","label":"Generalized Fold","html_id":"generalized-fold","implicit":true,"key":"tSnQGSoZpd"},{"type":"code","lang":"ocaml","value":"let rec foldtree init op = function\n  | Leaf -> init\n  | Node (v,l,r) -> op v (foldtree init op l) (foldtree init op r)\n  \nlet size t = foldtree 0 (fun _ l r -> 1 + l + r) t\nlet depth t = foldtree 0 (fun _ l r -> 1 + max l r) t\nlet preorder t = foldtree [] (fun x l r -> [x] @ l @ r) t","position":{"start":{"line":148,"column":1},"end":{"line":156,"column":1}},"key":"ST99JV7TKU"}],"key":"ZInGX9neUy"}],"key":"DyXgwBUYIV"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"C S3110"},"next":{"title":"Modules","url":"/2020-02-11-modules","group":"C S3110"}}},"domain":"http://localhost:3000"}