{"version":2,"kind":"Article","sha256":"ca64131a9ecf2a7ea84eec752622ae040e3d7e1bca53781d6a48991ce914f621","slug":"2020-02-06-higher-order-functions","location":"/CS3110/2020-02-06-Higher-Order-Functions.md","dependencies":[],"frontmatter":{"title":"Higher-Order Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-02-06","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-06-Higher-Order-Functions.md","url":"/cornell-notes/build/2020-02-06-Higher-Or-ee2b7f2874aa6ec919bfb4952cac109f.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Sy3HtBdugu"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Higher Order Programming","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"TrZO2Qcpph"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","key":"wLmJyh6uC7"}],"key":"TH3R4mXX1T"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"EACZbb9w2H"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Aa0G8kp4og"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"pWGufF2H0L"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"higher-order: functions as values, you can pass functions as arguments into other functions, functions at the same level as other variables","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"LYUD9CrMsw"}],"key":"eK1d68DWj8"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"lower-order: languages like C, functions as something higher than other variables","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"jJreD9OV1p"}],"key":"vJQv4zqSmW"}],"key":"Uvp1yZY8ho"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Pipeline is a higher-order function.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"guTScNNida"}],"key":"IqTM0kM5KT"},{"type":"code","lang":"ocaml","value":"let pipeline x f = f x\nlet (|>) = pipeline\nlet x = 5 |> double  (* 10 *)","position":{"start":{"line":21,"column":1},"end":{"line":25,"column":1}},"key":"S1o0XMB8nf"},{"type":"comment","value":"more","key":"tSGBlhOP9f"},{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Map (Transforms Elements)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"zfGi8n9dD3"}],"identifier":"map-transforms-elements","label":"Map (Transforms Elements)","html_id":"map-transforms-elements","implicit":true,"key":"oPApDAFKLr"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"it ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"pebVIjOPSc"},{"type":"emphasis","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"maps","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"oDlcheDe4k"}],"key":"iuNCKBBao5"},{"type":"text","value":" each element of the list through a function","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"nqjykWUH7q"}],"key":"fKpkIfHysp"},{"type":"code","lang":"ocaml","value":"(* [map f [x1; x2; ...; xn]] is [f x1; f x2; ...; f xn] *)\nlet rec map f = function\n  | [] -> []\n  | h::t -> (f h)::(map f t)\n\nlet add1 = map (fun x-> x+1);\nlet add1' = map ((+)1);\n\nlet concat3110 = map (fun x -> x^\"3110\")","position":{"start":{"line":33,"column":1},"end":{"line":43,"column":1}},"key":"Snu2u7NX18"},{"type":"heading","depth":2,"position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"Filter (Eliminates Elements)","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"j6XGRvJAok"}],"identifier":"filter-eliminates-elements","label":"Filter (Eliminates Elements)","html_id":"filter-eliminates-elements","implicit":true,"key":"OgESxYHvyW"},{"type":"paragraph","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"inlineCode","value":"List.filter <predicate> <list>","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"AxhtRBsflH"},{"type":"text","value":"it picks all elements which meet predicate p to form a new list.","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"OX2GDKOIhp"}],"key":"moKauGDlKp"},{"type":"code","lang":"ocaml","value":"(* [filter p l] is the list of elements of [l] that satisfy the predicate [p]. \n * The order of the elements in the input list is preserved. *)\nlet rec filter f = function\n  | [] -> []\n  | h::t -> if f h then h::(filter f t) else filter f t","position":{"start":{"line":51,"column":1},"end":{"line":57,"column":1}},"key":"Ph44HfMQqr"},{"type":"heading","depth":2,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Fold (Combines Elements)","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"uFbJRjatHv"}],"identifier":"fold-combines-elements","label":"Fold (Combines Elements)","html_id":"fold-combines-elements","implicit":true,"key":"TA5FDscKN6"},{"type":"heading","depth":3,"position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Fold Right","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"zj8LD1Swp8"}],"identifier":"fold-right","label":"Fold Right","html_id":"fold-right","implicit":true,"key":"XOXb2iSYjp"},{"type":"blockquote","position":{"start":{"line":63,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Can we abstract the following two functions as a single function?","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"tWTUvTbPH5"}],"key":"vpikHpFhnp"},{"type":"code","lang":"ocaml","value":"let rec sum = function\n  | [] -> 0\n  | h::t -> h + (sum t)\n\nlet rec concat = function\n  | [] -> \"\"\n  | h::t -> h ^ (concat t)","position":{"start":{"line":65,"column":1},"end":{"line":73,"column":1}},"key":"MbjdGg8L4w"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"First, we abstract the initial value","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"eefrDvoNLr"}],"key":"VM1Of8KBEt"},{"type":"code","lang":"ocaml","value":"let rec sum' init = function\n  | [] -> init\n  | h::t -> h + sum' init t\n\nlet sum = sum' 0\n\nlet rec concat' init = function\n  | [] -> init\n  | h::t -> h ^ concat' init t\n\nlet concat = concat' \"\"","position":{"start":{"line":77,"column":1},"end":{"line":89,"column":1}},"key":"CnfyHJlOkW"},{"type":"paragraph","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"text","value":"We find out the only thing these two functions have in difference is the operator. So the next step, we factor out the operator.","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"key":"gske3KxV7U"}],"key":"puqPdgckUt"}],"key":"tsOssbNbm1"},{"type":"code","lang":"ocaml","value":"let rec combine init op = function\n| [] -> init\n| h::t -> op h (combine init op t);;","position":{"start":{"line":93,"column":1},"end":{"line":97,"column":1}},"key":"Tp22A1bMMV"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"The intuition for why this function is called ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"Yxyr1TYuTn"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"MuLD9OMhhr"},{"type":"text","value":" is that the way it works is to “fold in” elements of the list from the right to the left, combining each new element using the operator. For example, ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"OhMFPzTaAw"},{"type":"inlineCode","value":"fold_right (+) [a;b;c] 0","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"AWqEvFnv8t"},{"type":"text","value":" results in evaluation of the expression ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"Dqqz5Fx7TR"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"OXXJdYkDy7"},{"type":"text","value":". The parentheses associate from the right-most subexpression to the left.","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"AL6seBGvJW"}],"key":"GfJfNhaQPg"},{"type":"paragraph","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"children":[{"type":"text","value":"One way to think of ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"lPQEO5o9iL"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"TtUJwiiseh"},{"type":"text","value":" would be that the ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"PiteJ0uVCo"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"DkJhgLLhTQ"},{"type":"text","value":" value in the list gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"eKhMSxc1VG"},{"type":"inlineCode","value":"init","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"q6WIHa1RX8"},{"type":"text","value":", and each ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"DyxndLxOQA"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"vJrzFDYcxV"},{"type":"text","value":" constructor gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"bCvLDBwXi2"},{"type":"inlineCode","value":"op","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"oPi9G43nlq"},{"type":"text","value":". For example, ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"nb5LgLZo9r"},{"type":"inlineCode","value":"[a;b;c]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"ldCqwjpMMB"},{"type":"text","value":" is just syntactic sugar for ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"E3WlwIrkYX"},{"type":"inlineCode","value":"a::(b::(c::[]))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"f7doUtVX95"},{"type":"text","value":". So if we replace ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"O0JGPiPcrE"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"Y2RqDKgpJ9"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"Pm79stiCDy"},{"type":"inlineCode","value":"0","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"DxQmhw1GA9"},{"type":"text","value":" and ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"KxcjcPKOeA"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"JeLouXL9QJ"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"r5pFlIgMOc"},{"type":"inlineCode","value":"(+)","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"OYv29qfiRF"},{"type":"text","value":", we get ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"tTnwe2qipd"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"Yy2VntY12A"},{"type":"text","value":".","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"HoInODFeOT"}],"key":"dIh98kv0Hg"},{"type":"heading","depth":3,"position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"children":[{"type":"text","value":"Fold Left","position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"key":"ClUVttkNiP"}],"identifier":"fold-left","label":"Fold Left","html_id":"fold-left","implicit":true,"key":"fHOPw0Tb9h"},{"type":"code","lang":"ocaml","value":"let rec fold_left op acc = function\n  | []   -> acc\n  | h :: t -> fold_left op (op acc h) t","position":{"start":{"line":105,"column":1},"end":{"line":109,"column":1}},"key":"SUlcuZ4ool"},{"type":"paragraph","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"children":[{"type":"text","value":"The idea is that ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"KkB7EIQFzs"},{"type":"inlineCode","value":"fold_left (+) 0 [a;b;c]","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"Gu1RDIPC9h"},{"type":"text","value":" results in evaluation of ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"IrJpUzmg86"},{"type":"inlineCode","value":"((0+a)+b)+c","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"Vlj3wEGaG7"},{"type":"text","value":". The parentheses associate from the left-most subexpression to the right. So ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"clYyhMsB9s"},{"type":"inlineCode","value":"fold_left","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"Le7uPlt4Ef"},{"type":"text","value":" is “folding in” elements of the list from the left to the right, combining each new element using the operator.","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"GhUg2Gm50a"}],"key":"wAalMoQpCO"},{"type":"heading","depth":3,"position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"children":[{"type":"text","value":"Fold Left vs. Fold Right","position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"key":"dItMwAkpSo"}],"identifier":"fold-left-vs-fold-right","label":"Fold Left vs. Fold Right","html_id":"fold-left-vs-fold-right","implicit":true,"key":"jh6nIm5kr5"},{"type":"paragraph","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"strong","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"text","value":"Why is there a difference of the order the operand takes in arguments (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"Gl9bfHXpLR"},{"type":"inlineCode","value":"op acc h; op: 'a -> 'b -> 'a","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"u6kgBYyA0a"},{"type":"text","value":" as in fold_left; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"RJRtzPYQc4"},{"type":"inlineCode","value":"op h (combine init op t); op: 'a -> 'b -> 'b ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"zsZOZEtoN1"},{"type":"text","value":" as in fold_right)? And why is there a difference of the order these two functions take in argument (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"fFqeA1cgmH"},{"type":"inlineCode","value":"fold_left op acc lst","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"jddtrRDfov"},{"type":"text","value":"; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"mmdPItIQz3"},{"type":"inlineCode","value":"fold_right op lst init","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"mPgOrnnZrO"},{"type":"text","value":")?","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"RwG07JH0DQ"}],"key":"K7OGqiwWmu"}],"key":"YYLn4vDmuF"},{"type":"paragraph","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"strong","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"inlineCode","value":"fold_left f init [v1; v2;...; vn]","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"hFh7pJuGjR"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"VIdLKLiVhr"},{"type":"inlineCode","value":"f (... (f (f init v1) v2)...) vn","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"FZLhWjXHro"},{"type":"text","value":" whereas ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"YVm6l7DiTe"},{"type":"inlineCode","value":"fold_right f [v1; v2;...; vn] init","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"FXfipgqR3m"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"hSGONnADAL"},{"type":"inlineCode","value":"f v1 (f v2 (...(f vn init)...))","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"CgV9aHZWte"},{"type":"text","value":" (-- Nate Foster)","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"mdMpz5Lk8p"}],"key":"lzHkyk3sfF"}],"key":"jkzjHnQqzQ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":119,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":119,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"children":[{"type":"text","value":"order of evaluation:","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"key":"pSJHHNRAaR"}],"key":"rJ0KPpRvZ5"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":121,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"children":[{"type":"text","value":"fold_left evaluates from left to right","position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"key":"kkAjklMXbR"}],"key":"g4BWdtIu8g"},{"type":"listItem","spread":true,"position":{"start":{"line":122,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"fold_right evaluates from right to left","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"csf2K6e7iE"}],"key":"zUo77jGZMM"}],"key":"XeokuHsVog"}],"key":"H4AXvmbbce"},{"type":"listItem","spread":true,"position":{"start":{"line":124,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"tail-recursive:","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"ExcGDlnTy7"}],"key":"RzwqWgqui9"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"because of the way these two functions evaluate","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"cplTzjNYuj"}],"key":"VZR0LQQD4N"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"fold_left is tail-recursive. We can add that value to ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"isNih1h4IT"},{"type":"inlineCode","value":"acc","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"I0KQ3lwKFt"},{"type":"text","value":", the group of elements completed evaluation, after evaluating the current element.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"lPIEjdTDJK"}],"key":"JegK7fy9WQ"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"fold_right is not recursive. Because it cannot evaluate the nth element before evaluating the (n+1)th element. And the evaluation of nth element depends on (n+1)th element. This pattern violates the definition of tail-recursive","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"k2ATcsd7j4"}],"key":"X93upAI4SE"}],"key":"dx7OdG0bzq"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"Then is there a tail-recursive version of fold_right? You can first reverse the list and then fold_left.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"uPkWhoacMh"}],"key":"WPNvO9SOm3"}],"key":"VVfdhk5CKZ"}],"key":"i0muauCv4y"},{"type":"heading","depth":3,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Fold Application","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"jSF2Yn4WcC"}],"identifier":"fold-application","label":"Fold Application","html_id":"fold-application","implicit":true,"key":"lIT7Yn5ziO"},{"type":"code","lang":"ocaml","value":"let length l = List.fold_left (fun a _ -> a+1) 0 l\nlet rev l = List.fold_left (fun a x -> x::a) [] l\nlet map f l = List.fold_right (fun x a -> (f x)::a) l []\nlet filter f l = List.fold_right (fun x a -> if f x then x::a else a) l []\n\n(*test whether a list is full of true*)\nlet lst_and_fold =\n    List.fold_left (fun acc elt -> acc && elt) true","position":{"start":{"line":135,"column":1},"end":{"line":144,"column":1}},"key":"Z8VJd2sjhF"},{"type":"heading","depth":3,"position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"children":[{"type":"text","value":"Generalized Fold","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"zZGjDvETrp"}],"identifier":"generalized-fold","label":"Generalized Fold","html_id":"generalized-fold","implicit":true,"key":"UueW04tP8A"},{"type":"code","lang":"ocaml","value":"let rec foldtree init op = function\n  | Leaf -> init\n  | Node (v,l,r) -> op v (foldtree init op l) (foldtree init op r)\n  \nlet size t = foldtree 0 (fun _ l r -> 1 + l + r) t\nlet depth t = foldtree 0 (fun _ l r -> 1 + max l r) t\nlet preorder t = foldtree [] (fun x l r -> [x] @ l @ r) t","position":{"start":{"line":148,"column":1},"end":{"line":156,"column":1}},"key":"EREQux5e2X"}],"key":"r28MPiOyiY"}],"key":"fc5piIqUho"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"CS3110 Functional Programming"},"next":{"title":"Modules","url":"/2020-02-11-modules","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}