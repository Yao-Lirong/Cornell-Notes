{"version":2,"kind":"Article","sha256":"ca64131a9ecf2a7ea84eec752622ae040e3d7e1bca53781d6a48991ce914f621","slug":"2020-02-06-higher-order-functions","location":"/CS3110/2020-02-06-Higher-Order-Functions.md","dependencies":[],"frontmatter":{"title":"Higher-Order Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-02-06","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-06-Higher-Order-Functions.md","url":"/cornell-notes/build/2020-02-06-Higher-Or-ee2b7f2874aa6ec919bfb4952cac109f.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"lGbXTbLYjO"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Higher Order Programming","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"EJReoNWP2N"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","key":"cnfPTQmOOw"}],"key":"ppGjrBYQsV"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"gIpvmaA08w"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"WKh0OY2f9J"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"pKTl01oVAi"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"higher-order: functions as values, you can pass functions as arguments into other functions, functions at the same level as other variables","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"l2cToNLmUV"}],"key":"DkzzuFoiBs"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"lower-order: languages like C, functions as something higher than other variables","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"zoB19jmMlN"}],"key":"hK8BvLkmqS"}],"key":"vcfH432vxr"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Pipeline is a higher-order function.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"W0L3IoIHLK"}],"key":"odCuxpuc6r"},{"type":"code","lang":"ocaml","value":"let pipeline x f = f x\nlet (|>) = pipeline\nlet x = 5 |> double  (* 10 *)","position":{"start":{"line":21,"column":1},"end":{"line":25,"column":1}},"key":"cFszBAxG3W"},{"type":"comment","value":"more","key":"rQigjOJJ2B"},{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Map (Transforms Elements)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"dGJzRyjKgI"}],"identifier":"map-transforms-elements","label":"Map (Transforms Elements)","html_id":"map-transforms-elements","implicit":true,"key":"hJpQCHvILP"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"it ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"eQptEhxMrW"},{"type":"emphasis","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"maps","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"CXn0eY6KWI"}],"key":"gvJ6Cmft5z"},{"type":"text","value":" each element of the list through a function","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"NdrfoUjah2"}],"key":"sjATzzw8UF"},{"type":"code","lang":"ocaml","value":"(* [map f [x1; x2; ...; xn]] is [f x1; f x2; ...; f xn] *)\nlet rec map f = function\n  | [] -> []\n  | h::t -> (f h)::(map f t)\n\nlet add1 = map (fun x-> x+1);\nlet add1' = map ((+)1);\n\nlet concat3110 = map (fun x -> x^\"3110\")","position":{"start":{"line":33,"column":1},"end":{"line":43,"column":1}},"key":"ntf8jv2iPg"},{"type":"heading","depth":2,"position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"Filter (Eliminates Elements)","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"YqbAXFQBgf"}],"identifier":"filter-eliminates-elements","label":"Filter (Eliminates Elements)","html_id":"filter-eliminates-elements","implicit":true,"key":"FmejTIQsgW"},{"type":"paragraph","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"inlineCode","value":"List.filter <predicate> <list>","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"qrfXwlBm40"},{"type":"text","value":"it picks all elements which meet predicate p to form a new list.","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"Fg51YDqqzT"}],"key":"M2EYV5Ikvx"},{"type":"code","lang":"ocaml","value":"(* [filter p l] is the list of elements of [l] that satisfy the predicate [p]. \n * The order of the elements in the input list is preserved. *)\nlet rec filter f = function\n  | [] -> []\n  | h::t -> if f h then h::(filter f t) else filter f t","position":{"start":{"line":51,"column":1},"end":{"line":57,"column":1}},"key":"pFgm83oZ7G"},{"type":"heading","depth":2,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Fold (Combines Elements)","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"KChRWZPATU"}],"identifier":"fold-combines-elements","label":"Fold (Combines Elements)","html_id":"fold-combines-elements","implicit":true,"key":"WWyvBxn8cT"},{"type":"heading","depth":3,"position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Fold Right","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"A0JWEhvEGh"}],"identifier":"fold-right","label":"Fold Right","html_id":"fold-right","implicit":true,"key":"Q8BiI40qMw"},{"type":"blockquote","position":{"start":{"line":63,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Can we abstract the following two functions as a single function?","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"xIIpSzdYcl"}],"key":"yW8DiLp7la"},{"type":"code","lang":"ocaml","value":"let rec sum = function\n  | [] -> 0\n  | h::t -> h + (sum t)\n\nlet rec concat = function\n  | [] -> \"\"\n  | h::t -> h ^ (concat t)","position":{"start":{"line":65,"column":1},"end":{"line":73,"column":1}},"key":"gL3Q5WnYxc"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"First, we abstract the initial value","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"OBZxLmzhk6"}],"key":"SZvhobZi6g"},{"type":"code","lang":"ocaml","value":"let rec sum' init = function\n  | [] -> init\n  | h::t -> h + sum' init t\n\nlet sum = sum' 0\n\nlet rec concat' init = function\n  | [] -> init\n  | h::t -> h ^ concat' init t\n\nlet concat = concat' \"\"","position":{"start":{"line":77,"column":1},"end":{"line":89,"column":1}},"key":"yBnVW2wBfE"},{"type":"paragraph","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"text","value":"We find out the only thing these two functions have in difference is the operator. So the next step, we factor out the operator.","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"key":"CwG0pHHSHT"}],"key":"AinTjz6tLo"}],"key":"Kv94ZGIFgs"},{"type":"code","lang":"ocaml","value":"let rec combine init op = function\n| [] -> init\n| h::t -> op h (combine init op t);;","position":{"start":{"line":93,"column":1},"end":{"line":97,"column":1}},"key":"gopn7zE5Xt"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"The intuition for why this function is called ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"HHf5JrOOiO"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"DpQHj4KO45"},{"type":"text","value":" is that the way it works is to “fold in” elements of the list from the right to the left, combining each new element using the operator. For example, ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"jP4oREcw85"},{"type":"inlineCode","value":"fold_right (+) [a;b;c] 0","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"hUdDbLteEX"},{"type":"text","value":" results in evaluation of the expression ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"bu9aaSTI8o"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"dtPNg5I8uN"},{"type":"text","value":". The parentheses associate from the right-most subexpression to the left.","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"ntuR4rkWyT"}],"key":"nApp5OWeVw"},{"type":"paragraph","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"children":[{"type":"text","value":"One way to think of ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"lNMzvSV4Qo"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"twRrs5Kil0"},{"type":"text","value":" would be that the ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"YKnRJw9Vjt"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"B7R67sSIQR"},{"type":"text","value":" value in the list gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"ZBXX7ONt8g"},{"type":"inlineCode","value":"init","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"RAWMqqwe1k"},{"type":"text","value":", and each ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"ElqJLDUSEW"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"b9s0AhJR2x"},{"type":"text","value":" constructor gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"EmCFHittZZ"},{"type":"inlineCode","value":"op","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"yuAO392ERF"},{"type":"text","value":". For example, ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"mevu40WIcE"},{"type":"inlineCode","value":"[a;b;c]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"Dj2knwLGHW"},{"type":"text","value":" is just syntactic sugar for ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"roVqEPHBOy"},{"type":"inlineCode","value":"a::(b::(c::[]))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"fXKs361cfI"},{"type":"text","value":". So if we replace ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"KgCGDxD4kA"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"SAhGRYDzsC"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"mdZd74iSxx"},{"type":"inlineCode","value":"0","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"pRwQ1CyVLz"},{"type":"text","value":" and ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"sif4IPHV4o"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"xDgN65XQRy"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"awyLkhl9rH"},{"type":"inlineCode","value":"(+)","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"dIbmcO9mPj"},{"type":"text","value":", we get ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"txdS006HFf"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"wHPrx0fbLK"},{"type":"text","value":".","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"nA9c71skKi"}],"key":"PpQfKYLNM1"},{"type":"heading","depth":3,"position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"children":[{"type":"text","value":"Fold Left","position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"key":"liGATYAM0D"}],"identifier":"fold-left","label":"Fold Left","html_id":"fold-left","implicit":true,"key":"Anrf2PPjFm"},{"type":"code","lang":"ocaml","value":"let rec fold_left op acc = function\n  | []   -> acc\n  | h :: t -> fold_left op (op acc h) t","position":{"start":{"line":105,"column":1},"end":{"line":109,"column":1}},"key":"vVrHAT7Tuv"},{"type":"paragraph","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"children":[{"type":"text","value":"The idea is that ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"EHKMXEG0CL"},{"type":"inlineCode","value":"fold_left (+) 0 [a;b;c]","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"anFhUTCH76"},{"type":"text","value":" results in evaluation of ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"yIFe1fvL3N"},{"type":"inlineCode","value":"((0+a)+b)+c","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"vD6sb2pxUW"},{"type":"text","value":". The parentheses associate from the left-most subexpression to the right. So ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"Cn2afR5M9D"},{"type":"inlineCode","value":"fold_left","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"RjCXS7DXSQ"},{"type":"text","value":" is “folding in” elements of the list from the left to the right, combining each new element using the operator.","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"ndA2r06gaO"}],"key":"G4I2rM3YNc"},{"type":"heading","depth":3,"position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"children":[{"type":"text","value":"Fold Left vs. Fold Right","position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"key":"o084WdLGrc"}],"identifier":"fold-left-vs-fold-right","label":"Fold Left vs. Fold Right","html_id":"fold-left-vs-fold-right","implicit":true,"key":"dA06qrtWC1"},{"type":"paragraph","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"strong","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"text","value":"Why is there a difference of the order the operand takes in arguments (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"ERKVbBKC21"},{"type":"inlineCode","value":"op acc h; op: 'a -> 'b -> 'a","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"vEUbZ7Vw8Q"},{"type":"text","value":" as in fold_left; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"yhu0iVUFkd"},{"type":"inlineCode","value":"op h (combine init op t); op: 'a -> 'b -> 'b ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"LAFjl7qVKU"},{"type":"text","value":" as in fold_right)? And why is there a difference of the order these two functions take in argument (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"daoLGPEoyO"},{"type":"inlineCode","value":"fold_left op acc lst","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"vshzM7GSv2"},{"type":"text","value":"; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"maooPE2Crn"},{"type":"inlineCode","value":"fold_right op lst init","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"YImokd0LEg"},{"type":"text","value":")?","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"TKhrP3Cx6N"}],"key":"WkQazUn2yS"}],"key":"twBY2Lj9ZY"},{"type":"paragraph","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"strong","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"inlineCode","value":"fold_left f init [v1; v2;...; vn]","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"CImxiEhFs1"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"En4cQQR2YJ"},{"type":"inlineCode","value":"f (... (f (f init v1) v2)...) vn","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"Bs4L653AVz"},{"type":"text","value":" whereas ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"Y3Aeh0nFO6"},{"type":"inlineCode","value":"fold_right f [v1; v2;...; vn] init","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"Yr03cUQPKw"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"KYGeRqE5Hv"},{"type":"inlineCode","value":"f v1 (f v2 (...(f vn init)...))","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"cpX3QyyKGv"},{"type":"text","value":" (-- Nate Foster)","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"Z0kMXZLe52"}],"key":"LoRHQRfu3o"}],"key":"vhSlcHiyG8"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":119,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":119,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"children":[{"type":"text","value":"order of evaluation:","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"key":"DwBaGk56Ze"}],"key":"BtnWWPEBDK"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":121,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"children":[{"type":"text","value":"fold_left evaluates from left to right","position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"key":"NJlTY7jaH8"}],"key":"tDFofxsGNS"},{"type":"listItem","spread":true,"position":{"start":{"line":122,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"fold_right evaluates from right to left","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"I8l3cw1OCv"}],"key":"Fc6DmLn7U4"}],"key":"mBOtzokWr4"}],"key":"YFtNVOU6jY"},{"type":"listItem","spread":true,"position":{"start":{"line":124,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"tail-recursive:","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"JHW4xMcol7"}],"key":"GHOYK6OVP1"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"because of the way these two functions evaluate","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"CpvUhHJAy4"}],"key":"W6Xa5yoYmf"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"fold_left is tail-recursive. We can add that value to ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"dLgdDPwo1Z"},{"type":"inlineCode","value":"acc","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"EimDO5c7pM"},{"type":"text","value":", the group of elements completed evaluation, after evaluating the current element.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"uA6tnvHn3c"}],"key":"HsItdCZArd"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"fold_right is not recursive. Because it cannot evaluate the nth element before evaluating the (n+1)th element. And the evaluation of nth element depends on (n+1)th element. This pattern violates the definition of tail-recursive","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"o0bS8prZaN"}],"key":"JeFY9zWhXH"}],"key":"v4FRgY7fLf"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"Then is there a tail-recursive version of fold_right? You can first reverse the list and then fold_left.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"zp9gLliWXl"}],"key":"GcWF4zHI7u"}],"key":"TtTWU3D3yX"}],"key":"FZHwINw4dI"},{"type":"heading","depth":3,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Fold Application","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"P8P2CRwcoI"}],"identifier":"fold-application","label":"Fold Application","html_id":"fold-application","implicit":true,"key":"EpR0RWal0N"},{"type":"code","lang":"ocaml","value":"let length l = List.fold_left (fun a _ -> a+1) 0 l\nlet rev l = List.fold_left (fun a x -> x::a) [] l\nlet map f l = List.fold_right (fun x a -> (f x)::a) l []\nlet filter f l = List.fold_right (fun x a -> if f x then x::a else a) l []\n\n(*test whether a list is full of true*)\nlet lst_and_fold =\n    List.fold_left (fun acc elt -> acc && elt) true","position":{"start":{"line":135,"column":1},"end":{"line":144,"column":1}},"key":"e2waoT0f2v"},{"type":"heading","depth":3,"position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"children":[{"type":"text","value":"Generalized Fold","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"hBJ0nlakFZ"}],"identifier":"generalized-fold","label":"Generalized Fold","html_id":"generalized-fold","implicit":true,"key":"Nppg746zcD"},{"type":"code","lang":"ocaml","value":"let rec foldtree init op = function\n  | Leaf -> init\n  | Node (v,l,r) -> op v (foldtree init op l) (foldtree init op r)\n  \nlet size t = foldtree 0 (fun _ l r -> 1 + l + r) t\nlet depth t = foldtree 0 (fun _ l r -> 1 + max l r) t\nlet preorder t = foldtree [] (fun x l r -> [x] @ l @ r) t","position":{"start":{"line":148,"column":1},"end":{"line":156,"column":1}},"key":"LfYpAJIvUp"}],"key":"BJeaBgLSbL"}],"key":"N4sCAN8fXA"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"CS3110 Functional Programming"},"next":{"title":"Modules","url":"/2020-02-11-modules","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}