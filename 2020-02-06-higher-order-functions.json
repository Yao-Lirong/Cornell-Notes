{"version":2,"kind":"Article","sha256":"ca64131a9ecf2a7ea84eec752622ae040e3d7e1bca53781d6a48991ce914f621","slug":"2020-02-06-higher-order-functions","location":"/CS3110/2020-02-06-Higher-Order-Functions.md","dependencies":[],"frontmatter":{"title":"Higher-Order Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-02-06","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-06-Higher-Order-Functions.md","url":"/build/2020-02-06-Higher-Or-8b96a13d278326bb61857c6a3bd07a36.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"ozw1PLEMnu"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Higher Order Programming","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"EPjMZc3rFP"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/hop/intro.html","key":"dr94hSzfFr"}],"key":"pnXo5r7EmJ"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"IirkP39nyl"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Introduction","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"h2g663GGgQ"}],"identifier":"introduction","label":"Introduction","html_id":"introduction","implicit":true,"key":"u6arPZkrSV"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":16,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"higher-order: functions as values, you can pass functions as arguments into other functions, functions at the same level as other variables","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"E1Tuvr8xcr"}],"key":"eTLgTkgX8X"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"lower-order: languages like C, functions as something higher than other variables","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"bsHqWrPUkT"}],"key":"yrmdrERwaf"}],"key":"oEAqtlMc6j"},{"type":"paragraph","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"Pipeline is a higher-order function.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"jDi2dELLKq"}],"key":"s4C6in8nL2"},{"type":"code","lang":"ocaml","value":"let pipeline x f = f x\nlet (|>) = pipeline\nlet x = 5 |> double  (* 10 *)","position":{"start":{"line":21,"column":1},"end":{"line":25,"column":1}},"key":"eyzw0VrA9c"},{"type":"comment","value":"more","key":"xTxNFRO5p7"},{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Map (Transforms Elements)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"xfkOHR7yj1"}],"identifier":"map-transforms-elements","label":"Map (Transforms Elements)","html_id":"map-transforms-elements","implicit":true,"key":"rdseHASxhg"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"it ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"ee4szs3ZbZ"},{"type":"emphasis","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"maps","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"dUOLjF3ZmR"}],"key":"ljpBn3uJkj"},{"type":"text","value":" each element of the list through a function","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"YtkTpMGDnL"}],"key":"UojubCx4Dj"},{"type":"code","lang":"ocaml","value":"(* [map f [x1; x2; ...; xn]] is [f x1; f x2; ...; f xn] *)\nlet rec map f = function\n  | [] -> []\n  | h::t -> (f h)::(map f t)\n\nlet add1 = map (fun x-> x+1);\nlet add1' = map ((+)1);\n\nlet concat3110 = map (fun x -> x^\"3110\")","position":{"start":{"line":33,"column":1},"end":{"line":43,"column":1}},"key":"TJqzCOYfvA"},{"type":"heading","depth":2,"position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"Filter (Eliminates Elements)","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"szOsNRpsS9"}],"identifier":"filter-eliminates-elements","label":"Filter (Eliminates Elements)","html_id":"filter-eliminates-elements","implicit":true,"key":"Mrp2uOSbPL"},{"type":"paragraph","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"children":[{"type":"inlineCode","value":"List.filter <predicate> <list>","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"Jc0nIkhqH1"},{"type":"text","value":"it picks all elements which meet predicate p to form a new list.","position":{"start":{"line":49,"column":1},"end":{"line":49,"column":1}},"key":"Aiy2C699pn"}],"key":"o38C3nawBv"},{"type":"code","lang":"ocaml","value":"(* [filter p l] is the list of elements of [l] that satisfy the predicate [p]. \n * The order of the elements in the input list is preserved. *)\nlet rec filter f = function\n  | [] -> []\n  | h::t -> if f h then h::(filter f t) else filter f t","position":{"start":{"line":51,"column":1},"end":{"line":57,"column":1}},"key":"IyJxxEtwgm"},{"type":"heading","depth":2,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Fold (Combines Elements)","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"QK1OASVFUR"}],"identifier":"fold-combines-elements","label":"Fold (Combines Elements)","html_id":"fold-combines-elements","implicit":true,"key":"wbaRF4puCe"},{"type":"heading","depth":3,"position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Fold Right","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"Ozp2GguPy1"}],"identifier":"fold-right","label":"Fold Right","html_id":"fold-right","implicit":true,"key":"w1IsPyW1Cs"},{"type":"blockquote","position":{"start":{"line":63,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Can we abstract the following two functions as a single function?","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"uAzW8Tzrva"}],"key":"VtRwlmBTYK"},{"type":"code","lang":"ocaml","value":"let rec sum = function\n  | [] -> 0\n  | h::t -> h + (sum t)\n\nlet rec concat = function\n  | [] -> \"\"\n  | h::t -> h ^ (concat t)","position":{"start":{"line":65,"column":1},"end":{"line":73,"column":1}},"key":"jkssvsDTy4"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"First, we abstract the initial value","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"O6yOoIaZeK"}],"key":"g86hR6jV5R"},{"type":"code","lang":"ocaml","value":"let rec sum' init = function\n  | [] -> init\n  | h::t -> h + sum' init t\n\nlet sum = sum' 0\n\nlet rec concat' init = function\n  | [] -> init\n  | h::t -> h ^ concat' init t\n\nlet concat = concat' \"\"","position":{"start":{"line":77,"column":1},"end":{"line":89,"column":1}},"key":"oKcKviN9tp"},{"type":"paragraph","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"children":[{"type":"text","value":"We find out the only thing these two functions have in difference is the operator. So the next step, we factor out the operator.","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"key":"FyaMdqXCgs"}],"key":"csvQse05L7"}],"key":"sWUPD62AZi"},{"type":"code","lang":"ocaml","value":"let rec combine init op = function\n| [] -> init\n| h::t -> op h (combine init op t);;","position":{"start":{"line":93,"column":1},"end":{"line":97,"column":1}},"key":"lhJnMFPYzn"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"The intuition for why this function is called ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"sNMD0rWcwU"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"CWJUx4xBOY"},{"type":"text","value":" is that the way it works is to “fold in” elements of the list from the right to the left, combining each new element using the operator. For example, ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"j7mOdjfHcz"},{"type":"inlineCode","value":"fold_right (+) [a;b;c] 0","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"AXCkhmVJW9"},{"type":"text","value":" results in evaluation of the expression ","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"v77SHVITin"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"VBLbVxzwjP"},{"type":"text","value":". The parentheses associate from the right-most subexpression to the left.","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"eECPyizvox"}],"key":"PQ24pThSjE"},{"type":"paragraph","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"children":[{"type":"text","value":"One way to think of ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"l5KmvbMth8"},{"type":"inlineCode","value":"fold_right","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"WufZO7EC7a"},{"type":"text","value":" would be that the ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"C4lnpiSyfq"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"NiJfiQ4rWO"},{"type":"text","value":" value in the list gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"S4yQpGcfsv"},{"type":"inlineCode","value":"init","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"fgfn30qpPb"},{"type":"text","value":", and each ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"gUFP1Xtoke"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"ijjZYIPrlR"},{"type":"text","value":" constructor gets replaced by ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"PSYOKLosi3"},{"type":"inlineCode","value":"op","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"xxnimoETwx"},{"type":"text","value":". For example, ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"QVE9QDilpj"},{"type":"inlineCode","value":"[a;b;c]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"kcKZtOBSK2"},{"type":"text","value":" is just syntactic sugar for ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"KThsP4FD2u"},{"type":"inlineCode","value":"a::(b::(c::[]))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"Tl358JmPF6"},{"type":"text","value":". So if we replace ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"NfZEre0jtF"},{"type":"inlineCode","value":"[]","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"hpDAcDo2by"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"rsLE7q07re"},{"type":"inlineCode","value":"0","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"TXeCaP1t07"},{"type":"text","value":" and ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"oXMcipLfDy"},{"type":"inlineCode","value":"::","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"se6F9VDfV6"},{"type":"text","value":" with ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"EuNMNbtPoZ"},{"type":"inlineCode","value":"(+)","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"TH3gvJrjcZ"},{"type":"text","value":", we get ","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"RvPcxDdHKw"},{"type":"inlineCode","value":"a+(b+(c+0))","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"i13Cz8g9gM"},{"type":"text","value":".","position":{"start":{"line":101,"column":1},"end":{"line":101,"column":1}},"key":"THGoRdxNeC"}],"key":"blXupJ3azM"},{"type":"heading","depth":3,"position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"children":[{"type":"text","value":"Fold Left","position":{"start":{"line":103,"column":1},"end":{"line":103,"column":1}},"key":"yMoQwpwF8h"}],"identifier":"fold-left","label":"Fold Left","html_id":"fold-left","implicit":true,"key":"WYEiPT7VDB"},{"type":"code","lang":"ocaml","value":"let rec fold_left op acc = function\n  | []   -> acc\n  | h :: t -> fold_left op (op acc h) t","position":{"start":{"line":105,"column":1},"end":{"line":109,"column":1}},"key":"LhEYMRz8Hg"},{"type":"paragraph","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"children":[{"type":"text","value":"The idea is that ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"KdCCHUnzHO"},{"type":"inlineCode","value":"fold_left (+) 0 [a;b;c]","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"lXMqyB5QYj"},{"type":"text","value":" results in evaluation of ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"r861mAEKqz"},{"type":"inlineCode","value":"((0+a)+b)+c","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"p1ZnY8otQr"},{"type":"text","value":". The parentheses associate from the left-most subexpression to the right. So ","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"DGOZRAQXSg"},{"type":"inlineCode","value":"fold_left","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"WXTQy0YSNS"},{"type":"text","value":" is “folding in” elements of the list from the left to the right, combining each new element using the operator.","position":{"start":{"line":111,"column":1},"end":{"line":111,"column":1}},"key":"ehBvV03ITj"}],"key":"MNCFEEtDXE"},{"type":"heading","depth":3,"position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"children":[{"type":"text","value":"Fold Left vs. Fold Right","position":{"start":{"line":113,"column":1},"end":{"line":113,"column":1}},"key":"OZ3KasbypQ"}],"identifier":"fold-left-vs-fold-right","label":"Fold Left vs. Fold Right","html_id":"fold-left-vs-fold-right","implicit":true,"key":"kJKKEL9VF0"},{"type":"paragraph","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"strong","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"children":[{"type":"text","value":"Why is there a difference of the order the operand takes in arguments (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"JkABuUl7zB"},{"type":"inlineCode","value":"op acc h; op: 'a -> 'b -> 'a","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"c9KhDlLu94"},{"type":"text","value":" as in fold_left; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"EzGPA3yyjw"},{"type":"inlineCode","value":"op h (combine init op t); op: 'a -> 'b -> 'b ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"lWBxW05cju"},{"type":"text","value":" as in fold_right)? And why is there a difference of the order these two functions take in argument (","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"iJh9uhupTh"},{"type":"inlineCode","value":"fold_left op acc lst","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"xTrqiPC3qI"},{"type":"text","value":"; ","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"dJ5CylMSfT"},{"type":"inlineCode","value":"fold_right op lst init","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"jHTKhwxMQ9"},{"type":"text","value":")?","position":{"start":{"line":115,"column":1},"end":{"line":115,"column":1}},"key":"Wut2r7cE9Q"}],"key":"KhOWLjoDkz"}],"key":"PujPXMA3y2"},{"type":"paragraph","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"strong","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"inlineCode","value":"fold_left f init [v1; v2;...; vn]","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"y707SBoJXu"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"tCwGvDgmfw"},{"type":"inlineCode","value":"f (... (f (f init v1) v2)...) vn","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"w4zszIZEXM"},{"type":"text","value":" whereas ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"AMhkltaJzf"},{"type":"inlineCode","value":"fold_right f [v1; v2;...; vn] init","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"xOpldYCYFx"},{"type":"text","value":" is ","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"gjZmhJxFYD"},{"type":"inlineCode","value":"f v1 (f v2 (...(f vn init)...))","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"c9TmgzWCSC"},{"type":"text","value":" (-- Nate Foster)","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"Jfyol7uSkq"}],"key":"M4nWfg8o9u"}],"key":"L1tUaP8HpR"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":119,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":119,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"children":[{"type":"text","value":"order of evaluation:","position":{"start":{"line":119,"column":1},"end":{"line":119,"column":1}},"key":"fV6p4ucFjR"}],"key":"AnxWXIgvyr"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":121,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"children":[{"type":"text","value":"fold_left evaluates from left to right","position":{"start":{"line":121,"column":1},"end":{"line":121,"column":1}},"key":"C7ywt7Fu9Y"}],"key":"NK5E1GapdQ"},{"type":"listItem","spread":true,"position":{"start":{"line":122,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"fold_right evaluates from right to left","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"pn2kD6ktCO"}],"key":"Vf1kaMVn1w"}],"key":"FxxvNnyOc3"}],"key":"COSTEhikdD"},{"type":"listItem","spread":true,"position":{"start":{"line":124,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"tail-recursive:","position":{"start":{"line":124,"column":1},"end":{"line":124,"column":1}},"key":"E9HOWsPCrM"}],"key":"JYGMHUDsBe"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"because of the way these two functions evaluate","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"Ms7i6EJEpx"}],"key":"eu9RXMHntp"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"fold_left is tail-recursive. We can add that value to ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"gzKVdRhuzv"},{"type":"inlineCode","value":"acc","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"JhSUTUaIm0"},{"type":"text","value":", the group of elements completed evaluation, after evaluating the current element.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"dMVA6BDabP"}],"key":"Fowo3UDMqF"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"text","value":"fold_right is not recursive. Because it cannot evaluate the nth element before evaluating the (n+1)th element. And the evaluation of nth element depends on (n+1)th element. This pattern violates the definition of tail-recursive","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"D0rdGbkuH4"}],"key":"nGo4uovYTP"}],"key":"AgtDfh8jDf"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"Then is there a tail-recursive version of fold_right? You can first reverse the list and then fold_left.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"NV5sjFUJ7F"}],"key":"OdtYHm4xNj"}],"key":"wbHb0LKwjt"}],"key":"elWNWLndJJ"},{"type":"heading","depth":3,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Fold Application","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"cPG3FVZuQS"}],"identifier":"fold-application","label":"Fold Application","html_id":"fold-application","implicit":true,"key":"Fo3Pam1QdF"},{"type":"code","lang":"ocaml","value":"let length l = List.fold_left (fun a _ -> a+1) 0 l\nlet rev l = List.fold_left (fun a x -> x::a) [] l\nlet map f l = List.fold_right (fun x a -> (f x)::a) l []\nlet filter f l = List.fold_right (fun x a -> if f x then x::a else a) l []\n\n(*test whether a list is full of true*)\nlet lst_and_fold =\n    List.fold_left (fun acc elt -> acc && elt) true","position":{"start":{"line":135,"column":1},"end":{"line":144,"column":1}},"key":"eWfm0okBpV"},{"type":"heading","depth":3,"position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"children":[{"type":"text","value":"Generalized Fold","position":{"start":{"line":146,"column":1},"end":{"line":146,"column":1}},"key":"VkcmnLo5fl"}],"identifier":"generalized-fold","label":"Generalized Fold","html_id":"generalized-fold","implicit":true,"key":"Qd5ylRxRd9"},{"type":"code","lang":"ocaml","value":"let rec foldtree init op = function\n  | Leaf -> init\n  | Node (v,l,r) -> op v (foldtree init op l) (foldtree init op r)\n  \nlet size t = foldtree 0 (fun _ l r -> 1 + l + r) t\nlet depth t = foldtree 0 (fun _ l r -> 1 + max l r) t\nlet preorder t = foldtree [] (fun x l r -> [x] @ l @ r) t","position":{"start":{"line":148,"column":1},"end":{"line":156,"column":1}},"key":"mE9eK8RT4H"}],"key":"N2Bg2qe2Gd"}],"key":"m5JoNbUeU4"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"C S3110"},"next":{"title":"Modules","url":"/2020-02-11-modules","group":"C S3110"}}},"domain":"http://localhost:3000"}