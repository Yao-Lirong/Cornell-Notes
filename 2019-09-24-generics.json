{"version":2,"kind":"Article","sha256":"3935658c5395af4549fc9fa0af4221afb98cde48a27734873716151e16e5af9d","slug":"2019-09-24-generics","location":"/CS2112/2019-09-24-Generics.md","dependencies":[],"frontmatter":{"title":"Generics","tags":["Cornell","19FA","CS2112"],"date":"2019-09-24","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2019-09-24-Generics.md","url":"/cornell-notes/build/2019-09-24-Generics-5764d735c1521395b12cbb91fb0147fd.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Wildcards","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"nGcB6nVNVG"}],"identifier":"wildcards","label":"Wildcards","html_id":"wildcards","implicit":true,"key":"ewN6CosEZP"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"To make up for the lack of variance, Java has a feature called ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Q6x3ntrxDC"},{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"wildcards","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"GSJjvvqXeI"}],"key":"phwLsZ9k8c"},{"type":"text","value":", in which question marks are used as type arguments. The type ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"EW41XzCpKj"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"FwPglXem0x"},{"type":"text","value":" represents an object that is an ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"QhVsUxwN2W"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"kiZlK5PbYV"},{"type":"text","value":" for ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Wc4ajzHjKQ"},{"type":"emphasis","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"some","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"qT8lfBN0VF"}],"key":"DhQkPTRwQN"},{"type":"text","value":" type T, though precisely ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"QMvH6QwO5O"},{"type":"emphasis","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"which","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"iuOwuPFOov"}],"key":"IeqiHsPb2o"},{"type":"text","value":" type T is not known at compile time (or for that matter, even at run time).","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"uMh8YA6GFh"}],"key":"g9VsygMiLp"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"A value of type ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"ns6lGng0hv"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"wvpf29fXZw"},{"type":"text","value":" (for any T) can be used as if it had type ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"VPIQoapIuh"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"Uwh0hUtDMR"},{"type":"text","value":", so there is a family of subtyping relationships ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"YTGc5jO8Yb"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"ckrxy4XMas"},{"type":"text","value":" <: ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"AEI61aJ5Iv"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"L5uOYybDK2"},{"type":"text","value":". This means that a method can provide a caller with a list of any type without the client knowing what is really stored in the list; the client can get elements from the list but cannot change the list:","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"Y8IlwylpuZ"}],"key":"nmmA0MMNoJ"},{"type":"code","lang":"java","value":"LList<?> f() {\n    LList<Integer> i = new LList();\n    i.add(2);\n    i.add(3);\n    i.add(5);\n    return i;\n}\n\n// in caller\nLList<?> lst = f();\nlst.add(7); // illegal: type ? not known\u0001\nfor (Object o : lst) {\n    println(o);\n}","position":{"start":{"line":18,"column":1},"end":{"line":33,"column":1}},"key":"Trh1casJVP"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Note that the type of the elements iterated over is not really known either, but at least we know that the type hidden by ? is a subtype of ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"KSvqUhg46f"},{"type":"inlineCode","value":"Object","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"Oxk1wW5TcK"},{"type":"text","value":". So it is type-safe to declare the variable ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"XdWZXI131f"},{"type":"inlineCode","value":"o","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"YAfqKMSP6b"},{"type":"text","value":" as an ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"unJqGaDDZd"},{"type":"inlineCode","value":"Object","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"k9vYqoYklk"},{"type":"text","value":".","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"xgNssG483T"}],"key":"mthy8fpt59"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"If we need to know more about the type hidden by the question mark, it is possible to add an ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"pNl4BcshGJ"},{"type":"inlineCode","value":"extends","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"oPf6NeKDAd"},{"type":"text","value":" clause. For example, suppose we have an interface ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"W0eMvPNxHb"},{"type":"inlineCode","value":"Animal","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"JzVz2pxgdc"},{"type":"text","value":" with two implementing classes ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"lQET26FDpb"},{"type":"inlineCode","value":"Elephant","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"zDaQJrLFoz"},{"type":"text","value":" and ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"VurrMiL4uO"},{"type":"inlineCode","value":"Rhino","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"iIUnwf5C01"},{"type":"text","value":". Then the type ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"HqVTnfVULy"},{"type":"inlineCode","value":"Collection<? extends Animal>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"I9ra6URMM9"},{"type":"text","value":" is a supertype of both ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"Nu8R6G6NYU"},{"type":"inlineCode","value":"Collection<Elephant>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"scRs4efUGv"},{"type":"text","value":" and ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"tTlhriawP7"},{"type":"inlineCode","value":"Collection<Rhino>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"JlS0GhxhhQ"},{"type":"text","value":", and we can iterate over the collection and extract ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"dLsutBeMFF"},{"type":"inlineCode","value":"Animal","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"sH98MFIEnP"},{"type":"text","value":"s rather than just ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"PHDwhCEGBT"},{"type":"inlineCode","value":"Object","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"WhUsJ1EUoO"},{"type":"text","value":"s.","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"z8K01MmSuF"}],"key":"eeFvUyufH4"},{"type":"code","lang":"java","value":"Collection<? extends Animal> c = new LList<Rhino>();\nfor (Animal a : c) { \n    // use a as Animal here\u0001\n}","position":{"start":{"line":39,"column":1},"end":{"line":44,"column":1}},"key":"iGw4mlvt93"}],"key":"S0b00XT7ao"}],"key":"j1K32EylEm"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"CS2024 C++ Programming","url":"/2020-09-07-cs2024-c-programming","group":"Incomplete CS Notes @ Cornell"},"next":{"title":"Value Representation, Hashing, and Generics","url":"/2019-09-30-value-representation-hashing-and-generi","group":"CS2112 Object-Oriented Design (Honors)"}}},"domain":"http://localhost:3000"}