{"version":2,"kind":"Article","sha256":"3935658c5395af4549fc9fa0af4221afb98cde48a27734873716151e16e5af9d","slug":"2019-09-24-generics","location":"/CS2112/2019-09-24-Generics.md","dependencies":[],"frontmatter":{"title":"Generics","tags":["Cornell","19FA","CS2112"],"date":"2019-09-24","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2019-09-24-Generics.md","url":"/cornell-notes/build/2019-09-24-Generics-42c8aaee63bd1f9f7c2edcf35b31b779.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Wildcards","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"tNAxGBc9lG"}],"identifier":"wildcards","label":"Wildcards","html_id":"wildcards","implicit":true,"key":"YVFlIxuxnb"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"To make up for the lack of variance, Java has a feature called ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"eFJ7izHnes"},{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"wildcards","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"WgAHENtMR6"}],"key":"w4Su8C3JqM"},{"type":"text","value":", in which question marks are used as type arguments. The type ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"XhsxbLaugm"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"LSSjvB0SDo"},{"type":"text","value":" represents an object that is an ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"mW1OFcuzKb"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Ajky7wRGhV"},{"type":"text","value":" for ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"jo8Ao0mQaK"},{"type":"emphasis","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"some","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"VQ4mK89hb6"}],"key":"kTdwZCLh4s"},{"type":"text","value":" type T, though precisely ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"cXKDwciI1o"},{"type":"emphasis","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"which","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"F4Luvbf3I5"}],"key":"jb9v3LVfQN"},{"type":"text","value":" type T is not known at compile time (or for that matter, even at run time).","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"c8INWpSL5M"}],"key":"SPKLYDOKV2"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"A value of type ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"RcKVq0FtGs"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"WFnVyG9AA4"},{"type":"text","value":" (for any T) can be used as if it had type ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"B9RP2m3I1m"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"u9sXXw8GJr"},{"type":"text","value":", so there is a family of subtyping relationships ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"X5nwrbaSRd"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"w3UlB3ayaA"},{"type":"text","value":" <: ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"mZDGYfdPv0"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"TJegXO8CRW"},{"type":"text","value":". This means that a method can provide a caller with a list of any type without the client knowing what is really stored in the list; the client can get elements from the list but cannot change the list:","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"bCXd3CxMTI"}],"key":"jL7ETLHbCc"},{"type":"code","lang":"java","value":"LList<?> f() {\n    LList<Integer> i = new LList();\n    i.add(2);\n    i.add(3);\n    i.add(5);\n    return i;\n}\n\n// in caller\nLList<?> lst = f();\nlst.add(7); // illegal: type ? not known\u0001\nfor (Object o : lst) {\n    println(o);\n}","position":{"start":{"line":18,"column":1},"end":{"line":33,"column":1}},"key":"AjmP1mgeG4"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Note that the type of the elements iterated over is not really known either, but at least we know that the type hidden by ? is a subtype of ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"Ecqv4BCcdx"},{"type":"inlineCode","value":"Object","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"YDYFpE2K7D"},{"type":"text","value":". So it is type-safe to declare the variable ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"kZYfx7iiC5"},{"type":"inlineCode","value":"o","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"hGREXJO9ks"},{"type":"text","value":" as an ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"bnLRy0tWW5"},{"type":"inlineCode","value":"Object","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"XpEGFbvbSn"},{"type":"text","value":".","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"pnS2s0KUi6"}],"key":"BiAfrB2Yc3"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"If we need to know more about the type hidden by the question mark, it is possible to add an ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"Gy5dC4ptAJ"},{"type":"inlineCode","value":"extends","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"BlA3aNl3LA"},{"type":"text","value":" clause. For example, suppose we have an interface ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"AHf6p26Nbo"},{"type":"inlineCode","value":"Animal","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"xvqNW7AVO9"},{"type":"text","value":" with two implementing classes ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"WrOQRiej0j"},{"type":"inlineCode","value":"Elephant","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"kfPjUC5kAL"},{"type":"text","value":" and ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"gNY2HkBKug"},{"type":"inlineCode","value":"Rhino","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"x5NdBPyUJG"},{"type":"text","value":". Then the type ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"sT0dxFTjPV"},{"type":"inlineCode","value":"Collection<? extends Animal>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"LMDTMqaKUr"},{"type":"text","value":" is a supertype of both ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"Eh6EbwMjcF"},{"type":"inlineCode","value":"Collection<Elephant>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"EAolzjZ972"},{"type":"text","value":" and ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"d1zRsDDPyN"},{"type":"inlineCode","value":"Collection<Rhino>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"FWtzv9azbX"},{"type":"text","value":", and we can iterate over the collection and extract ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"nXA2z8S7zc"},{"type":"inlineCode","value":"Animal","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"bXedhiDxFj"},{"type":"text","value":"s rather than just ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"UOjkWwtDw9"},{"type":"inlineCode","value":"Object","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"Y0mL24IjXO"},{"type":"text","value":"s.","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"wXkndKgmEE"}],"key":"UwnBlT5fpo"},{"type":"code","lang":"java","value":"Collection<? extends Animal> c = new LList<Rhino>();\nfor (Animal a : c) { \n    // use a as Animal here\u0001\n}","position":{"start":{"line":39,"column":1},"end":{"line":44,"column":1}},"key":"VEcvPzEWjL"}],"key":"XLPb2K4fit"}],"key":"XTmVcPweLk"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Algorithm Design 及 CS4820 一般性内容总结","url":"/cs4820","group":"CS2024 C++ Programming"},"next":{"title":"Value Representation, Hashing, and Generics","url":"/2019-09-30-value-representation-hashing-and-generi","group":"C S2112"}}},"domain":"http://localhost:3000"}