{"version":2,"kind":"Article","sha256":"3935658c5395af4549fc9fa0af4221afb98cde48a27734873716151e16e5af9d","slug":"2019-09-24-generics","location":"/CS2112/2019-09-24-Generics.md","dependencies":[],"frontmatter":{"title":"Generics","tags":["Cornell","19FA","CS2112"],"date":"2019-09-24","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2019-09-24-Generics.md","url":"/build/2019-09-24-Generics-42c8aaee63bd1f9f7c2edcf35b31b779.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Wildcards","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"pqV5DDO8u2"}],"identifier":"wildcards","label":"Wildcards","html_id":"wildcards","implicit":true,"key":"AmrillYYjB"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"To make up for the lack of variance, Java has a feature called ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"FHd8XCraEk"},{"type":"strong","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"wildcards","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"TIBniJKbEp"}],"key":"WAdkwMjt6x"},{"type":"text","value":", in which question marks are used as type arguments. The type ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"xEMdd9rzjk"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"Gu5i4VK514"},{"type":"text","value":" represents an object that is an ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"SokXVNFaAs"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"p9hxHkSEtS"},{"type":"text","value":" for ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"EGPuyqob9G"},{"type":"emphasis","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"some","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"jSf13TmS71"}],"key":"j8b9lXGBjw"},{"type":"text","value":" type T, though precisely ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"grM9vIVrGj"},{"type":"emphasis","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"which","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"RcOV7MPcdw"}],"key":"B7t1kkkFUD"},{"type":"text","value":" type T is not known at compile time (or for that matter, even at run time).","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"TX8oYhe1sp"}],"key":"A7KIFm4c9q"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"A value of type ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"snwtXuJGtP"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"EPCOFGSXeh"},{"type":"text","value":" (for any T) can be used as if it had type ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"OgL4r5Gqzq"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"GTGmWB7Ce1"},{"type":"text","value":", so there is a family of subtyping relationships ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"BLX5Cf7FYi"},{"type":"inlineCode","value":"LList<T>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"LKlhCjkylU"},{"type":"text","value":" <: ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"iw6dGXBZpH"},{"type":"inlineCode","value":"LList<?>","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"K2bv4MgxDR"},{"type":"text","value":". This means that a method can provide a caller with a list of any type without the client knowing what is really stored in the list; the client can get elements from the list but cannot change the list:","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"qinKYMqXn9"}],"key":"uk3PRqCX6T"},{"type":"code","lang":"java","value":"LList<?> f() {\n    LList<Integer> i = new LList();\n    i.add(2);\n    i.add(3);\n    i.add(5);\n    return i;\n}\n\n// in caller\nLList<?> lst = f();\nlst.add(7); // illegal: type ? not known\u0001\nfor (Object o : lst) {\n    println(o);\n}","position":{"start":{"line":18,"column":1},"end":{"line":33,"column":1}},"key":"FfVGjwoFEw"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Note that the type of the elements iterated over is not really known either, but at least we know that the type hidden by ? is a subtype of ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"Kf5JggeNr2"},{"type":"inlineCode","value":"Object","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"pRVIY4mzH7"},{"type":"text","value":". So it is type-safe to declare the variable ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"HRFB9Cv4Fa"},{"type":"inlineCode","value":"o","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"L1S5lJd2eM"},{"type":"text","value":" as an ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"h9W9qXKOSJ"},{"type":"inlineCode","value":"Object","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"wvezB1gA5m"},{"type":"text","value":".","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"GDgm0EOBbD"}],"key":"uC7fA25GzT"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"If we need to know more about the type hidden by the question mark, it is possible to add an ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"hnCW5WEKiZ"},{"type":"inlineCode","value":"extends","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"mpVfA4Dxrc"},{"type":"text","value":" clause. For example, suppose we have an interface ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"OIvuIZNOUZ"},{"type":"inlineCode","value":"Animal","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"r4CHFDGXCL"},{"type":"text","value":" with two implementing classes ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"KSABSCIGSx"},{"type":"inlineCode","value":"Elephant","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"dF0wIyE4nL"},{"type":"text","value":" and ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"G7eMib2cZj"},{"type":"inlineCode","value":"Rhino","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"RCF7O0mZhZ"},{"type":"text","value":". Then the type ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"brM7zpNIA7"},{"type":"inlineCode","value":"Collection<? extends Animal>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"aIBHhkF9cN"},{"type":"text","value":" is a supertype of both ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"cNfZp3ckB8"},{"type":"inlineCode","value":"Collection<Elephant>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"GwlRGgoYcs"},{"type":"text","value":" and ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"GCDbVVUAL7"},{"type":"inlineCode","value":"Collection<Rhino>","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"eWUjPA9nVi"},{"type":"text","value":", and we can iterate over the collection and extract ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"vzGCyNrc8N"},{"type":"inlineCode","value":"Animal","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"MINbcGbqWQ"},{"type":"text","value":"s rather than just ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"cVDmahws8C"},{"type":"inlineCode","value":"Object","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"ViCOZllfpX"},{"type":"text","value":"s.","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"KPqZxu41ge"}],"key":"mt7DHDWQ8c"},{"type":"code","lang":"java","value":"Collection<? extends Animal> c = new LList<Rhino>();\nfor (Animal a : c) { \n    // use a as Animal here\u0001\n}","position":{"start":{"line":39,"column":1},"end":{"line":44,"column":1}},"key":"sWXTj1dup1"}],"key":"m1acVmHpKW"}],"key":"UnIkW6LxhX"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Algorithm Design 及 CS4820 一般性内容总结","url":"/cs4820","group":"CS2024 C++ Programming"},"next":{"title":"Value Representation, Hashing, and Generics","url":"/2019-09-30-value-representation-hashing-and-generi","group":"C S2112"}}},"domain":"http://localhost:3000"}