{"version":2,"kind":"Article","sha256":"7b42bdb0a0043be670e2aa016b31620012a2c62e9205668f36c1abbd6f033c97","slug":"2019-10-24-design-pattern","location":"/CS2112/2019-10-24-Design-Pattern.md","dependencies":[],"frontmatter":{"title":"Design Pattern","tags":["Cornell","19FA","CS2112"],"date":"2019-10-24","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2019-10-24-Design-Pattern.md","url":"/cornell-notes/build/2019-10-24-Design-Pa-fb5b2e6bf82969eb10e95059da0d1f25.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"Say A is the producer, B is the consumer","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"V2t8xJaqgl"}],"key":"Q6lhtg9HMI"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Iterator Pattern","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"E3pTvBSL48"}],"identifier":"iterator-pattern","label":"Iterator Pattern","html_id":"iterator-pattern","implicit":true,"key":"SOKaZCl9ni"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Pull pattern: B pull values  from A","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"uKsY58nxVY"}],"key":"BN0JIHWJNK"},{"type":"code","lang":"java","value":"A implements Iterable<T>{\n    Iterable<T> iterator();\n}\n\nB uses Iterator methods{\n    boolean hasNext();\n    T next();\n}","position":{"start":{"line":18,"column":1},"end":{"line":27,"column":1}},"key":"LAQooZSFQ8"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":29,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":29,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"Using iterator is easy","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"HQDGYAz9gq"}],"key":"vgZ3CFOmMJ"}],"key":"qUbYbd3ZX6"},{"type":"listItem","spread":true,"position":{"start":{"line":31,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Implementing it is difficult","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"DWn0HerQvw"}],"key":"CiqlCloa40"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":33,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"iterator should remember its position (or you don’t really know whether it hasNext)","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"EkzvUCghtH"}],"key":"KmcKtgEqZV"}],"key":"zm2rnRu4eN"},{"type":"listItem","spread":true,"position":{"start":{"line":35,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"underlying data structure can’t be mutated(what if the Next is deleted?)","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"EO8MMnyjkQ"}],"key":"tWmekthXTu"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"need version number on every node of the data structure","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"sf3gvWcANf"}],"key":"OdX8dYTSiE"},{"type":"paragraph","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"If the version number is changed, it will throw ","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"cncV2ecGyy"},{"type":"inlineCode","value":"ConcurrentMod(ification)Exception","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"ZXmsdbzYTv"}],"key":"uMk7jQ87LF"}],"key":"EQ4VlhNtzb"}],"key":"FVzH2uz2a0"}],"key":"kuRX3RlIPK"}],"key":"sr1X1rKSFr"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"Used when you have different data type of sources to be pulled from, so you don’t want to pull directly the hashTable or arrayList they use to iterate those values. You want something more generic. Here comes the iterator. Java has its own iterator method. You can create iterator from ArrayList or hashTable.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"uxQtiTiU7y"}],"key":"YFt3KcDnr3"}],"key":"QbVk1kHOno"},{"type":"paragraph","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"​","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"RmfFthAIC7"}],"key":"XLSmBDbiHV"},{"type":"heading","depth":2,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"Observer Pattern","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"u7pJrjV6Yx"}],"identifier":"observer-pattern","label":"Observer Pattern","html_id":"observer-pattern","implicit":true,"key":"lc3QbJx6X9"},{"type":"paragraph","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"Push Pattern: A pushes values to B","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"ioCDjibcP2"}],"key":"rQK0Xdnn0l"},{"type":"code","lang":"java","value":"interface Observer<T>{\n\tvoid notify(T elem);\n}\n\ninterface Obeservable<T>{\n\tvoid register Observer(Observer<T> obs);\n}\n","position":{"start":{"line":49,"column":1},"end":{"line":58,"column":1}},"key":"io2YZbanIW"},{"type":"heading","depth":2,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"Streams","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"OsebuwgSGA"}],"identifier":"streams","label":"Streams","html_id":"streams","implicit":true,"key":"ZDvOkEWBf2"},{"type":"paragraph","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"“pull” with transformers","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"IEDQSusjbk"}],"key":"VbXhXq3p8l"},{"type":"code","lang":"java","value":"List<T> l;\nl.stream(); //read in a strem of T\nl.filter(predicate); //filter out all predicates in T\nl.map(function); //get a Stream<Integer> if function: Function<T,Integer>","position":{"start":{"line":68,"column":1},"end":{"line":73,"column":1}},"key":"td36NvRTlb"},{"type":"paragraph","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"children":[{"type":"text","value":"When you want to pull something","position":{"start":{"line":75,"column":1},"end":{"line":75,"column":1}},"key":"JCDRjtjeBR"}],"key":"oVfKDZAT3E"},{"type":"code","lang":"java","value":"findFirst returns Optimal<T>\n\n\nOptional<T> of(T)//converts T to Optional <T>\nOptional<T> ofNullible(T) // if T is empty, it returns an empty Optional<T>","position":{"start":{"line":77,"column":1},"end":{"line":83,"column":1}},"key":"onyDIz25EP"}],"key":"lsq0yvq9AH"}],"key":"ADTq670HPl"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Designing and documenting interfaces and implementations","url":"/2019-10-17-designing-and-documenting-interfaces-an","group":"CS2112 Object-Oriented Design (Honors)"},"next":{"title":"Building GUI","url":"/2019-10-29-event-handlers","group":"CS2112 Object-Oriented Design (Honors)"}}},"domain":"http://localhost:3000"}