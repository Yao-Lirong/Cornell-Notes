{"version":2,"kind":"Article","sha256":"751cad03b1f2ba9203591ced71905b11845af7c267985b39b7ef2c813b3f1e12","slug":"2020-01-30-standard-data-types","location":"/CS3110/2020-01-30-Standard-Data-Types.md","dependencies":[],"frontmatter":{"title":"Standard Data Types","tags":["Cornell","20SP","CS3110"],"date":"2020-01-30","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-30-Standard-Data-Types.md","url":"/cornell-notes/build/2020-01-30-Standard--195b9e893f976f31fc15131651773b02.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"QfCxoVuJ6V"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Standard Data Types","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"hYK8I17SfN"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","key":"Xw17hxSduw"}],"key":"CwDlNVVWzm"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"W3STKUcHTB"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Lists","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"kJI6DR2mgO"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","key":"GbhtFWCcYR"}],"identifier":"lists","label":"Lists","html_id":"lists","implicit":true,"key":"CFKz1QHOvO"},{"type":"heading","depth":3,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Building Lists","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"xtTAMhqIeF"}],"identifier":"building-lists","label":"Building Lists","html_id":"building-lists","implicit":true,"key":"P2oxNNV0GP"},{"type":"blockquote","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"The empty list is written ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"YmaqZuoSNB"},{"type":"inlineCode","value":"[]","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"pyUcPm4lqi"},{"type":"text","value":" and is pronounced “nil”, a name that comes from Lisp. Given a list ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Iq8XMAUGu5"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"NqfPulKcMF"},{"type":"text","value":" and element ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"eB8SmmbO2M"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"L49ci0wPXX"},{"type":"text","value":", we can prepend ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"xtSpHoZfN8"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"pSY0TZSJ7j"},{"type":"text","value":" to ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"OBzEDARmql"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"lLInD4EyTS"},{"type":"text","value":" by writing ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"diUGlO14k8"},{"type":"inlineCode","value":"elt::lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"hVWR6adVeo"},{"type":"text","value":". The double-colon operator is pronounced “cons”","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"ZI3LjrxsML"}],"key":"qjwp1xtcqm"}],"key":"Q5swBu4aKc"},{"type":"comment","value":"more","key":"Im0Uk3LYum"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"MuCGdGswfV"},{"type":"text","value":" always prepend things, so ","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"G77zoZKYry"},{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"bwQPs3lcJX"},{"type":"text","value":" is actually right-associative. The following code has the same effect.","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"Nfb5ugNAsm"}],"key":"hJC0kCYYQO"},{"type":"code","lang":"ocaml","value":"1::2::3::[];;\n1::(2::(3::[]));;","position":{"start":{"line":24,"column":1},"end":{"line":27,"column":1}},"key":"JdTE4cWHW4"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"All the elements of a list must have the same type. The word ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"jA11VxIvP7"},{"type":"inlineCode","value":"list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"Z2HQSAfsJp"},{"type":"text","value":" itself here is not a type. For example, given ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"iNYf76QigV"},{"type":"inlineCode","value":"int","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"bgsSOL1A05"},{"type":"text","value":", it produces the type ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"cxWAadcjv1"},{"type":"inlineCode","value":"int list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"DIrB6lvKlS"},{"type":"text","value":". You could think of type constructors as being like functions that operate on types, instead of functions that operate on values. (We mentioned this idea of thinking constructor as a function on type in CS2112)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"OUckY4JNtV"}],"key":"QaEiJF8p5c"},{"type":"heading","depth":3,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Accessing Lists","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"b82cG1AszO"}],"identifier":"accessing-lists","label":"Accessing Lists","html_id":"accessing-lists","implicit":true,"key":"Mc3XL8qp32"},{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"The following code computes the sum of a list.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"eOpXylCQBn"}],"key":"k8cfv2XQAT"},{"type":"code","lang":"ocaml","value":"let rec sum lst = \n  match lst with\n  | [] -> 0\n  | h::t -> h + sum t","position":{"start":{"line":35,"column":1},"end":{"line":40,"column":1}},"key":"ApvzeAyffV"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"The following code computes the length of a list. ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"SXFNFNSXs2"},{"type":"inlineCode","value":"_","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"tZHQBfyM6M"},{"type":"text","value":", the underscore character is used when we want to indicate the presence of some value in a pattern without actually giving it a name.","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"FhUUEGHmTB"}],"key":"AuTpDm2i4b"},{"type":"code","lang":"ocaml","value":"let rec length lst = \n  match lst with\n  | [] -> 0\n  | _::t -> 1 + length t\n  ","position":{"start":{"line":44,"column":1},"end":{"line":50,"column":1}},"key":"TkWPM3z5Yu"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"The following code appends one list onto the beginning of another list.","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"kRajVniHQk"}],"key":"BxMYj9nFOz"},{"type":"code","lang":"ocaml","value":"let rec append lst1 lst2 = \n  match lst1 with\n  | [] -> lst2\n  | h::t -> h::(append t lst2)","position":{"start":{"line":54,"column":1},"end":{"line":59,"column":1}},"key":"cqWovpcSV8"},{"type":"blockquote","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Note: every natural number is either 0 or is 1 greater than some other natural number n, and so a proof by induction has a base case for 0 and an inductive case for n+1. Likewise all our functions have a base case for the empty list and a recursive case for the list that has one more element than another list. This similarity is no accident. There is a deep relationship between induction and recursion; we’ll explore that relationship in more detail later in the course.","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"uG24gfAyBS"}],"key":"MCUghSB6Cn"}],"key":"Kcneazbej9"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Mutating Lists","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"LZdItjppHg"}],"identifier":"mutating-lists","label":"Mutating Lists","html_id":"mutating-lists","implicit":true,"key":"qxNcAZBfw8"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"Values in OCaml are immutable. The following code increments the head by 1.","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"YfEb3tpXxo"}],"key":"NujsJK1YVE"},{"type":"code","lang":"ocaml","value":"let inc_first lst =\n  match lst with\n  | [] -> []\n  | h::t -> (h+1)::t","position":{"start":{"line":67,"column":1},"end":{"line":72,"column":1}},"key":"o6NjUkSlQJ"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"This code looks extremely similar with C or Java operating on pointers. The implementation of list in OCaml works in the way that it shares the tail list ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"bq5YMEtVva"},{"type":"inlineCode","value":"t","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"ll7hW3A2Z8"},{"type":"text","value":" between the old list and the new list, such that the amount of memory in use does not increase (beyond the one extra piece of memory needed to store ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"lIcU0RpRWo"},{"type":"inlineCode","value":"h+1","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"ZMU5BBDAJu"},{"type":"text","value":"). The reason that it’s quite safe for the compiler to implement sharing is exactly that list elements are immutable.","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"MdsotkhcdZ"}],"key":"TRo4oWnnNw"},{"type":"heading","depth":3,"position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"Pattern Matching with Lists","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"VJJk34VBB0"}],"identifier":"pattern-matching-with-lists","label":"Pattern Matching with Lists","html_id":"pattern-matching-with-lists","implicit":true,"key":"fuhYwIPitd"},{"type":"heading","depth":4,"position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Basics","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"RHuNbARQ9w"}],"identifier":"basics","label":"Basics","html_id":"basics","implicit":true,"key":"jAP6kWAJEk"},{"type":"paragraph","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Each of the clauses ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"Gss8UHlwDC"},{"type":"inlineCode","value":"pi -> ei","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"Qcu4RauNyr"},{"type":"text","value":" is called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"xSPeFozdhO"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"branch","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"xrsbkyO2Ln"}],"key":"Lvnf0PMOi3"},{"type":"text","value":" or a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"CnUa54BMgP"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"case","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"dVLNsugf8C"}],"key":"JrxBnkvYjE"},{"type":"text","value":" of the pattern match. The ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"Go6RSBPh5C"},{"type":"inlineCode","value":"p","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"it53atNedB"},{"type":"text","value":"’s here are a new syntactic form called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"UZIGren8PF"},{"type":"strong","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"pattern","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"I8cDkqt9ti"}],"key":"Cp6hfvWZk7"},{"type":"text","value":".","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"SL7yOFf4cV"}],"key":"jrx1rz4CET"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":82,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"a variable name, e.g. ","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"v7KFRJ8UDc"},{"type":"inlineCode","value":"x","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"MSlN9kqIlL"}],"key":"fwHXVZIi2W"},{"type":"listItem","spread":true,"position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"the underscore character ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"JCfj6lxF0v"},{"type":"inlineCode","value":"_","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"Fyv4pvQIPv"},{"type":"text","value":", which is called the ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"Fp8znuX6vw"},{"type":"emphasis","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"wildcard","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"cNURMxAwGJ"}],"key":"ssbAho7cQW"},{"type":"text","value":" (we don’t care what it is)","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"ryQlnigtS9"}],"key":"vJ46frBThW"},{"type":"listItem","spread":true,"position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"the empty list ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"eNiEDHRlHa"},{"type":"inlineCode","value":"[]","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"LAK3JlFNKx"}],"key":"oR1DFyd83R"},{"type":"listItem","spread":true,"position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"children":[{"type":"inlineCode","value":"p1::p2","position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"key":"qYaedUylOe"}],"key":"n5QMOUtdis"},{"type":"listItem","spread":true,"position":{"start":{"line":86,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"inlineCode","value":"[p1; ...; pn]","position":{"start":{"line":86,"column":1},"end":{"line":86,"column":1}},"key":"VtDK5hy0JX"}],"key":"V866r89st6"}],"key":"wDDvy0b33w"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | n -> true\n  | _ -> false","position":{"start":{"line":88,"column":1},"end":{"line":93,"column":1}},"key":"HdaRiTdx6O"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"The code above always returns true, because suppose that the length of ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"wiqemzAW79"},{"type":"inlineCode","value":"lst","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"cqsjjVgKmZ"},{"type":"text","value":" is 5. Then the pattern match becomes: ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"hpa5uK67Gp"},{"type":"inlineCode","value":"match 5 with n -> true | _ -> false","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"vX8zVD8LNV"},{"type":"text","value":". And ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"yIoOUrxQCG"},{"type":"inlineCode","value":"n","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"KG3PV8xo5R"},{"type":"text","value":" matches 5. A variable pattern matches any value and here produces the binding ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"nlaYS5CTYo"},{"type":"inlineCode","value":"n->5","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"uPhuYmRPCq"},{"type":"text","value":". The correct codes are written below.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"hrksRYyHQ3"}],"key":"C0c1C5qewQ"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | m -> if m=n then true else false\n  | _ -> false\n  \nlet length_is lst n =\n  match length lst with\n  | m -> m=n\n  | _ -> false\n\nlet length_is lst n =\n  length lst = n","position":{"start":{"line":97,"column":1},"end":{"line":110,"column":1}},"key":"pN40teLZAH"},{"type":"paragraph","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"children":[{"type":"text","value":"However, this doesn’t mean patterns are not the variable values as in ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"qZ4dCIA4PC"},{"type":"inlineCode","value":"switch","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"fBOqYJd7sq"},{"type":"text","value":" statement. Yes they are general “patterns”. But you can match them to specific values. e.g.","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"FdnMDrQEIx"}],"key":"DMn8bpIH3V"},{"type":"code","lang":"ocaml","value":"match 5 with\n| 6 -> true\n| _ -> false;;\n- : bool = false\n\nmatch 5 with\n| 5 -> true\n| _ -> false;;\n- : bool = true","position":{"start":{"line":114,"column":1},"end":{"line":124,"column":1}},"key":"kJJocRFmVI"},{"type":"heading","depth":4,"position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"Advanced Pattern Matching","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"mXoCr1H4oy"}],"identifier":"advanced-pattern-matching","label":"Advanced Pattern Matching","html_id":"advanced-pattern-matching","implicit":true,"key":"vWb1tbBhYO"},{"type":"blockquote","position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"inlineCode","value":"p1 | ... | pn","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"l8xjw6uMVG"},{"type":"text","value":": an “or” pattern; matching against it succeeds if a match succeeds against any of the individual patterns ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"f1QX37n6nk"},{"type":"inlineCode","value":"pi","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"nNxDhliX1b"},{"type":"text","value":", which are tried in order from left to right. All the patterns must bind the same variables.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"Yv1KNWqqx7"}],"key":"aR0ZmAMokb"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"inlineCode","value":"(p : t)","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"tKHSGgPQBQ"},{"type":"text","value":": a pattern with an explicit type annotation.","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"P5hG35pAsS"}],"key":"krn98KgTsU"},{"type":"listItem","spread":true,"position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"gJRoP9pGca"},{"type":"text","value":": here, ","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"JZGuxhTmm4"},{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"BDAYG1oZos"},{"type":"text","value":" means any constant, such as integer literals, string literals, and booleans.","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"MyDzAheKfo"}],"key":"Z6X07zQnzo"},{"type":"listItem","spread":true,"position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"inlineCode","value":"'ch1'..'ch2'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"XeiO7bTBjM"},{"type":"text","value":": here, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"tqMnLTYrEz"},{"type":"inlineCode","value":"ch","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"KP3ypRnHEg"},{"type":"text","value":" means a character literal. For example, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"pKyYuILf4W"},{"type":"inlineCode","value":"'A'..'Z'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"j0mrki3AA5"},{"type":"text","value":" matches any uppercase letter.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"gJACvCPBcx"}],"key":"AicZBMfnJC"},{"type":"listItem","spread":true,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"inlineCode","value":"p when e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"Er6Itn1EXi"},{"type":"text","value":": matches ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"BCWGUBDsbI"},{"type":"inlineCode","value":"p","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"ue6irnJqmn"},{"type":"text","value":" but only if ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"M5gzHVcIpy"},{"type":"inlineCode","value":"e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"Xk0SdZiaqU"},{"type":"text","value":" evaluates to ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"AqSzojCOvu"},{"type":"inlineCode","value":"true","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"Ghns8QJaGS"},{"type":"text","value":".","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"ceVwWSwMfH"}],"key":"LocfviI50n"}],"key":"GqVi3R0dcY"}],"key":"fR59CqKi7s"},{"type":"heading","depth":2,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Tuples and Records","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"p493HAiGns"}],"identifier":"tuples-and-records","label":"Tuples and Records","html_id":"tuples-and-records","implicit":true,"key":"Pf0oB02kTJ"},{"type":"paragraph","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"both represent heterogeneous types of values, both sizes are fixed","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"key":"hu4qGWDQGo"}],"key":"pHXJeje7NV"},{"type":"heading","depth":3,"position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"text","value":"Records","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"key":"bgKCwEevt0"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","key":"oGpo5dXvZ1"}],"identifier":"records","label":"Records","html_id":"records","implicit":true,"key":"lcDQ1bADKt"},{"type":"paragraph","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"Works like ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"I8sOYcxj6z"},{"type":"inlineCode","value":"struct","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"JhTaBglKLQ"},{"type":"text","value":" in C++. Each field is identified by ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"wU8nqq5EOQ"},{"type":"strong","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"names","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"WIrIlvx9fN"}],"key":"DdlqncXY60"},{"type":"text","value":".","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"RPTiVWu4ce"}],"key":"x0X0xwYV2O"},{"type":"heading","depth":4,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"pbbpX6yv19"}],"identifier":"definition","label":"Definition","html_id":"definition","implicit":true,"key":"JGxLhpc2lI"},{"type":"code","lang":"ocaml","value":"type student ={name: string; gpa : float; year :int;} (*defining a type*)\nlet rbg = {name = \"R B\"; gpa = 4.0; year = 1954;} (*declare an instance of that type*)\nlet s = rbg.name (*accessing field in the record*)","position":{"start":{"line":144,"column":1},"end":{"line":148,"column":1}},"key":"QePMIvpal6"},{"type":"heading","depth":4,"position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"children":[{"type":"text","value":"Patter Matching","position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"key":"W2fJM8GywP"}],"identifier":"patter-matching","label":"Patter Matching","html_id":"patter-matching","implicit":true,"key":"A1ST8ypQ7V"},{"type":"code","lang":"ocaml","value":"match rbg with \n| {name=n; gpa=g; year=y} -> y\n\n(*syntactic sugar of codes above*)\nmatch rgb with \n| {name;gpa;year} -> name","position":{"start":{"line":152,"column":1},"end":{"line":159,"column":1}},"key":"jH4yUw1clw"},{"type":"heading","depth":3,"position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"text","value":"Tuples","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"key":"De8tqhEVUC"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","key":"oSHXiqLl1e"}],"identifier":"tuples","label":"Tuples","html_id":"tuples","implicit":true,"key":"UkjgWrGeOq"},{"type":"paragraph","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"Tuples are identified by ","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"la5CjbMsAo"},{"type":"strong","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"position","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"aPqQtCcjr3"}],"key":"jWaYSeIotS"},{"type":"text","value":", instead of naming the components.","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"aZi5tmJeKG"}],"key":"c8TYwhAKLS"},{"type":"heading","depth":4,"position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"key":"bq7igEK47X"}],"identifier":"definition","label":"Definition","html_id":"definition-1","implicit":true,"key":"wW05Yox2e1"},{"type":"code","lang":"ocaml","value":"let t = (10,\"am\") (*t has type: int * string*) \ntype time = int * string \nlet t:time = (10,\"am\") (*t has type: time*) \nfst t;; snd t;; (*predefined functions to access the first and second element of a tuple*)","position":{"start":{"line":167,"column":1},"end":{"line":172,"column":1}},"key":"XcT6BhbjOF"},{"type":"heading","depth":4,"position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"children":[{"type":"text","value":"Pattern Matching","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"key":"ESrYZvU06I"}],"identifier":"pattern-matching","label":"Pattern Matching","html_id":"pattern-matching","implicit":true,"key":"oWwUSSMAZh"},{"type":"paragraph","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"children":[{"type":"text","value":"if we use a pattern in a ","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"pRYurzq1A4"},{"type":"inlineCode","value":"let","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"vGRfS0fqAf"},{"type":"text","value":" expression (or definition), we are really just doing pattern matching with a single clause.","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"Pv8tjG1gLm"}],"key":"FaPZZailCi"},{"type":"code","lang":"ocaml","value":"let tick t =\nlet (t,s) = t in (t+1,s) (*tick : int * 'a -> int * 'a = <fun>*)\n\nlet tick (t:time):time =\nlet (t,s) = t in (t+1,s) (*tick : time -> time = <fun>*)\n\nlet tick (t:time):time = \nmatch t with\n| (t,s) -> (t+1,s)","position":{"start":{"line":178,"column":1},"end":{"line":188,"column":1}},"key":"F3m1pSRSs0"},{"type":"heading","depth":3,"position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"text","value":"Pattern Matching in a Nutshell","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"key":"mFWWnu64Zj"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","key":"GZDeCj5QmE"}],"identifier":"pattern-matching-in-a-nutshell","label":"Pattern Matching in a Nutshell","html_id":"pattern-matching-in-a-nutshell","implicit":true,"key":"ncMU5tDXYp"},{"type":"code","lang":"ocaml","value":"(* Pokemon types *)\ntype ptype = \n  TNormal | TFire | TWater\n\n(* A record to represent Pokemon *)\ntype mon = {name: string; hp : int; ptype: ptype}\n\n(*********************************************\n * Several ways to get a Pokemon's hit points:\n *********************************************)\n\n(* OK *)\nlet get_hp m =\n  match m with\n  | {name=n; hp=h; ptype=t} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name=_; hp=h; ptype=_} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name; hp; ptype} -> hp\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {hp} -> hp\n\n(* best *)\nlet get_hp m = m.hp\n\n(**************************************************\n * Several ways to get the 3rd component of a tuple\n **************************************************)\n\n(* OK *)\nlet thrd t =\n  match t with\n  | (x,y,z) -> z\n\n(* good *)\nlet thrd t = \n  let (x,y,z) = t in z\n\n(* better *)\nlet thrd t =\n  let (_,_,z) = t in z\n\n(* best *)\nlet thrd (_,_,z) = z\n\n(*************************************\n * How to get the components of a pair\n *************************************)\n\nlet fst (x,_) = x\nlet snd (_,y) = y\n\n\n(************************\n * take tuple as a whole\n ************************)\nlet rep_ok ((n,lst) as v) =\n  if List.length lst = n then v\n  else failwith \"RI violated\"","position":{"start":{"line":192,"column":1},"end":{"line":261,"column":1}},"key":"qfebGecn3C"}],"key":"YYLmjqLcfo"}],"key":"pnGhptX4rV"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Functions","url":"/2020-01-28-functions","group":"C S3110"},"next":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"C S3110"}}},"domain":"http://localhost:3000"}