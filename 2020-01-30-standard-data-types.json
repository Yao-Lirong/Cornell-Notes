{"version":2,"kind":"Article","sha256":"751cad03b1f2ba9203591ced71905b11845af7c267985b39b7ef2c813b3f1e12","slug":"2020-01-30-standard-data-types","location":"/CS3110/2020-01-30-Standard-Data-Types.md","dependencies":[],"frontmatter":{"title":"Standard Data Types","tags":["Cornell","20SP","CS3110"],"date":"2020-01-30","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-30-Standard-Data-Types.md","url":"/cornell-notes/build/2020-01-30-Standard--d4c642a205bed373f13126e6cd52055c.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"tcP4FF99Wx"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Standard Data Types","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"K7oOc0mlre"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","key":"jJM0YADgeO"}],"key":"BoQdeQg404"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"GBzXuYcbtU"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Lists","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"rKSm4hryBw"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","key":"lbmLFe6WT2"}],"identifier":"lists","label":"Lists","html_id":"lists","implicit":true,"key":"UNaEzFhAPG"},{"type":"heading","depth":3,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Building Lists","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"EN2kDKgV8f"}],"identifier":"building-lists","label":"Building Lists","html_id":"building-lists","implicit":true,"key":"VQ97DfGEUn"},{"type":"blockquote","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"The empty list is written ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"u9Dmkl2Xgt"},{"type":"inlineCode","value":"[]","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"j059Lzx0RD"},{"type":"text","value":" and is pronounced “nil”, a name that comes from Lisp. Given a list ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"WKxQfVjtlE"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"yttwXkGK1F"},{"type":"text","value":" and element ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"fh0uo6XMQe"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"zw1T8VYQa9"},{"type":"text","value":", we can prepend ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"RwQFJcCmrS"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"kHF5zoMVc3"},{"type":"text","value":" to ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"WOH58BU1kR"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"nQae0nsS13"},{"type":"text","value":" by writing ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Sgwq5Bm2tb"},{"type":"inlineCode","value":"elt::lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"efUBoABjC9"},{"type":"text","value":". The double-colon operator is pronounced “cons”","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"IlvgxWCdpP"}],"key":"TzvLT263op"}],"key":"Ki3gBSvbAK"},{"type":"comment","value":"more","key":"nY7gg0xbtN"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"q3wKp41VxA"},{"type":"text","value":" always prepend things, so ","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"AS2usWxi71"},{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"Ih2itR8f3G"},{"type":"text","value":" is actually right-associative. The following code has the same effect.","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"RQ7NMr2GzZ"}],"key":"xVjM1lLiHc"},{"type":"code","lang":"ocaml","value":"1::2::3::[];;\n1::(2::(3::[]));;","position":{"start":{"line":24,"column":1},"end":{"line":27,"column":1}},"key":"FNUHnHPcot"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"All the elements of a list must have the same type. The word ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"SRldwwvjMx"},{"type":"inlineCode","value":"list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"nzusDi38wD"},{"type":"text","value":" itself here is not a type. For example, given ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"N5tcmkh9il"},{"type":"inlineCode","value":"int","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"kMPqfxM8zX"},{"type":"text","value":", it produces the type ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"OeGjAApOkg"},{"type":"inlineCode","value":"int list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"Ms7qYjLOUx"},{"type":"text","value":". You could think of type constructors as being like functions that operate on types, instead of functions that operate on values. (We mentioned this idea of thinking constructor as a function on type in CS2112)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"xDYZjx82sn"}],"key":"fL6QtPizRv"},{"type":"heading","depth":3,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Accessing Lists","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"kAmnqatW4J"}],"identifier":"accessing-lists","label":"Accessing Lists","html_id":"accessing-lists","implicit":true,"key":"bus1hmeeLQ"},{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"The following code computes the sum of a list.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"NoWFulsRUY"}],"key":"mzjVEcQUnK"},{"type":"code","lang":"ocaml","value":"let rec sum lst = \n  match lst with\n  | [] -> 0\n  | h::t -> h + sum t","position":{"start":{"line":35,"column":1},"end":{"line":40,"column":1}},"key":"LQXLx3ML91"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"The following code computes the length of a list. ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"NYBNg8vKrQ"},{"type":"inlineCode","value":"_","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"sQhbbMdh0z"},{"type":"text","value":", the underscore character is used when we want to indicate the presence of some value in a pattern without actually giving it a name.","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"oVJKvUgI3d"}],"key":"p9lL6yVBPM"},{"type":"code","lang":"ocaml","value":"let rec length lst = \n  match lst with\n  | [] -> 0\n  | _::t -> 1 + length t\n  ","position":{"start":{"line":44,"column":1},"end":{"line":50,"column":1}},"key":"vgW4e4ElBY"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"The following code appends one list onto the beginning of another list.","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"e3BSJTEY85"}],"key":"QEjgFdDfrT"},{"type":"code","lang":"ocaml","value":"let rec append lst1 lst2 = \n  match lst1 with\n  | [] -> lst2\n  | h::t -> h::(append t lst2)","position":{"start":{"line":54,"column":1},"end":{"line":59,"column":1}},"key":"HwHHYl0YUo"},{"type":"blockquote","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Note: every natural number is either 0 or is 1 greater than some other natural number n, and so a proof by induction has a base case for 0 and an inductive case for n+1. Likewise all our functions have a base case for the empty list and a recursive case for the list that has one more element than another list. This similarity is no accident. There is a deep relationship between induction and recursion; we’ll explore that relationship in more detail later in the course.","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"kRuJcpcoch"}],"key":"YJDSxzVYGv"}],"key":"Wl8Fudj6i7"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Mutating Lists","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"g20tW2T4c0"}],"identifier":"mutating-lists","label":"Mutating Lists","html_id":"mutating-lists","implicit":true,"key":"vWIXHGw2Rf"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"Values in OCaml are immutable. The following code increments the head by 1.","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"mzTEGgEBzQ"}],"key":"Cr5nOXVudy"},{"type":"code","lang":"ocaml","value":"let inc_first lst =\n  match lst with\n  | [] -> []\n  | h::t -> (h+1)::t","position":{"start":{"line":67,"column":1},"end":{"line":72,"column":1}},"key":"w7mnKxRlpP"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"This code looks extremely similar with C or Java operating on pointers. The implementation of list in OCaml works in the way that it shares the tail list ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"CegMxnUi5P"},{"type":"inlineCode","value":"t","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"Jpv4x6v7zw"},{"type":"text","value":" between the old list and the new list, such that the amount of memory in use does not increase (beyond the one extra piece of memory needed to store ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"WijGi5TvI5"},{"type":"inlineCode","value":"h+1","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"C2yV8jXvU0"},{"type":"text","value":"). The reason that it’s quite safe for the compiler to implement sharing is exactly that list elements are immutable.","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"ueXT4Au0ga"}],"key":"AyETZWvIhg"},{"type":"heading","depth":3,"position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"Pattern Matching with Lists","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"nW3J5jlyws"}],"identifier":"pattern-matching-with-lists","label":"Pattern Matching with Lists","html_id":"pattern-matching-with-lists","implicit":true,"key":"lpjxRTSm3S"},{"type":"heading","depth":4,"position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Basics","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"CI6PSUQdC0"}],"identifier":"basics","label":"Basics","html_id":"basics","implicit":true,"key":"bcPC08Ot1n"},{"type":"paragraph","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Each of the clauses ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"Ez6OY4Eidb"},{"type":"inlineCode","value":"pi -> ei","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"SlO2IrbdsQ"},{"type":"text","value":" is called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"K2fXWxwSnk"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"branch","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"OkE4VObkfd"}],"key":"WmgGzentLV"},{"type":"text","value":" or a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"tSHRX9nn1j"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"case","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"WnIAUSlhrl"}],"key":"REIlGKfyrD"},{"type":"text","value":" of the pattern match. The ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"Oc6WyTyk9w"},{"type":"inlineCode","value":"p","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"o7eVIdfN37"},{"type":"text","value":"’s here are a new syntactic form called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"UifyZN9NMu"},{"type":"strong","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"pattern","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"snx9ihZ7X4"}],"key":"dEpGk3MtLC"},{"type":"text","value":".","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"pJeKIowe82"}],"key":"h65W3LBXip"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":82,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"a variable name, e.g. ","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"osTM0Ln98i"},{"type":"inlineCode","value":"x","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"w5ZpZ5zKFj"}],"key":"ijnQ7lmx8x"},{"type":"listItem","spread":true,"position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"the underscore character ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"jgeTsUM6ny"},{"type":"inlineCode","value":"_","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"uSCTCe9zGl"},{"type":"text","value":", which is called the ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"jjvf19KGPP"},{"type":"emphasis","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"wildcard","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"DqvAfQOQZm"}],"key":"CrUUfCf60F"},{"type":"text","value":" (we don’t care what it is)","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"azri29YGLi"}],"key":"yMHajMSWI1"},{"type":"listItem","spread":true,"position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"the empty list ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"sIuWovy615"},{"type":"inlineCode","value":"[]","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ZPMvJpeE9t"}],"key":"N5J0kl93pr"},{"type":"listItem","spread":true,"position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"children":[{"type":"inlineCode","value":"p1::p2","position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"key":"QoiDoLvhev"}],"key":"w4XeKifWFp"},{"type":"listItem","spread":true,"position":{"start":{"line":86,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"inlineCode","value":"[p1; ...; pn]","position":{"start":{"line":86,"column":1},"end":{"line":86,"column":1}},"key":"SDGXPkxTSc"}],"key":"FRgKkNFeHV"}],"key":"j25JyR2zlC"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | n -> true\n  | _ -> false","position":{"start":{"line":88,"column":1},"end":{"line":93,"column":1}},"key":"aQgDpoWPMM"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"The code above always returns true, because suppose that the length of ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"AMXWzABKIy"},{"type":"inlineCode","value":"lst","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"ZoyWYQZ1G9"},{"type":"text","value":" is 5. Then the pattern match becomes: ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"CsUTV5ACq5"},{"type":"inlineCode","value":"match 5 with n -> true | _ -> false","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"nfwqVHE4kQ"},{"type":"text","value":". And ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"sGegPVitgl"},{"type":"inlineCode","value":"n","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"Bh2fxVjf0b"},{"type":"text","value":" matches 5. A variable pattern matches any value and here produces the binding ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"gac5ZXsEb4"},{"type":"inlineCode","value":"n->5","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"t4MLIK9JV1"},{"type":"text","value":". The correct codes are written below.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"SJLGVPmiZx"}],"key":"PsjrqWOlhE"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | m -> if m=n then true else false\n  | _ -> false\n  \nlet length_is lst n =\n  match length lst with\n  | m -> m=n\n  | _ -> false\n\nlet length_is lst n =\n  length lst = n","position":{"start":{"line":97,"column":1},"end":{"line":110,"column":1}},"key":"oU0qEKrS2a"},{"type":"paragraph","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"children":[{"type":"text","value":"However, this doesn’t mean patterns are not the variable values as in ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"cTAp2v47di"},{"type":"inlineCode","value":"switch","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"xJJ7j5dA2P"},{"type":"text","value":" statement. Yes they are general “patterns”. But you can match them to specific values. e.g.","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"Xhcv0bdbP7"}],"key":"Q9mopTJj8S"},{"type":"code","lang":"ocaml","value":"match 5 with\n| 6 -> true\n| _ -> false;;\n- : bool = false\n\nmatch 5 with\n| 5 -> true\n| _ -> false;;\n- : bool = true","position":{"start":{"line":114,"column":1},"end":{"line":124,"column":1}},"key":"umhqff49kg"},{"type":"heading","depth":4,"position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"Advanced Pattern Matching","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"Ooloa0nWrs"}],"identifier":"advanced-pattern-matching","label":"Advanced Pattern Matching","html_id":"advanced-pattern-matching","implicit":true,"key":"C5dfV8Onj1"},{"type":"blockquote","position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"inlineCode","value":"p1 | ... | pn","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"ybwRKce5bv"},{"type":"text","value":": an “or” pattern; matching against it succeeds if a match succeeds against any of the individual patterns ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"HnTH3nbLzy"},{"type":"inlineCode","value":"pi","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"gvvHSnvWNH"},{"type":"text","value":", which are tried in order from left to right. All the patterns must bind the same variables.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"Cek9uc6H9G"}],"key":"IMhGYO4xW0"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"inlineCode","value":"(p : t)","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"CMrIdqeqSh"},{"type":"text","value":": a pattern with an explicit type annotation.","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"TZmmPIg8V3"}],"key":"NMWWXfRCrC"},{"type":"listItem","spread":true,"position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"fUjmtkaaVL"},{"type":"text","value":": here, ","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"Az4sOrMEf0"},{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"xHpXoRDxyf"},{"type":"text","value":" means any constant, such as integer literals, string literals, and booleans.","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"nzCZ82D0Gt"}],"key":"uzDvsGrAfE"},{"type":"listItem","spread":true,"position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"inlineCode","value":"'ch1'..'ch2'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"iq0jqJLLUW"},{"type":"text","value":": here, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"KirW1FBrOf"},{"type":"inlineCode","value":"ch","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"ZCAikmptQi"},{"type":"text","value":" means a character literal. For example, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"cEMlCZOZuZ"},{"type":"inlineCode","value":"'A'..'Z'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"nI3Lh1l8Uf"},{"type":"text","value":" matches any uppercase letter.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"TgqHCqpxFt"}],"key":"DxHNp0D0Po"},{"type":"listItem","spread":true,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"inlineCode","value":"p when e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"h3nU155ehW"},{"type":"text","value":": matches ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"HbUxIW9CFS"},{"type":"inlineCode","value":"p","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"rVm2Vryy25"},{"type":"text","value":" but only if ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"C9GRMSegi0"},{"type":"inlineCode","value":"e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"NH742jHnOn"},{"type":"text","value":" evaluates to ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"tXxI8SEXVB"},{"type":"inlineCode","value":"true","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"p0h4yQQry5"},{"type":"text","value":".","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"jb1JRSBKTj"}],"key":"Uq1jKAG3xa"}],"key":"EzFUWq1560"}],"key":"sUHRX2cR75"},{"type":"heading","depth":2,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Tuples and Records","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"AiXJ1gFxYl"}],"identifier":"tuples-and-records","label":"Tuples and Records","html_id":"tuples-and-records","implicit":true,"key":"Vozzx4J3UE"},{"type":"paragraph","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"both represent heterogeneous types of values, both sizes are fixed","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"key":"fG5UYvKEJS"}],"key":"wQlaFwjJYu"},{"type":"heading","depth":3,"position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"text","value":"Records","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"key":"DNXWcIarBX"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","key":"uWtIkZQeaL"}],"identifier":"records","label":"Records","html_id":"records","implicit":true,"key":"YHrQ8LgIeO"},{"type":"paragraph","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"Works like ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"q0Cj1IHmfx"},{"type":"inlineCode","value":"struct","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"wmnbNXrSXz"},{"type":"text","value":" in C++. Each field is identified by ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"EoJ5hmpkTT"},{"type":"strong","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"names","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"Wa5MgzbhKH"}],"key":"qoF7iFPoyl"},{"type":"text","value":".","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"HedOfXLale"}],"key":"mhjpqbwbig"},{"type":"heading","depth":4,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"Ui4bTMmCqL"}],"identifier":"definition","label":"Definition","html_id":"definition","implicit":true,"key":"bavR67PQIs"},{"type":"code","lang":"ocaml","value":"type student ={name: string; gpa : float; year :int;} (*defining a type*)\nlet rbg = {name = \"R B\"; gpa = 4.0; year = 1954;} (*declare an instance of that type*)\nlet s = rbg.name (*accessing field in the record*)","position":{"start":{"line":144,"column":1},"end":{"line":148,"column":1}},"key":"MSDFPcwSdm"},{"type":"heading","depth":4,"position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"children":[{"type":"text","value":"Patter Matching","position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"key":"XupQ5P6Qae"}],"identifier":"patter-matching","label":"Patter Matching","html_id":"patter-matching","implicit":true,"key":"IbvnY2bee4"},{"type":"code","lang":"ocaml","value":"match rbg with \n| {name=n; gpa=g; year=y} -> y\n\n(*syntactic sugar of codes above*)\nmatch rgb with \n| {name;gpa;year} -> name","position":{"start":{"line":152,"column":1},"end":{"line":159,"column":1}},"key":"mxN2WYKa4A"},{"type":"heading","depth":3,"position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"text","value":"Tuples","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"key":"uSwZ3bfj08"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","key":"jvSP3upWIU"}],"identifier":"tuples","label":"Tuples","html_id":"tuples","implicit":true,"key":"uIhs2Gl3N9"},{"type":"paragraph","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"Tuples are identified by ","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"H3KBrxjGHW"},{"type":"strong","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"position","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"GSqXuPS5vc"}],"key":"ObT04eZU3o"},{"type":"text","value":", instead of naming the components.","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"F8qBsQOCwa"}],"key":"fEfgwx1UvE"},{"type":"heading","depth":4,"position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"key":"Z1uEAb9wqT"}],"identifier":"definition","label":"Definition","html_id":"definition-1","implicit":true,"key":"YlqMZcZjwM"},{"type":"code","lang":"ocaml","value":"let t = (10,\"am\") (*t has type: int * string*) \ntype time = int * string \nlet t:time = (10,\"am\") (*t has type: time*) \nfst t;; snd t;; (*predefined functions to access the first and second element of a tuple*)","position":{"start":{"line":167,"column":1},"end":{"line":172,"column":1}},"key":"XfzhNXmMnm"},{"type":"heading","depth":4,"position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"children":[{"type":"text","value":"Pattern Matching","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"key":"oHdXcqgG1b"}],"identifier":"pattern-matching","label":"Pattern Matching","html_id":"pattern-matching","implicit":true,"key":"nmnp8LLPUT"},{"type":"paragraph","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"children":[{"type":"text","value":"if we use a pattern in a ","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"s7bcihNvvG"},{"type":"inlineCode","value":"let","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"DbkO9xyg8r"},{"type":"text","value":" expression (or definition), we are really just doing pattern matching with a single clause.","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"ly9DBujk8a"}],"key":"MU2dAP9et2"},{"type":"code","lang":"ocaml","value":"let tick t =\nlet (t,s) = t in (t+1,s) (*tick : int * 'a -> int * 'a = <fun>*)\n\nlet tick (t:time):time =\nlet (t,s) = t in (t+1,s) (*tick : time -> time = <fun>*)\n\nlet tick (t:time):time = \nmatch t with\n| (t,s) -> (t+1,s)","position":{"start":{"line":178,"column":1},"end":{"line":188,"column":1}},"key":"hweE0Ly0D5"},{"type":"heading","depth":3,"position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"text","value":"Pattern Matching in a Nutshell","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"key":"gJVzwnqVkR"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","key":"cZQVe9bnAs"}],"identifier":"pattern-matching-in-a-nutshell","label":"Pattern Matching in a Nutshell","html_id":"pattern-matching-in-a-nutshell","implicit":true,"key":"bECCwuftn6"},{"type":"code","lang":"ocaml","value":"(* Pokemon types *)\ntype ptype = \n  TNormal | TFire | TWater\n\n(* A record to represent Pokemon *)\ntype mon = {name: string; hp : int; ptype: ptype}\n\n(*********************************************\n * Several ways to get a Pokemon's hit points:\n *********************************************)\n\n(* OK *)\nlet get_hp m =\n  match m with\n  | {name=n; hp=h; ptype=t} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name=_; hp=h; ptype=_} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name; hp; ptype} -> hp\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {hp} -> hp\n\n(* best *)\nlet get_hp m = m.hp\n\n(**************************************************\n * Several ways to get the 3rd component of a tuple\n **************************************************)\n\n(* OK *)\nlet thrd t =\n  match t with\n  | (x,y,z) -> z\n\n(* good *)\nlet thrd t = \n  let (x,y,z) = t in z\n\n(* better *)\nlet thrd t =\n  let (_,_,z) = t in z\n\n(* best *)\nlet thrd (_,_,z) = z\n\n(*************************************\n * How to get the components of a pair\n *************************************)\n\nlet fst (x,_) = x\nlet snd (_,y) = y\n\n\n(************************\n * take tuple as a whole\n ************************)\nlet rep_ok ((n,lst) as v) =\n  if List.length lst = n then v\n  else failwith \"RI violated\"","position":{"start":{"line":192,"column":1},"end":{"line":261,"column":1}},"key":"EDb7tRUZTG"}],"key":"z9JxtjVGSp"}],"key":"hWD7fngmQs"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Functions","url":"/2020-01-28-functions","group":"CS3110 Functional Programming"},"next":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}