{"version":2,"kind":"Article","sha256":"751cad03b1f2ba9203591ced71905b11845af7c267985b39b7ef2c813b3f1e12","slug":"2020-01-30-standard-data-types","location":"/CS3110/2020-01-30-Standard-Data-Types.md","dependencies":[],"frontmatter":{"title":"Standard Data Types","tags":["Cornell","20SP","CS3110"],"date":"2020-01-30","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-30-Standard-Data-Types.md","url":"/cornell-notes/build/2020-01-30-Standard--d4c642a205bed373f13126e6cd52055c.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"ZWAR9JJSJ0"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Standard Data Types","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"IQZQgQgSRj"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","key":"uE6NViuITt"}],"key":"wlNBNn6IQP"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"jnSZQ7RqYG"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Lists","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ZHwD7h9yV8"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","key":"E0i5LCy39z"}],"identifier":"lists","label":"Lists","html_id":"lists","implicit":true,"key":"MO6NcQ1jX3"},{"type":"heading","depth":3,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Building Lists","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"mq5jG97AMw"}],"identifier":"building-lists","label":"Building Lists","html_id":"building-lists","implicit":true,"key":"OvxzsbmPnM"},{"type":"blockquote","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"The empty list is written ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"hJu83bbdxa"},{"type":"inlineCode","value":"[]","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"aIXyzIMyna"},{"type":"text","value":" and is pronounced “nil”, a name that comes from Lisp. Given a list ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"SN0x9ORGyn"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"ukLtkKLRSe"},{"type":"text","value":" and element ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"N3pXra8dmK"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"DYPQsTuOI3"},{"type":"text","value":", we can prepend ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"zBQBfvnqQ0"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"zzsITOFp8c"},{"type":"text","value":" to ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"JLcG5PocE7"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"p6ubPrDAke"},{"type":"text","value":" by writing ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Mp3WB4M9Fq"},{"type":"inlineCode","value":"elt::lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"SEvs0Syaje"},{"type":"text","value":". The double-colon operator is pronounced “cons”","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"HTHzPdhW8r"}],"key":"WBnewN7YAw"}],"key":"Ni7tXwsfIC"},{"type":"comment","value":"more","key":"dlcfMZO0YV"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"ZsV203qm9d"},{"type":"text","value":" always prepend things, so ","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"hwj2on92xw"},{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"pIcCMKWc8Y"},{"type":"text","value":" is actually right-associative. The following code has the same effect.","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"rPqCZgKsFe"}],"key":"IgInT4LKkU"},{"type":"code","lang":"ocaml","value":"1::2::3::[];;\n1::(2::(3::[]));;","position":{"start":{"line":24,"column":1},"end":{"line":27,"column":1}},"key":"FaOdIieWtC"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"All the elements of a list must have the same type. The word ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"M6s0n5xTAy"},{"type":"inlineCode","value":"list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"Y1VqmempeL"},{"type":"text","value":" itself here is not a type. For example, given ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"fDBpS8uULv"},{"type":"inlineCode","value":"int","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"n7gsO1OD7T"},{"type":"text","value":", it produces the type ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"ydTBot0BNT"},{"type":"inlineCode","value":"int list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"heYCqBkFy2"},{"type":"text","value":". You could think of type constructors as being like functions that operate on types, instead of functions that operate on values. (We mentioned this idea of thinking constructor as a function on type in CS2112)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"gwSm93mZBi"}],"key":"K7g0qXJOJI"},{"type":"heading","depth":3,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Accessing Lists","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"X1AHuJViIH"}],"identifier":"accessing-lists","label":"Accessing Lists","html_id":"accessing-lists","implicit":true,"key":"atuHBy3TD0"},{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"The following code computes the sum of a list.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"S2XW2Mgw76"}],"key":"tx28iEflno"},{"type":"code","lang":"ocaml","value":"let rec sum lst = \n  match lst with\n  | [] -> 0\n  | h::t -> h + sum t","position":{"start":{"line":35,"column":1},"end":{"line":40,"column":1}},"key":"PgTbLX6iI7"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"The following code computes the length of a list. ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"uJ9QvrQoR8"},{"type":"inlineCode","value":"_","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"v1vLy2Vvhq"},{"type":"text","value":", the underscore character is used when we want to indicate the presence of some value in a pattern without actually giving it a name.","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"Gozk8pVb5Y"}],"key":"bWgBD7M94H"},{"type":"code","lang":"ocaml","value":"let rec length lst = \n  match lst with\n  | [] -> 0\n  | _::t -> 1 + length t\n  ","position":{"start":{"line":44,"column":1},"end":{"line":50,"column":1}},"key":"ePh6kzgadu"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"The following code appends one list onto the beginning of another list.","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"n6nD0bHqQ9"}],"key":"qLDbXHjb4x"},{"type":"code","lang":"ocaml","value":"let rec append lst1 lst2 = \n  match lst1 with\n  | [] -> lst2\n  | h::t -> h::(append t lst2)","position":{"start":{"line":54,"column":1},"end":{"line":59,"column":1}},"key":"txXgI76r2z"},{"type":"blockquote","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Note: every natural number is either 0 or is 1 greater than some other natural number n, and so a proof by induction has a base case for 0 and an inductive case for n+1. Likewise all our functions have a base case for the empty list and a recursive case for the list that has one more element than another list. This similarity is no accident. There is a deep relationship between induction and recursion; we’ll explore that relationship in more detail later in the course.","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"ZDFt2c0hA4"}],"key":"We7V0pEfHs"}],"key":"AgUfoo3aMb"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Mutating Lists","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"eZlNavN7go"}],"identifier":"mutating-lists","label":"Mutating Lists","html_id":"mutating-lists","implicit":true,"key":"J0XN0c4y5j"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"Values in OCaml are immutable. The following code increments the head by 1.","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"kqgDy30DDd"}],"key":"BuLrf1x5es"},{"type":"code","lang":"ocaml","value":"let inc_first lst =\n  match lst with\n  | [] -> []\n  | h::t -> (h+1)::t","position":{"start":{"line":67,"column":1},"end":{"line":72,"column":1}},"key":"QN9FcyV2bQ"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"This code looks extremely similar with C or Java operating on pointers. The implementation of list in OCaml works in the way that it shares the tail list ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"GNkHKuZdR8"},{"type":"inlineCode","value":"t","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"hhtyJtrnT3"},{"type":"text","value":" between the old list and the new list, such that the amount of memory in use does not increase (beyond the one extra piece of memory needed to store ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"b4VCIpYb2O"},{"type":"inlineCode","value":"h+1","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"lVM3pBS9Wg"},{"type":"text","value":"). The reason that it’s quite safe for the compiler to implement sharing is exactly that list elements are immutable.","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"rqdyfpQmya"}],"key":"t1uw1CRwez"},{"type":"heading","depth":3,"position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"Pattern Matching with Lists","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"InZgmPbm7x"}],"identifier":"pattern-matching-with-lists","label":"Pattern Matching with Lists","html_id":"pattern-matching-with-lists","implicit":true,"key":"BWQ89DaUyE"},{"type":"heading","depth":4,"position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Basics","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"QMGds4ub9O"}],"identifier":"basics","label":"Basics","html_id":"basics","implicit":true,"key":"NeVA9G2eNC"},{"type":"paragraph","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Each of the clauses ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"j9Wy281hAo"},{"type":"inlineCode","value":"pi -> ei","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"zjx5xWqzKe"},{"type":"text","value":" is called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"vnPku3Yahu"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"branch","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"c898xmcmfM"}],"key":"OmOXBNzjCA"},{"type":"text","value":" or a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"qSSjQBXbu7"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"case","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"ySmm2JKiio"}],"key":"CGDlGdrcsP"},{"type":"text","value":" of the pattern match. The ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"cmt4vF6NA4"},{"type":"inlineCode","value":"p","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"OS2NjU0ins"},{"type":"text","value":"’s here are a new syntactic form called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"OjQCL2r4Vt"},{"type":"strong","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"pattern","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"LE4vLwHPEj"}],"key":"rzYhTVWMIG"},{"type":"text","value":".","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"BsLtQcKUlj"}],"key":"fOinCpj9JP"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":82,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"a variable name, e.g. ","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"PMVl4WGy2C"},{"type":"inlineCode","value":"x","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"EsrtMTP0eL"}],"key":"FStqVyEDHG"},{"type":"listItem","spread":true,"position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"the underscore character ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"U7iYdNZFfh"},{"type":"inlineCode","value":"_","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"X7q3jFNW35"},{"type":"text","value":", which is called the ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"CqCQplspzw"},{"type":"emphasis","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"wildcard","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"iJtqLv51IM"}],"key":"W7lFcoBpGe"},{"type":"text","value":" (we don’t care what it is)","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"fBWvcaSlYj"}],"key":"xWnIxmhrwx"},{"type":"listItem","spread":true,"position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"the empty list ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"wLS6u5s4vO"},{"type":"inlineCode","value":"[]","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"EnkgnYzePF"}],"key":"zfThjsBxja"},{"type":"listItem","spread":true,"position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"children":[{"type":"inlineCode","value":"p1::p2","position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"key":"aY26glnKU6"}],"key":"PtCJrqGr9x"},{"type":"listItem","spread":true,"position":{"start":{"line":86,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"inlineCode","value":"[p1; ...; pn]","position":{"start":{"line":86,"column":1},"end":{"line":86,"column":1}},"key":"Tov24JWTqn"}],"key":"ZE9D7rYswP"}],"key":"igrEcHKqxD"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | n -> true\n  | _ -> false","position":{"start":{"line":88,"column":1},"end":{"line":93,"column":1}},"key":"LWhpAfdA7I"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"The code above always returns true, because suppose that the length of ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"l5UWD2L6iE"},{"type":"inlineCode","value":"lst","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"Htg1ludjZT"},{"type":"text","value":" is 5. Then the pattern match becomes: ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"QnPdXleq5h"},{"type":"inlineCode","value":"match 5 with n -> true | _ -> false","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"xWyzMt4osH"},{"type":"text","value":". And ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"xLXxOVRcup"},{"type":"inlineCode","value":"n","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"MUS9irEy1B"},{"type":"text","value":" matches 5. A variable pattern matches any value and here produces the binding ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"oad57ThuCU"},{"type":"inlineCode","value":"n->5","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"fmhso0cp4m"},{"type":"text","value":". The correct codes are written below.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"ZZ5LANNt6h"}],"key":"rftY6Xbk34"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | m -> if m=n then true else false\n  | _ -> false\n  \nlet length_is lst n =\n  match length lst with\n  | m -> m=n\n  | _ -> false\n\nlet length_is lst n =\n  length lst = n","position":{"start":{"line":97,"column":1},"end":{"line":110,"column":1}},"key":"hB34eeHJpk"},{"type":"paragraph","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"children":[{"type":"text","value":"However, this doesn’t mean patterns are not the variable values as in ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"ykcS416kC4"},{"type":"inlineCode","value":"switch","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"aJsH1r4cuz"},{"type":"text","value":" statement. Yes they are general “patterns”. But you can match them to specific values. e.g.","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"VIaYxQt5ym"}],"key":"aaMLwYe7iQ"},{"type":"code","lang":"ocaml","value":"match 5 with\n| 6 -> true\n| _ -> false;;\n- : bool = false\n\nmatch 5 with\n| 5 -> true\n| _ -> false;;\n- : bool = true","position":{"start":{"line":114,"column":1},"end":{"line":124,"column":1}},"key":"KiwqoOMaSR"},{"type":"heading","depth":4,"position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"Advanced Pattern Matching","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"HjqY6SuN73"}],"identifier":"advanced-pattern-matching","label":"Advanced Pattern Matching","html_id":"advanced-pattern-matching","implicit":true,"key":"giHptQa6cJ"},{"type":"blockquote","position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"inlineCode","value":"p1 | ... | pn","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"Gg9di9t5PD"},{"type":"text","value":": an “or” pattern; matching against it succeeds if a match succeeds against any of the individual patterns ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"pcDMBwOB0l"},{"type":"inlineCode","value":"pi","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"cH7cciay0C"},{"type":"text","value":", which are tried in order from left to right. All the patterns must bind the same variables.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"YzOlNkxARD"}],"key":"jbKCSN3TXE"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"inlineCode","value":"(p : t)","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"kMMEah2BT5"},{"type":"text","value":": a pattern with an explicit type annotation.","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"exSk5dsHPO"}],"key":"IcTUVvlo56"},{"type":"listItem","spread":true,"position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"CFdHtOJwsB"},{"type":"text","value":": here, ","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"JaMkBNLwlV"},{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"LlMjGN2gAN"},{"type":"text","value":" means any constant, such as integer literals, string literals, and booleans.","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"tGmzlcAJag"}],"key":"TjJ3MiYzTB"},{"type":"listItem","spread":true,"position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"inlineCode","value":"'ch1'..'ch2'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"pCnSwFdsiV"},{"type":"text","value":": here, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"aw5QXgZ76y"},{"type":"inlineCode","value":"ch","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"stJtmqtof4"},{"type":"text","value":" means a character literal. For example, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"wWMgv4HgCA"},{"type":"inlineCode","value":"'A'..'Z'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"HJ27HVaWHn"},{"type":"text","value":" matches any uppercase letter.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"f03apv9Dvd"}],"key":"WfrCSdljdD"},{"type":"listItem","spread":true,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"inlineCode","value":"p when e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"xTME6lZlOE"},{"type":"text","value":": matches ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"wHJWClGk9l"},{"type":"inlineCode","value":"p","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"O4Qn142ZSi"},{"type":"text","value":" but only if ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"V3WxegeVX6"},{"type":"inlineCode","value":"e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"MlAUgfBnMx"},{"type":"text","value":" evaluates to ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"IfILLscWZ7"},{"type":"inlineCode","value":"true","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"aUiGnnrqTC"},{"type":"text","value":".","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"jbhQs2nx5o"}],"key":"Q1RY7MrNec"}],"key":"HU71IdV2Xd"}],"key":"cIJlcyXWBU"},{"type":"heading","depth":2,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Tuples and Records","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"KkE8w3ZemX"}],"identifier":"tuples-and-records","label":"Tuples and Records","html_id":"tuples-and-records","implicit":true,"key":"m6FC7bASXU"},{"type":"paragraph","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"both represent heterogeneous types of values, both sizes are fixed","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"key":"nzUt21eyNL"}],"key":"TGVYnMSZgc"},{"type":"heading","depth":3,"position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"text","value":"Records","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"key":"saAXBnLI8N"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","key":"iQWxXxrZaU"}],"identifier":"records","label":"Records","html_id":"records","implicit":true,"key":"BhqpK8fkZG"},{"type":"paragraph","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"Works like ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"V4CwukZMrr"},{"type":"inlineCode","value":"struct","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"WnDLwC87ko"},{"type":"text","value":" in C++. Each field is identified by ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"xfCuWwpEBC"},{"type":"strong","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"names","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"jSddOHtPHI"}],"key":"LqR8V0apTt"},{"type":"text","value":".","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"HlUhd75zRg"}],"key":"V9PkWT91vZ"},{"type":"heading","depth":4,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"FkK8WcJRbw"}],"identifier":"definition","label":"Definition","html_id":"definition","implicit":true,"key":"kmOJ48w7jX"},{"type":"code","lang":"ocaml","value":"type student ={name: string; gpa : float; year :int;} (*defining a type*)\nlet rbg = {name = \"R B\"; gpa = 4.0; year = 1954;} (*declare an instance of that type*)\nlet s = rbg.name (*accessing field in the record*)","position":{"start":{"line":144,"column":1},"end":{"line":148,"column":1}},"key":"QyFNplTR7n"},{"type":"heading","depth":4,"position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"children":[{"type":"text","value":"Patter Matching","position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"key":"iBL9Ywtt9Y"}],"identifier":"patter-matching","label":"Patter Matching","html_id":"patter-matching","implicit":true,"key":"nMujpuNBTD"},{"type":"code","lang":"ocaml","value":"match rbg with \n| {name=n; gpa=g; year=y} -> y\n\n(*syntactic sugar of codes above*)\nmatch rgb with \n| {name;gpa;year} -> name","position":{"start":{"line":152,"column":1},"end":{"line":159,"column":1}},"key":"pauP1gmLW8"},{"type":"heading","depth":3,"position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"text","value":"Tuples","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"key":"oJwVPUGYpd"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","key":"WGhV7tjCcb"}],"identifier":"tuples","label":"Tuples","html_id":"tuples","implicit":true,"key":"aLW4PFZHoE"},{"type":"paragraph","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"Tuples are identified by ","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"A9lxMpnbLr"},{"type":"strong","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"position","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"e29eDXbdpB"}],"key":"rqQDAhNu4y"},{"type":"text","value":", instead of naming the components.","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"LRgxbzy7KR"}],"key":"pNTFR85WdF"},{"type":"heading","depth":4,"position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"key":"O6Or7Lke95"}],"identifier":"definition","label":"Definition","html_id":"definition-1","implicit":true,"key":"xglNbjBzKH"},{"type":"code","lang":"ocaml","value":"let t = (10,\"am\") (*t has type: int * string*) \ntype time = int * string \nlet t:time = (10,\"am\") (*t has type: time*) \nfst t;; snd t;; (*predefined functions to access the first and second element of a tuple*)","position":{"start":{"line":167,"column":1},"end":{"line":172,"column":1}},"key":"MVNTNSxjsI"},{"type":"heading","depth":4,"position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"children":[{"type":"text","value":"Pattern Matching","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"key":"L3Ooi0Y9YQ"}],"identifier":"pattern-matching","label":"Pattern Matching","html_id":"pattern-matching","implicit":true,"key":"kelawMfrID"},{"type":"paragraph","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"children":[{"type":"text","value":"if we use a pattern in a ","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"Qo9YikuIoI"},{"type":"inlineCode","value":"let","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"Jc8z3nrl0f"},{"type":"text","value":" expression (or definition), we are really just doing pattern matching with a single clause.","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"GN2xuJRIR0"}],"key":"kLchkQ9nOA"},{"type":"code","lang":"ocaml","value":"let tick t =\nlet (t,s) = t in (t+1,s) (*tick : int * 'a -> int * 'a = <fun>*)\n\nlet tick (t:time):time =\nlet (t,s) = t in (t+1,s) (*tick : time -> time = <fun>*)\n\nlet tick (t:time):time = \nmatch t with\n| (t,s) -> (t+1,s)","position":{"start":{"line":178,"column":1},"end":{"line":188,"column":1}},"key":"cCvObekynf"},{"type":"heading","depth":3,"position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"text","value":"Pattern Matching in a Nutshell","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"key":"idke1DCRp9"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","key":"BZLUvELE1h"}],"identifier":"pattern-matching-in-a-nutshell","label":"Pattern Matching in a Nutshell","html_id":"pattern-matching-in-a-nutshell","implicit":true,"key":"ejRZgcJMsp"},{"type":"code","lang":"ocaml","value":"(* Pokemon types *)\ntype ptype = \n  TNormal | TFire | TWater\n\n(* A record to represent Pokemon *)\ntype mon = {name: string; hp : int; ptype: ptype}\n\n(*********************************************\n * Several ways to get a Pokemon's hit points:\n *********************************************)\n\n(* OK *)\nlet get_hp m =\n  match m with\n  | {name=n; hp=h; ptype=t} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name=_; hp=h; ptype=_} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name; hp; ptype} -> hp\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {hp} -> hp\n\n(* best *)\nlet get_hp m = m.hp\n\n(**************************************************\n * Several ways to get the 3rd component of a tuple\n **************************************************)\n\n(* OK *)\nlet thrd t =\n  match t with\n  | (x,y,z) -> z\n\n(* good *)\nlet thrd t = \n  let (x,y,z) = t in z\n\n(* better *)\nlet thrd t =\n  let (_,_,z) = t in z\n\n(* best *)\nlet thrd (_,_,z) = z\n\n(*************************************\n * How to get the components of a pair\n *************************************)\n\nlet fst (x,_) = x\nlet snd (_,y) = y\n\n\n(************************\n * take tuple as a whole\n ************************)\nlet rep_ok ((n,lst) as v) =\n  if List.length lst = n then v\n  else failwith \"RI violated\"","position":{"start":{"line":192,"column":1},"end":{"line":261,"column":1}},"key":"j2nvViCWPf"}],"key":"Bu3YHwK5il"}],"key":"liiXLTOmpY"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Functions","url":"/2020-01-28-functions","group":"CS3110 Functional Programming"},"next":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}