{"version":2,"kind":"Article","sha256":"751cad03b1f2ba9203591ced71905b11845af7c267985b39b7ef2c813b3f1e12","slug":"2020-01-30-standard-data-types","location":"/CS3110/2020-01-30-Standard-Data-Types.md","dependencies":[],"frontmatter":{"title":"Standard Data Types","tags":["Cornell","20SP","CS3110"],"date":"2020-01-30","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-30-Standard-Data-Types.md","url":"/build/2020-01-30-Standard--195b9e893f976f31fc15131651773b02.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"FoLulkxIov"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Standard Data Types","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"c46rrwJvZI"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/standard.html","key":"j6GQMq4FLw"}],"key":"HZNcHlBQ7N"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"I1QcLPlHxP"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Lists","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"V2e8Unuk7l"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/lists.html","key":"ZltiKas7S7"}],"identifier":"lists","label":"Lists","html_id":"lists","implicit":true,"key":"hkRm7e5rQE"},{"type":"heading","depth":3,"position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Building Lists","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"aWBs65E9vY"}],"identifier":"building-lists","label":"Building Lists","html_id":"building-lists","implicit":true,"key":"lZgHZ48eSk"},{"type":"blockquote","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"The empty list is written ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"GEBBD0vg9A"},{"type":"inlineCode","value":"[]","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"zMiP29jIAC"},{"type":"text","value":" and is pronounced “nil”, a name that comes from Lisp. Given a list ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"aZ68p8hyVH"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"DvxyYkU77q"},{"type":"text","value":" and element ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"lsELwt8Gtq"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"NnwHkiGYUs"},{"type":"text","value":", we can prepend ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"k6BqPEsG1T"},{"type":"inlineCode","value":"elt","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"C9yhG4hkDI"},{"type":"text","value":" to ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"ecLnzXhpnq"},{"type":"inlineCode","value":"lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"ObbgHsu10i"},{"type":"text","value":" by writing ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"RFINkw2AFw"},{"type":"inlineCode","value":"elt::lst","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"faC2RVepd4"},{"type":"text","value":". The double-colon operator is pronounced “cons”","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"XEuxWI4nXf"}],"key":"svS2TzxtlR"}],"key":"zRe9PDcGb5"},{"type":"comment","value":"more","key":"Za6nc80fBE"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"fJPqg62sFq"},{"type":"text","value":" always prepend things, so ","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"Or52Kof3tm"},{"type":"inlineCode","value":"cons","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"MrxwlQOXwZ"},{"type":"text","value":" is actually right-associative. The following code has the same effect.","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"cZ8JhKaCJp"}],"key":"u5fsjVNJbM"},{"type":"code","lang":"ocaml","value":"1::2::3::[];;\n1::(2::(3::[]));;","position":{"start":{"line":24,"column":1},"end":{"line":27,"column":1}},"key":"WORy5YxX3s"},{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"All the elements of a list must have the same type. The word ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"tjjgMfEEC3"},{"type":"inlineCode","value":"list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"QNbu9UNwk3"},{"type":"text","value":" itself here is not a type. For example, given ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"qk0NTl3Af1"},{"type":"inlineCode","value":"int","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"BuV0qH4Nfh"},{"type":"text","value":", it produces the type ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"REtoWbY8J9"},{"type":"inlineCode","value":"int list","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"cBKZsuPSpF"},{"type":"text","value":". You could think of type constructors as being like functions that operate on types, instead of functions that operate on values. (We mentioned this idea of thinking constructor as a function on type in CS2112)","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"W2rDkn8348"}],"key":"xehDD9cmFP"},{"type":"heading","depth":3,"position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"Accessing Lists","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"XTAx46IaPZ"}],"identifier":"accessing-lists","label":"Accessing Lists","html_id":"accessing-lists","implicit":true,"key":"wrd7pqllQu"},{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"The following code computes the sum of a list.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Ml0v7kiNJf"}],"key":"OrZV4hWGwE"},{"type":"code","lang":"ocaml","value":"let rec sum lst = \n  match lst with\n  | [] -> 0\n  | h::t -> h + sum t","position":{"start":{"line":35,"column":1},"end":{"line":40,"column":1}},"key":"zASUvdEMR6"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"The following code computes the length of a list. ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"q6jGgZslEW"},{"type":"inlineCode","value":"_","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"YKz8K0idlq"},{"type":"text","value":", the underscore character is used when we want to indicate the presence of some value in a pattern without actually giving it a name.","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"TCHe3qVG5l"}],"key":"p2Js2mYZjC"},{"type":"code","lang":"ocaml","value":"let rec length lst = \n  match lst with\n  | [] -> 0\n  | _::t -> 1 + length t\n  ","position":{"start":{"line":44,"column":1},"end":{"line":50,"column":1}},"key":"jtVouVYbtw"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"The following code appends one list onto the beginning of another list.","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"OQbffSl3i6"}],"key":"p5jhGv6gPM"},{"type":"code","lang":"ocaml","value":"let rec append lst1 lst2 = \n  match lst1 with\n  | [] -> lst2\n  | h::t -> h::(append t lst2)","position":{"start":{"line":54,"column":1},"end":{"line":59,"column":1}},"key":"Thl2NziMGL"},{"type":"blockquote","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Note: every natural number is either 0 or is 1 greater than some other natural number n, and so a proof by induction has a base case for 0 and an inductive case for n+1. Likewise all our functions have a base case for the empty list and a recursive case for the list that has one more element than another list. This similarity is no accident. There is a deep relationship between induction and recursion; we’ll explore that relationship in more detail later in the course.","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"aeo6odywmF"}],"key":"k7TCDF8x69"}],"key":"gfoaJfIZA1"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Mutating Lists","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"l4qjmws7Or"}],"identifier":"mutating-lists","label":"Mutating Lists","html_id":"mutating-lists","implicit":true,"key":"ol2PArAaSA"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"Values in OCaml are immutable. The following code increments the head by 1.","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"XgtRNOLscx"}],"key":"f2SDDxBNvL"},{"type":"code","lang":"ocaml","value":"let inc_first lst =\n  match lst with\n  | [] -> []\n  | h::t -> (h+1)::t","position":{"start":{"line":67,"column":1},"end":{"line":72,"column":1}},"key":"AYSvjDztZG"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"This code looks extremely similar with C or Java operating on pointers. The implementation of list in OCaml works in the way that it shares the tail list ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"xbLKWtwXwY"},{"type":"inlineCode","value":"t","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"tXZWBy3Jfv"},{"type":"text","value":" between the old list and the new list, such that the amount of memory in use does not increase (beyond the one extra piece of memory needed to store ","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"QjHgP1sELq"},{"type":"inlineCode","value":"h+1","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"YfqSxQKUZl"},{"type":"text","value":"). The reason that it’s quite safe for the compiler to implement sharing is exactly that list elements are immutable.","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"SPMEdY3Fp4"}],"key":"e8VllCa81P"},{"type":"heading","depth":3,"position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"children":[{"type":"text","value":"Pattern Matching with Lists","position":{"start":{"line":76,"column":1},"end":{"line":76,"column":1}},"key":"poKqLwRtU0"}],"identifier":"pattern-matching-with-lists","label":"Pattern Matching with Lists","html_id":"pattern-matching-with-lists","implicit":true,"key":"B7h1NcDW6O"},{"type":"heading","depth":4,"position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"children":[{"type":"text","value":"Basics","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"PXRQyo3Gqi"}],"identifier":"basics","label":"Basics","html_id":"basics","implicit":true,"key":"lRFpfVF4yV"},{"type":"paragraph","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Each of the clauses ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"C6ovVc6wY2"},{"type":"inlineCode","value":"pi -> ei","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"xyQdr1Fsga"},{"type":"text","value":" is called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"YyAVJiDlCA"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"branch","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"XVR5BCfj1v"}],"key":"bTxZwpcLwz"},{"type":"text","value":" or a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"N54TDt3qTY"},{"type":"emphasis","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"case","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"yK1VPlyIUz"}],"key":"EQ62vyG7vO"},{"type":"text","value":" of the pattern match. The ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"SlBiNHsqh8"},{"type":"inlineCode","value":"p","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"aqsFCdHVAc"},{"type":"text","value":"’s here are a new syntactic form called a ","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"QrdAI6b5DA"},{"type":"strong","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"pattern","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"Yx7kMSaeFn"}],"key":"Q5K1s9i3bi"},{"type":"text","value":".","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"MxFEsAcCSe"}],"key":"b8zSRj6HAQ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":82,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"a variable name, e.g. ","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"k1qCGh462m"},{"type":"inlineCode","value":"x","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"dreFkTRsP0"}],"key":"Jesw3mFlV9"},{"type":"listItem","spread":true,"position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"the underscore character ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"zixn2FLISJ"},{"type":"inlineCode","value":"_","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"xtetoCH5Ae"},{"type":"text","value":", which is called the ","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"BcFANdicMN"},{"type":"emphasis","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"wildcard","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"hqkEOGHwRv"}],"key":"Sih3tM31IC"},{"type":"text","value":" (we don’t care what it is)","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"YLXJuJfEmT"}],"key":"KTjBdRmvLX"},{"type":"listItem","spread":true,"position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"the empty list ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"nbZjDZ5nLX"},{"type":"inlineCode","value":"[]","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"wDu4KM8A13"}],"key":"VuVNnDlnUh"},{"type":"listItem","spread":true,"position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"children":[{"type":"inlineCode","value":"p1::p2","position":{"start":{"line":85,"column":1},"end":{"line":85,"column":1}},"key":"XTyK8VgBE5"}],"key":"Th3WhXmICr"},{"type":"listItem","spread":true,"position":{"start":{"line":86,"column":1},"end":{"line":87,"column":1}},"children":[{"type":"inlineCode","value":"[p1; ...; pn]","position":{"start":{"line":86,"column":1},"end":{"line":86,"column":1}},"key":"Ushgj5WdJ9"}],"key":"NSrbEGsY77"}],"key":"pvWQF9fRP6"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | n -> true\n  | _ -> false","position":{"start":{"line":88,"column":1},"end":{"line":93,"column":1}},"key":"Uf8DgXFsRv"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"The code above always returns true, because suppose that the length of ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"rwLclRVLmR"},{"type":"inlineCode","value":"lst","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"mMU1gSPUNX"},{"type":"text","value":" is 5. Then the pattern match becomes: ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"pXXjCUZXtl"},{"type":"inlineCode","value":"match 5 with n -> true | _ -> false","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"RpMHM6STpO"},{"type":"text","value":". And ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"yz5CAlbVZz"},{"type":"inlineCode","value":"n","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"wju2ldT5wq"},{"type":"text","value":" matches 5. A variable pattern matches any value and here produces the binding ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"J0j8rTMghX"},{"type":"inlineCode","value":"n->5","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"jevmNzNzUW"},{"type":"text","value":". The correct codes are written below.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"UDV2xEnYtP"}],"key":"N6W6x7eX8L"},{"type":"code","lang":"ocaml","value":"let length_is lst n =\n  match length lst with\n  | m -> if m=n then true else false\n  | _ -> false\n  \nlet length_is lst n =\n  match length lst with\n  | m -> m=n\n  | _ -> false\n\nlet length_is lst n =\n  length lst = n","position":{"start":{"line":97,"column":1},"end":{"line":110,"column":1}},"key":"w64hdKy0iE"},{"type":"paragraph","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"children":[{"type":"text","value":"However, this doesn’t mean patterns are not the variable values as in ","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"B1529MRkoB"},{"type":"inlineCode","value":"switch","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"IK7L9BF6el"},{"type":"text","value":" statement. Yes they are general “patterns”. But you can match them to specific values. e.g.","position":{"start":{"line":112,"column":1},"end":{"line":112,"column":1}},"key":"LIcRno7uhj"}],"key":"BiThvQNREp"},{"type":"code","lang":"ocaml","value":"match 5 with\n| 6 -> true\n| _ -> false;;\n- : bool = false\n\nmatch 5 with\n| 5 -> true\n| _ -> false;;\n- : bool = true","position":{"start":{"line":114,"column":1},"end":{"line":124,"column":1}},"key":"LkTtTSuubS"},{"type":"heading","depth":4,"position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"Advanced Pattern Matching","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"MP2uSWtnWP"}],"identifier":"advanced-pattern-matching","label":"Advanced Pattern Matching","html_id":"advanced-pattern-matching","implicit":true,"key":"jhDjJNkhiX"},{"type":"blockquote","position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":128,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"inlineCode","value":"p1 | ... | pn","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"PpmvNz39yx"},{"type":"text","value":": an “or” pattern; matching against it succeeds if a match succeeds against any of the individual patterns ","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"IbEQg4FbV7"},{"type":"inlineCode","value":"pi","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"ZZOKb4C07K"},{"type":"text","value":", which are tried in order from left to right. All the patterns must bind the same variables.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"mMHW7tfedI"}],"key":"NQhcwpyqXx"},{"type":"listItem","spread":true,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"inlineCode","value":"(p : t)","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"DezOHb2FAg"},{"type":"text","value":": a pattern with an explicit type annotation.","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"ijFkG1NJKc"}],"key":"vjWaoiK1oD"},{"type":"listItem","spread":true,"position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"children":[{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"vKDTLw7HCQ"},{"type":"text","value":": here, ","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"aEmARxvfAg"},{"type":"inlineCode","value":"c","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"b9QWhkpcSJ"},{"type":"text","value":" means any constant, such as integer literals, string literals, and booleans.","position":{"start":{"line":130,"column":1},"end":{"line":130,"column":1}},"key":"lqcKBb8IDF"}],"key":"ZvQtlTrexc"},{"type":"listItem","spread":true,"position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"inlineCode","value":"'ch1'..'ch2'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"RHbG7SewsG"},{"type":"text","value":": here, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"qkm1pWf7fS"},{"type":"inlineCode","value":"ch","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"QsJ0zT2IKy"},{"type":"text","value":" means a character literal. For example, ","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"CvMmUDH1Pk"},{"type":"inlineCode","value":"'A'..'Z'","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"iBYiR3Ve83"},{"type":"text","value":" matches any uppercase letter.","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"P7bJ15IpgN"}],"key":"YHoWBaBXBp"},{"type":"listItem","spread":true,"position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"children":[{"type":"inlineCode","value":"p when e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"L77PAelemh"},{"type":"text","value":": matches ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"O6BHQSaM8Q"},{"type":"inlineCode","value":"p","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"JOzhvTEysL"},{"type":"text","value":" but only if ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"o4ZmqmoRPi"},{"type":"inlineCode","value":"e","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"S6PUe9dmce"},{"type":"text","value":" evaluates to ","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"YekydTBdVD"},{"type":"inlineCode","value":"true","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"RrpYTJRRTt"},{"type":"text","value":".","position":{"start":{"line":132,"column":1},"end":{"line":132,"column":1}},"key":"Cj0MIl0ntm"}],"key":"RSYL5q5U9f"}],"key":"giT6EZRt2h"}],"key":"Fa28F1iMy4"},{"type":"heading","depth":2,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Tuples and Records","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"lsRBMAwmXx"}],"identifier":"tuples-and-records","label":"Tuples and Records","html_id":"tuples-and-records","implicit":true,"key":"ax1p1xyZ5d"},{"type":"paragraph","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"both represent heterogeneous types of values, both sizes are fixed","position":{"start":{"line":136,"column":1},"end":{"line":136,"column":1}},"key":"k8Ju1UMe7o"}],"key":"PVwMhWwqoA"},{"type":"heading","depth":3,"position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"children":[{"type":"text","value":"Records","position":{"start":{"line":138,"column":1},"end":{"line":138,"column":1}},"key":"M3DfcPR0Zx"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/records.html","key":"kuczFSFhlJ"}],"identifier":"records","label":"Records","html_id":"records","implicit":true,"key":"XZQv5ZEr8B"},{"type":"paragraph","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"Works like ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"sxbiCZmhrD"},{"type":"inlineCode","value":"struct","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"OhJ4Fz7sIw"},{"type":"text","value":" in C++. Each field is identified by ","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"Zphi38f5Fx"},{"type":"strong","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"text","value":"names","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"fUfZcpjlAq"}],"key":"z0EPRsotbi"},{"type":"text","value":".","position":{"start":{"line":140,"column":1},"end":{"line":140,"column":1}},"key":"BeRMN49u7b"}],"key":"Gy3V7UXzfi"},{"type":"heading","depth":4,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"t0ArSUz1LL"}],"identifier":"definition","label":"Definition","html_id":"definition","implicit":true,"key":"I81Lc8zc9F"},{"type":"code","lang":"ocaml","value":"type student ={name: string; gpa : float; year :int;} (*defining a type*)\nlet rbg = {name = \"R B\"; gpa = 4.0; year = 1954;} (*declare an instance of that type*)\nlet s = rbg.name (*accessing field in the record*)","position":{"start":{"line":144,"column":1},"end":{"line":148,"column":1}},"key":"FFRzT2147r"},{"type":"heading","depth":4,"position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"children":[{"type":"text","value":"Patter Matching","position":{"start":{"line":150,"column":1},"end":{"line":150,"column":1}},"key":"ZBBYCUvHFd"}],"identifier":"patter-matching","label":"Patter Matching","html_id":"patter-matching","implicit":true,"key":"fAOj1MIySA"},{"type":"code","lang":"ocaml","value":"match rbg with \n| {name=n; gpa=g; year=y} -> y\n\n(*syntactic sugar of codes above*)\nmatch rgb with \n| {name;gpa;year} -> name","position":{"start":{"line":152,"column":1},"end":{"line":159,"column":1}},"key":"LXNUl6azrK"},{"type":"heading","depth":3,"position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"children":[{"type":"text","value":"Tuples","position":{"start":{"line":161,"column":1},"end":{"line":161,"column":1}},"key":"SfIPyi5Ugy"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/tuples.html","key":"raZoyKY1iL"}],"identifier":"tuples","label":"Tuples","html_id":"tuples","implicit":true,"key":"IPa5hJRWHL"},{"type":"paragraph","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"Tuples are identified by ","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"nHjxn9vnrI"},{"type":"strong","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"text","value":"position","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"XvDpsMBhYR"}],"key":"SSoTaDGX2v"},{"type":"text","value":", instead of naming the components.","position":{"start":{"line":163,"column":1},"end":{"line":163,"column":1}},"key":"uZD4LgwIFs"}],"key":"wSNghrfcfa"},{"type":"heading","depth":4,"position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":165,"column":1},"end":{"line":165,"column":1}},"key":"BxhJSNt6wb"}],"identifier":"definition","label":"Definition","html_id":"definition-1","implicit":true,"key":"XaDGtM1HI0"},{"type":"code","lang":"ocaml","value":"let t = (10,\"am\") (*t has type: int * string*) \ntype time = int * string \nlet t:time = (10,\"am\") (*t has type: time*) \nfst t;; snd t;; (*predefined functions to access the first and second element of a tuple*)","position":{"start":{"line":167,"column":1},"end":{"line":172,"column":1}},"key":"NgcqMXwmur"},{"type":"heading","depth":4,"position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"children":[{"type":"text","value":"Pattern Matching","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"key":"PtvwRTdOgF"}],"identifier":"pattern-matching","label":"Pattern Matching","html_id":"pattern-matching","implicit":true,"key":"sOTK80axXZ"},{"type":"paragraph","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"children":[{"type":"text","value":"if we use a pattern in a ","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"pD73PVIK3C"},{"type":"inlineCode","value":"let","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"tb8qzN9BDW"},{"type":"text","value":" expression (or definition), we are really just doing pattern matching with a single clause.","position":{"start":{"line":176,"column":1},"end":{"line":176,"column":1}},"key":"qYwpB3Ppkr"}],"key":"vLo2mtgwcO"},{"type":"code","lang":"ocaml","value":"let tick t =\nlet (t,s) = t in (t+1,s) (*tick : int * 'a -> int * 'a = <fun>*)\n\nlet tick (t:time):time =\nlet (t,s) = t in (t+1,s) (*tick : time -> time = <fun>*)\n\nlet tick (t:time):time = \nmatch t with\n| (t,s) -> (t+1,s)","position":{"start":{"line":178,"column":1},"end":{"line":188,"column":1}},"key":"q7UGRAQLtf"},{"type":"heading","depth":3,"position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"children":[{"type":"text","value":"Pattern Matching in a Nutshell","position":{"start":{"line":190,"column":1},"end":{"line":190,"column":1}},"key":"bi7Qoq1pkP"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/data/pattern_matching_examples.html","key":"SVejRCPvOq"}],"identifier":"pattern-matching-in-a-nutshell","label":"Pattern Matching in a Nutshell","html_id":"pattern-matching-in-a-nutshell","implicit":true,"key":"HyNKRYofsk"},{"type":"code","lang":"ocaml","value":"(* Pokemon types *)\ntype ptype = \n  TNormal | TFire | TWater\n\n(* A record to represent Pokemon *)\ntype mon = {name: string; hp : int; ptype: ptype}\n\n(*********************************************\n * Several ways to get a Pokemon's hit points:\n *********************************************)\n\n(* OK *)\nlet get_hp m =\n  match m with\n  | {name=n; hp=h; ptype=t} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name=_; hp=h; ptype=_} -> h\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {name; hp; ptype} -> hp\n\n(* better *)\nlet get_hp m =\n  match m with\n  | {hp} -> hp\n\n(* best *)\nlet get_hp m = m.hp\n\n(**************************************************\n * Several ways to get the 3rd component of a tuple\n **************************************************)\n\n(* OK *)\nlet thrd t =\n  match t with\n  | (x,y,z) -> z\n\n(* good *)\nlet thrd t = \n  let (x,y,z) = t in z\n\n(* better *)\nlet thrd t =\n  let (_,_,z) = t in z\n\n(* best *)\nlet thrd (_,_,z) = z\n\n(*************************************\n * How to get the components of a pair\n *************************************)\n\nlet fst (x,_) = x\nlet snd (_,y) = y\n\n\n(************************\n * take tuple as a whole\n ************************)\nlet rep_ok ((n,lst) as v) =\n  if List.length lst = n then v\n  else failwith \"RI violated\"","position":{"start":{"line":192,"column":1},"end":{"line":261,"column":1}},"key":"KNjW4MtrVN"}],"key":"lADeknKuY7"}],"key":"p9Heso9F80"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Functions","url":"/2020-01-28-functions","group":"C S3110"},"next":{"title":"Advanced Data Types","url":"/2020-02-04-advanced-data-types","group":"C S3110"}}},"domain":"http://localhost:3000"}