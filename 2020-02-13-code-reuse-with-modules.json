{"version":2,"kind":"Article","sha256":"dc5a2b7baadb6be1b6df57899c0d91aeea4a2d3f84ef5986e5c64798a48d8761","slug":"2020-02-13-code-reuse-with-modules","location":"/CS3110/2020-02-13-Code-Reuse-with-Modules.md","dependencies":[],"frontmatter":{"title":"Code Reuse with Modules","tags":["Cornell","20SP","CS3110"],"date":"2020-02-13","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-13-Code-Reuse-with-Modules.md","url":"/cornell-notes/build/2020-02-13-Code-Reus-1064b3e39a2da194d310af45526dd733.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"LyMcin77aI"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Code Reuse with Modules","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"thQCnA6ThE"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","key":"Crh75OJjsr"}],"key":"H66z8Ssg1h"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"ZFAaQeGCtD"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Includes","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"yy3JEWpLpJ"}],"identifier":"includes","label":"Includes","html_id":"includes","implicit":true,"key":"N2mpwd8ckR"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"tzAasXeKca"}],"key":"WHaD7KZ6go"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"gkZECumWr7"},{"type":"inlineCode","value":"includes","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"CBxiL00RkA"},{"type":"text","value":" enables a structure to include all the values defined by another structure, or a signature to include all the names declared by another signature.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"EbZyTgBgGP"}],"key":"GiFPpKNw8G"},{"type":"comment","value":"more","key":"LRWRF6fxeN"},{"type":"heading","depth":3,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"I8VVpGWIsK"}],"identifier":"syntax","label":"Syntax","html_id":"syntax","implicit":true,"key":"TXOzujcwFu"},{"type":"code","lang":"ocaml","value":"module type SetExtended = sig\n  include Set\n  (*all other definitions specific to SetExtended*)\n  val of_list : 'a list -> 'a t\nend\n\nmodule ListSetDupsExtended = struct\n  include ListSetDups\n  (*all other definitions specific to SetExtended*)\n  let of_list lst = List.fold_right add lst empty\nend","position":{"start":{"line":22,"column":1},"end":{"line":34,"column":1}},"key":"HZi5rxGXiB"},{"type":"heading","depth":3,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Encapsulation","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"KQov5fdVls"}],"identifier":"encapsulation","label":"Encapsulation","html_id":"encapsulation","implicit":true,"key":"iRgGEPjFf6"},{"type":"code","lang":"ocaml","value":"module ListSetDupsImpl = struct\n  type 'a t   = 'a list\n  let empty   = []\n  let mem     = List.mem\n  let add x s = x::s\n  let elts s  = List.sort_uniq Stdlib.compare s\nend\n\nmodule ListSetDups : Set = ListSetDupsImpl\n\nmodule ListSetDupsExtended = struct\n  include ListSetDupsImpl\n  let of_list lst = lst\nend","position":{"start":{"line":38,"column":1},"end":{"line":53,"column":1}},"key":"jTqJNLKBOt"},{"type":"paragraph","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"The important change is that ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"ZWlhZsfp1O"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"QSdZbLwe9z"},{"type":"text","value":" is not sealed, so its type ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"MFyeBWBUiq"},{"type":"inlineCode","value":"'a t","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"kMIf4BCRqd"},{"type":"text","value":" is not abstract. Plus, OCaml compiler can infer it is an implementation of ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"JZpOz7t19w"},{"type":"inlineCode","value":"Set","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"bdqlX1FeJe"},{"type":"text","value":" .When we include it in ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"G9gk8pOcCo"},{"type":"inlineCode","value":"ListSetDupsExtended","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"TTSJFVVWi6"},{"type":"text","value":", we can therefore exploit the fact that it’s a synonym for ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"Hvd35SOXf3"},{"type":"inlineCode","value":"'a list","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"zCL1eujb2x"},{"type":"text","value":".","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"YVn2jTbKxg"}],"key":"zeEcXNLWgX"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"The clients should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"U6PKSFcTF9"},{"type":"inlineCode","value":"ListSetDups","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"aKQCh8ullo"},{"type":"text","value":", but when we use List to implement other things, we should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"fiObpH6A4X"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"Or021Ld0UO"},{"type":"text","value":" instead.","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"IbO53DHrlB"}],"key":"kKKkZGMbCR"},{"type":"heading","depth":3,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Includes vs. Open","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"vkV0JryXz1"}],"identifier":"includes-vs-open","label":"Includes vs. Open","html_id":"includes-vs-open","implicit":true,"key":"VfXab5rIBe"},{"type":"code","lang":"ocaml","value":"module M = struct\n  let x = 0\nend\n\nmodule N = struct\n  include M\n  let y = x + 1\n  let z = 1\nend\n\nmodule O = struct\n  open M\n  let y = x + 1\n  let z = 1\nend\n\n\nmodule M : sig val x : int end\nmodule N : sig val x : int val y : int val z : int end\nmodule O : sig val y : int val z : int end","position":{"start":{"line":61,"column":1},"end":{"line":82,"column":1}},"key":"YyeXTiFQpa"},{"type":"paragraph","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"bUH3nCu4RE"},{"type":"text","value":" has both an ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"aSoFXAu8Iq"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"x8KBqGfPA5"},{"type":"text","value":" and ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"MwRpQa9X6m"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"NBLNcDirPW"},{"type":"text","value":", whereas ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"svuaHfVUhR"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"d1cqhdd5wO"},{"type":"text","value":" has only a ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"HXAp9aZP6N"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"wqfexCMZbD"},{"type":"text","value":". The reason is that ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"JhoNWGEINz"},{"type":"inlineCode","value":"include M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"dToaeDXFOi"},{"type":"text","value":" causes all the definitions of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Xro9SrCagE"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"mVCpfuTIRd"},{"type":"text","value":" to also be included in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"cqdFZAznjT"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"byYE3BZH8z"},{"type":"text","value":", so the definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"hVPbBmIWy7"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ghzs6gocso"},{"type":"text","value":" from ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"f2V3aXL5VT"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"O85VAk1fLb"},{"type":"text","value":" is present in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"LMdAEFqVjj"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"qKmblWA7ft"},{"type":"text","value":". But ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"xcsggDH1j9"},{"type":"inlineCode","value":"open M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"z5UDHdf1BP"},{"type":"text","value":" only made those definitions available in the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Nuz71YmLOn"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"scope","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"GjmNlHrTby"}],"key":"grczLABcCt"},{"type":"text","value":" of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"k6WXVfi5fx"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"f3sE8XExs3"},{"type":"text","value":", aka. a part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"V2dCm7lqar"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"implementation","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"NMOxTR1tf8"}],"key":"PbUSHL47hG"},{"type":"text","value":"; it doesn’t actually make them part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Aj9Q6cdpJF"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"structure","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"GesBhToThi"}],"key":"pQZpQecrDL"},{"type":"text","value":", aka. the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"FxKWT2SRix"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"client","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Bzqrsmr5q3"}],"key":"wJoJWYnTxR"},{"type":"text","value":" cannot see them. So ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"y0H7Zr3oMO"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"StuRCmsSSe"},{"type":"text","value":" does not contain a definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"HeGuCYbpZh"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Z1VvPWycbZ"},{"type":"text","value":", even though ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"qGOqLWvVis"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"gstJOHxsKk"},{"type":"text","value":" is in scope during the evaluation of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"zXWWh2PIgM"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"LWeHHSSgAs"},{"type":"text","value":"’s definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"i8Jp247Xqw"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"M8QkYxz5zY"},{"type":"text","value":".","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"kRg8FEePRC"}],"key":"PKORC3RZdT"},{"type":"heading","depth":2,"position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"children":[{"type":"text","value":"Functors","position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"key":"Czxv8mqcta"}],"identifier":"functors","label":"Functors","html_id":"functors","implicit":true,"key":"xmMb77H3d2"},{"type":"paragraph","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"strong","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"MxVRDkav4I"}],"key":"U2zXOPfaxm"},{"type":"text","value":": a functor is simply a “function” from structures to structures. It is a parametrized module.","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"jCsZY6Pe5G"}],"key":"AC6W0WIjkf"},{"type":"heading","depth":3,"position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"key":"MxttqL8coe"}],"identifier":"syntax","label":"Syntax","html_id":"syntax-1","implicit":true,"key":"PyKoinUiA1"},{"type":"code","lang":"ocaml","value":"module F (M : S) = struct\n  ...\nend\n\n(*annonymous functors*)\nmodule F = functor (M : S) -> struct\n  ...\nend\n\n(*functors parametriezed with multiple modules*)\nmodule F (M1 : S1) ... (Mn : Sn) = struct\n  ...\nend\n\n(* above are the desugared version of the codes above*)\nmodule F = functor (M1 : S1) -> ... -> functor (Mn : Sn) -> struct\n  ...\nend","position":{"start":{"line":94,"column":1},"end":{"line":113,"column":1}},"key":"HtHWberlzv"},{"type":"code","lang":"ocaml","value":"module ANewModule = F(OldModule)\nmodule ListSetNoDupsExtended = ExtendSet(ListSetNoDups)","position":{"start":{"line":115,"column":1},"end":{"line":118,"column":1}},"key":"chsYAcQW7W"},{"type":"heading","depth":3,"position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"children":[{"type":"text","value":"Application","position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"key":"jm8p0jC6pJ"}],"identifier":"application","label":"Application","html_id":"application","implicit":true,"key":"xOHVsHVdbU"},{"type":"heading","depth":4,"position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"Extension","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"W3BjTd9LLn"}],"identifier":"extension","label":"Extension","html_id":"extension","implicit":true,"key":"XTXqUaFONR"},{"type":"code","lang":"ocaml","value":"module ExtendSet(S:Set) = struct\n  include S\n\n  let add_all lst set =\n    let add' s x = S.add x s in\n    List.fold_left add' set lst\nend","position":{"start":{"line":125,"column":1},"end":{"line":133,"column":1}},"key":"GAsbuu8JrT"},{"type":"heading","depth":4,"position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"children":[{"type":"text","value":"Other than Extension: Testing","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"XoyRQRRUko"}],"identifier":"other-than-extension-testing","label":"Other than Extension: Testing","html_id":"other-than-extension-testing","implicit":true,"key":"GGsOKmKf9x"},{"type":"code","lang":"ocaml","value":"module SackTester (S: StackSig) = struct\n\tlet _ = assert (S.(empty |> push 1 |> peek) = 1)\nend\n\nmodule MyStackTester = StackTester(MyStack)\nmodule ListStackTester = StackTester(ListStack)","position":{"start":{"line":137,"column":1},"end":{"line":144,"column":1}},"key":"glBbfRWxuj"},{"type":"paragraph","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"text","value":"The only difference is that because the latter example is about extension, we need to include everything from its parent module.","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"key":"qke48fKwKW"}],"key":"PvvPJOnisx"}],"key":"c2eqR5WjJd"}],"key":"diFBqbVxgp"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Modules","url":"/2020-02-11-modules","group":"C S3110"},"next":{"title":"Specifications","url":"/2020-02-18-specifications","group":"C S3110"}}},"domain":"http://localhost:3000"}