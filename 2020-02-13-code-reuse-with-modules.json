{"version":2,"kind":"Article","sha256":"dc5a2b7baadb6be1b6df57899c0d91aeea4a2d3f84ef5986e5c64798a48d8761","slug":"2020-02-13-code-reuse-with-modules","location":"/CS3110/2020-02-13-Code-Reuse-with-Modules.md","dependencies":[],"frontmatter":{"title":"Code Reuse with Modules","tags":["Cornell","20SP","CS3110"],"date":"2020-02-13","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-13-Code-Reuse-with-Modules.md","url":"/cornell-notes/build/2020-02-13-Code-Reus-ca7e4b09949c9a54e280f3cb4fef2362.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"n6Ct4O8A7v"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Code Reuse with Modules","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"lwXVBS7DrZ"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","key":"iXeKlvkLjv"}],"key":"Sxi8PtEj76"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"TfZshlNUgx"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Includes","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"FUGDMO3sEZ"}],"identifier":"includes","label":"Includes","html_id":"includes","implicit":true,"key":"h88EBcEqJT"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"tIVGfquk0Q"}],"key":"cAB5mSuDCX"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"YJG9y0CvqK"},{"type":"inlineCode","value":"includes","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"WIZOWLaLPm"},{"type":"text","value":" enables a structure to include all the values defined by another structure, or a signature to include all the names declared by another signature.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"oGyPsN8jxL"}],"key":"b00l9iIdNv"},{"type":"comment","value":"more","key":"g7yJqrzpcF"},{"type":"heading","depth":3,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"WJ8Sl596u1"}],"identifier":"syntax","label":"Syntax","html_id":"syntax","implicit":true,"key":"viKx9yF5K4"},{"type":"code","lang":"ocaml","value":"module type SetExtended = sig\n  include Set\n  (*all other definitions specific to SetExtended*)\n  val of_list : 'a list -> 'a t\nend\n\nmodule ListSetDupsExtended = struct\n  include ListSetDups\n  (*all other definitions specific to SetExtended*)\n  let of_list lst = List.fold_right add lst empty\nend","position":{"start":{"line":22,"column":1},"end":{"line":34,"column":1}},"key":"suvkPKruuH"},{"type":"heading","depth":3,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Encapsulation","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"Ao1kXa6jrF"}],"identifier":"encapsulation","label":"Encapsulation","html_id":"encapsulation","implicit":true,"key":"VH8bdK7zeq"},{"type":"code","lang":"ocaml","value":"module ListSetDupsImpl = struct\n  type 'a t   = 'a list\n  let empty   = []\n  let mem     = List.mem\n  let add x s = x::s\n  let elts s  = List.sort_uniq Stdlib.compare s\nend\n\nmodule ListSetDups : Set = ListSetDupsImpl\n\nmodule ListSetDupsExtended = struct\n  include ListSetDupsImpl\n  let of_list lst = lst\nend","position":{"start":{"line":38,"column":1},"end":{"line":53,"column":1}},"key":"kfmsq9mpeU"},{"type":"paragraph","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"The important change is that ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"xdzRX2vJcd"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"TRnpYkSLkR"},{"type":"text","value":" is not sealed, so its type ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"y7Hh9t5VJ2"},{"type":"inlineCode","value":"'a t","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"wYXH2qhtQI"},{"type":"text","value":" is not abstract. Plus, OCaml compiler can infer it is an implementation of ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"bCcqhImRy6"},{"type":"inlineCode","value":"Set","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"u6ZTCJ5cdH"},{"type":"text","value":" .When we include it in ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"PfRzCTjfqN"},{"type":"inlineCode","value":"ListSetDupsExtended","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"F1YIz1xnkM"},{"type":"text","value":", we can therefore exploit the fact that it’s a synonym for ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"AhI2e7jmHD"},{"type":"inlineCode","value":"'a list","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"Zfa0e3fbcG"},{"type":"text","value":".","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"QTSO3TrR0n"}],"key":"o8Fx5xZ8hW"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"The clients should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"EVDodisbq7"},{"type":"inlineCode","value":"ListSetDups","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"HPRNcfvhj0"},{"type":"text","value":", but when we use List to implement other things, we should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"SItpkep56Q"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"HcyG5Cqjjv"},{"type":"text","value":" instead.","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"lKdDJGEurc"}],"key":"g7ToC9MXgw"},{"type":"heading","depth":3,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Includes vs. Open","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"sHKrTPdCMy"}],"identifier":"includes-vs-open","label":"Includes vs. Open","html_id":"includes-vs-open","implicit":true,"key":"DDTMmxjfuF"},{"type":"code","lang":"ocaml","value":"module M = struct\n  let x = 0\nend\n\nmodule N = struct\n  include M\n  let y = x + 1\n  let z = 1\nend\n\nmodule O = struct\n  open M\n  let y = x + 1\n  let z = 1\nend\n\n\nmodule M : sig val x : int end\nmodule N : sig val x : int val y : int val z : int end\nmodule O : sig val y : int val z : int end","position":{"start":{"line":61,"column":1},"end":{"line":82,"column":1}},"key":"d62TUyb1Lu"},{"type":"paragraph","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"QuVa9QeUx5"},{"type":"text","value":" has both an ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"xqhJRQ0pIC"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"DlctGG6cTN"},{"type":"text","value":" and ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Qx1jRK38T7"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"mL11J4U0u8"},{"type":"text","value":", whereas ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"X1ArePyE5f"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"FDWotO8kID"},{"type":"text","value":" has only a ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"go4JzspDEz"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"fpMc3qjALR"},{"type":"text","value":". The reason is that ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"UmyQpJA7a3"},{"type":"inlineCode","value":"include M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"DX0qLUttQK"},{"type":"text","value":" causes all the definitions of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"mBMiWnP1nO"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"zYFkTgGSYu"},{"type":"text","value":" to also be included in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"JJs3dbRPkr"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"mLIryymDxn"},{"type":"text","value":", so the definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ASH6sT8Msw"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"WtI9o7GPFB"},{"type":"text","value":" from ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"trXYDSLpef"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"AVvpgu1idJ"},{"type":"text","value":" is present in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"vgDZ6HdH5i"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"E2mhFfsd6y"},{"type":"text","value":". But ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"pWqfG5Tifz"},{"type":"inlineCode","value":"open M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"n9rcSEFN8g"},{"type":"text","value":" only made those definitions available in the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ntWKesftYf"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"scope","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"vE8R8IMnFi"}],"key":"GlRN8sJz8G"},{"type":"text","value":" of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"VAKZWmydW4"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"MpemNjBGO5"},{"type":"text","value":", aka. a part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"GyuLyL3s5p"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"implementation","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"n6JbKqcXkE"}],"key":"mzoevIH2Eq"},{"type":"text","value":"; it doesn’t actually make them part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"frMbqh5Zkr"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"structure","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Yp5L0NnMnO"}],"key":"SxHelhI9za"},{"type":"text","value":", aka. the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"hTTrLnWZfg"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"client","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"nTiFsVcYjI"}],"key":"ghErjcFJHZ"},{"type":"text","value":" cannot see them. So ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"A95BmIqw40"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"oOY6PhNHhG"},{"type":"text","value":" does not contain a definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"BMdB0WxjkD"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"mSZuLnxQhF"},{"type":"text","value":", even though ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"pHnxfQrNQp"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ATArb7ntK0"},{"type":"text","value":" is in scope during the evaluation of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"dOTZI1vnQN"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"SwFuXJ5N5i"},{"type":"text","value":"’s definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"RtXa241SJv"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"LBsMQ29Hsg"},{"type":"text","value":".","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"rxObYn9Nv5"}],"key":"H7St4FRScO"},{"type":"heading","depth":2,"position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"children":[{"type":"text","value":"Functors","position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"key":"i9vxneSKKH"}],"identifier":"functors","label":"Functors","html_id":"functors","implicit":true,"key":"NestkstnXh"},{"type":"paragraph","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"strong","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"gtldR8Cgqd"}],"key":"DyipfGeMcl"},{"type":"text","value":": a functor is simply a “function” from structures to structures. It is a parametrized module.","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"ePYldJdX5U"}],"key":"ZrqiGwhl8m"},{"type":"heading","depth":3,"position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"key":"ZKBsxzot7P"}],"identifier":"syntax","label":"Syntax","html_id":"syntax-1","implicit":true,"key":"PC8pINEWaT"},{"type":"code","lang":"ocaml","value":"module F (M : S) = struct\n  ...\nend\n\n(*annonymous functors*)\nmodule F = functor (M : S) -> struct\n  ...\nend\n\n(*functors parametriezed with multiple modules*)\nmodule F (M1 : S1) ... (Mn : Sn) = struct\n  ...\nend\n\n(* above are the desugared version of the codes above*)\nmodule F = functor (M1 : S1) -> ... -> functor (Mn : Sn) -> struct\n  ...\nend","position":{"start":{"line":94,"column":1},"end":{"line":113,"column":1}},"key":"YjsilIpJ4Z"},{"type":"code","lang":"ocaml","value":"module ANewModule = F(OldModule)\nmodule ListSetNoDupsExtended = ExtendSet(ListSetNoDups)","position":{"start":{"line":115,"column":1},"end":{"line":118,"column":1}},"key":"SOWTOJNvGC"},{"type":"heading","depth":3,"position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"children":[{"type":"text","value":"Application","position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"key":"bjZZtqJpWK"}],"identifier":"application","label":"Application","html_id":"application","implicit":true,"key":"PQjfM1BrrN"},{"type":"heading","depth":4,"position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"Extension","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"fPJpnxnUsP"}],"identifier":"extension","label":"Extension","html_id":"extension","implicit":true,"key":"IXJVOC6UCf"},{"type":"code","lang":"ocaml","value":"module ExtendSet(S:Set) = struct\n  include S\n\n  let add_all lst set =\n    let add' s x = S.add x s in\n    List.fold_left add' set lst\nend","position":{"start":{"line":125,"column":1},"end":{"line":133,"column":1}},"key":"WFR7BrY3Pz"},{"type":"heading","depth":4,"position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"children":[{"type":"text","value":"Other than Extension: Testing","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"uzzieWhJ9D"}],"identifier":"other-than-extension-testing","label":"Other than Extension: Testing","html_id":"other-than-extension-testing","implicit":true,"key":"nXKa8QYY0X"},{"type":"code","lang":"ocaml","value":"module SackTester (S: StackSig) = struct\n\tlet _ = assert (S.(empty |> push 1 |> peek) = 1)\nend\n\nmodule MyStackTester = StackTester(MyStack)\nmodule ListStackTester = StackTester(ListStack)","position":{"start":{"line":137,"column":1},"end":{"line":144,"column":1}},"key":"m0gA15smMo"},{"type":"paragraph","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"text","value":"The only difference is that because the latter example is about extension, we need to include everything from its parent module.","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"key":"uxqYPYWV5i"}],"key":"WLs5JfCSYu"}],"key":"U18r4nlqk4"}],"key":"ikpK737bKN"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Modules","url":"/2020-02-11-modules","group":"CS3110 Functional Programming"},"next":{"title":"Specifications","url":"/2020-02-18-specifications","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}