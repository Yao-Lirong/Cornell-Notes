{"version":2,"kind":"Article","sha256":"dc5a2b7baadb6be1b6df57899c0d91aeea4a2d3f84ef5986e5c64798a48d8761","slug":"2020-02-13-code-reuse-with-modules","location":"/CS3110/2020-02-13-Code-Reuse-with-Modules.md","dependencies":[],"frontmatter":{"title":"Code Reuse with Modules","tags":["Cornell","20SP","CS3110"],"date":"2020-02-13","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-13-Code-Reuse-with-Modules.md","url":"/cornell-notes/build/2020-02-13-Code-Reus-ca7e4b09949c9a54e280f3cb4fef2362.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Riz214ItpK"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Code Reuse with Modules","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"eidm7TA9Nl"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","key":"Jw4GHiRyD2"}],"key":"onHHuqtJCl"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"y3WLHr8dXg"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Includes","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"QKJCOdYiYR"}],"identifier":"includes","label":"Includes","html_id":"includes","implicit":true,"key":"idIjYNXvyn"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"P0eL0iNz1l"}],"key":"KxifAulu8N"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"AMSOWAzfmG"},{"type":"inlineCode","value":"includes","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"MxG3mJvwRr"},{"type":"text","value":" enables a structure to include all the values defined by another structure, or a signature to include all the names declared by another signature.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"U4rsPLi7oE"}],"key":"uKZlaROPEL"},{"type":"comment","value":"more","key":"ZDpHZWUDhY"},{"type":"heading","depth":3,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"vSNybx97Cp"}],"identifier":"syntax","label":"Syntax","html_id":"syntax","implicit":true,"key":"OdZZYbB7Bn"},{"type":"code","lang":"ocaml","value":"module type SetExtended = sig\n  include Set\n  (*all other definitions specific to SetExtended*)\n  val of_list : 'a list -> 'a t\nend\n\nmodule ListSetDupsExtended = struct\n  include ListSetDups\n  (*all other definitions specific to SetExtended*)\n  let of_list lst = List.fold_right add lst empty\nend","position":{"start":{"line":22,"column":1},"end":{"line":34,"column":1}},"key":"IDP2bKDNTX"},{"type":"heading","depth":3,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Encapsulation","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"MKmysOr6nf"}],"identifier":"encapsulation","label":"Encapsulation","html_id":"encapsulation","implicit":true,"key":"mIkpxghRlz"},{"type":"code","lang":"ocaml","value":"module ListSetDupsImpl = struct\n  type 'a t   = 'a list\n  let empty   = []\n  let mem     = List.mem\n  let add x s = x::s\n  let elts s  = List.sort_uniq Stdlib.compare s\nend\n\nmodule ListSetDups : Set = ListSetDupsImpl\n\nmodule ListSetDupsExtended = struct\n  include ListSetDupsImpl\n  let of_list lst = lst\nend","position":{"start":{"line":38,"column":1},"end":{"line":53,"column":1}},"key":"NB40ixH4og"},{"type":"paragraph","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"The important change is that ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"ouTCFD6yZD"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"eKVDgtX9bW"},{"type":"text","value":" is not sealed, so its type ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"us3bFtQVQb"},{"type":"inlineCode","value":"'a t","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"DctiU8CnJH"},{"type":"text","value":" is not abstract. Plus, OCaml compiler can infer it is an implementation of ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"KwiTAnRQUq"},{"type":"inlineCode","value":"Set","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"nx08NosdqR"},{"type":"text","value":" .When we include it in ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"jNu9Bc4sUf"},{"type":"inlineCode","value":"ListSetDupsExtended","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"wOkWVYPeag"},{"type":"text","value":", we can therefore exploit the fact that it’s a synonym for ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"MhK7V13OfX"},{"type":"inlineCode","value":"'a list","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"MenzWucnvn"},{"type":"text","value":".","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"z4WKtvMfnV"}],"key":"O3qHig4paf"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"The clients should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"Mbq1lWsORO"},{"type":"inlineCode","value":"ListSetDups","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"OOwKZ8hGG2"},{"type":"text","value":", but when we use List to implement other things, we should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"F60wfeYYWv"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"qe28uV4SzI"},{"type":"text","value":" instead.","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"MskSxyOXf7"}],"key":"bUxKMHDgL0"},{"type":"heading","depth":3,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Includes vs. Open","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"rs0XLnjNyK"}],"identifier":"includes-vs-open","label":"Includes vs. Open","html_id":"includes-vs-open","implicit":true,"key":"RPowQj6MN3"},{"type":"code","lang":"ocaml","value":"module M = struct\n  let x = 0\nend\n\nmodule N = struct\n  include M\n  let y = x + 1\n  let z = 1\nend\n\nmodule O = struct\n  open M\n  let y = x + 1\n  let z = 1\nend\n\n\nmodule M : sig val x : int end\nmodule N : sig val x : int val y : int val z : int end\nmodule O : sig val y : int val z : int end","position":{"start":{"line":61,"column":1},"end":{"line":82,"column":1}},"key":"io7s6EtjfA"},{"type":"paragraph","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"KKwIfLGivs"},{"type":"text","value":" has both an ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"R5e6kf7dOr"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"txDN9rqQBr"},{"type":"text","value":" and ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"qz8kF1BCYR"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"jY0mtc453O"},{"type":"text","value":", whereas ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"zH08naJgWf"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"crGC6ZHA5o"},{"type":"text","value":" has only a ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"LgkpA9vda7"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"MuioxE6ZK7"},{"type":"text","value":". The reason is that ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"IE9vKZAJiO"},{"type":"inlineCode","value":"include M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"MxpEj1dqBk"},{"type":"text","value":" causes all the definitions of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"GoNlCGpYjo"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"DIeXIGSnZw"},{"type":"text","value":" to also be included in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"RRjL35hdZW"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"mpxzgHNIYj"},{"type":"text","value":", so the definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"FShggC8LaC"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"f7jI8FpK4U"},{"type":"text","value":" from ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"fnqFDzSp6N"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"aSWuL2ZrWX"},{"type":"text","value":" is present in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"sg91qYFVs7"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"MKgUXFZKvU"},{"type":"text","value":". But ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"v0vFjxj9z9"},{"type":"inlineCode","value":"open M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"CYIDwst3uR"},{"type":"text","value":" only made those definitions available in the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"kqiNG7QTtl"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"scope","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"FeRzzEs7OD"}],"key":"Rrf9ZJw5o4"},{"type":"text","value":" of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"YesrwA3Ma6"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"UOvM90ld8Z"},{"type":"text","value":", aka. a part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"J03VOvnWpE"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"implementation","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"UgmiJdwkkr"}],"key":"smeDMEhwIM"},{"type":"text","value":"; it doesn’t actually make them part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"A9jy37UAKc"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"structure","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"cENiULrpWN"}],"key":"TMJef48dTa"},{"type":"text","value":", aka. the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"XKXby9qakl"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"client","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"eCJpuMoo8T"}],"key":"wCPYFGFw2B"},{"type":"text","value":" cannot see them. So ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Gl4fIgoics"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Ra8jTY2PcE"},{"type":"text","value":" does not contain a definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"xD6xCcxG17"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"GJsM0MI4FQ"},{"type":"text","value":", even though ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"G50DCIbo8Z"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"bDMRpDBOb0"},{"type":"text","value":" is in scope during the evaluation of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"SGzQnjRK4I"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"lTCwnmHoPu"},{"type":"text","value":"’s definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"M5iLwowOVG"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"lOX7en740B"},{"type":"text","value":".","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"MqR0RUkbmZ"}],"key":"yQnUgzr8MP"},{"type":"heading","depth":2,"position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"children":[{"type":"text","value":"Functors","position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"key":"L1mc3SdZN4"}],"identifier":"functors","label":"Functors","html_id":"functors","implicit":true,"key":"A2oo6QrZld"},{"type":"paragraph","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"strong","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"vFHjf0BBa7"}],"key":"HDwKHchGJW"},{"type":"text","value":": a functor is simply a “function” from structures to structures. It is a parametrized module.","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"NHlcCssDYc"}],"key":"nT6VtBHrzt"},{"type":"heading","depth":3,"position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"key":"abOTyvCbyL"}],"identifier":"syntax","label":"Syntax","html_id":"syntax-1","implicit":true,"key":"syhu0183VT"},{"type":"code","lang":"ocaml","value":"module F (M : S) = struct\n  ...\nend\n\n(*annonymous functors*)\nmodule F = functor (M : S) -> struct\n  ...\nend\n\n(*functors parametriezed with multiple modules*)\nmodule F (M1 : S1) ... (Mn : Sn) = struct\n  ...\nend\n\n(* above are the desugared version of the codes above*)\nmodule F = functor (M1 : S1) -> ... -> functor (Mn : Sn) -> struct\n  ...\nend","position":{"start":{"line":94,"column":1},"end":{"line":113,"column":1}},"key":"ICqqO46oXi"},{"type":"code","lang":"ocaml","value":"module ANewModule = F(OldModule)\nmodule ListSetNoDupsExtended = ExtendSet(ListSetNoDups)","position":{"start":{"line":115,"column":1},"end":{"line":118,"column":1}},"key":"pOAj6NFf1j"},{"type":"heading","depth":3,"position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"children":[{"type":"text","value":"Application","position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"key":"IhljPvwJHH"}],"identifier":"application","label":"Application","html_id":"application","implicit":true,"key":"D7HyFZpzjV"},{"type":"heading","depth":4,"position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"Extension","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"Lp4R5PZg0A"}],"identifier":"extension","label":"Extension","html_id":"extension","implicit":true,"key":"r2eY0lrQBX"},{"type":"code","lang":"ocaml","value":"module ExtendSet(S:Set) = struct\n  include S\n\n  let add_all lst set =\n    let add' s x = S.add x s in\n    List.fold_left add' set lst\nend","position":{"start":{"line":125,"column":1},"end":{"line":133,"column":1}},"key":"Ony7ZDhI0P"},{"type":"heading","depth":4,"position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"children":[{"type":"text","value":"Other than Extension: Testing","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"FktMmsjTRT"}],"identifier":"other-than-extension-testing","label":"Other than Extension: Testing","html_id":"other-than-extension-testing","implicit":true,"key":"ZZ8WAffOR2"},{"type":"code","lang":"ocaml","value":"module SackTester (S: StackSig) = struct\n\tlet _ = assert (S.(empty |> push 1 |> peek) = 1)\nend\n\nmodule MyStackTester = StackTester(MyStack)\nmodule ListStackTester = StackTester(ListStack)","position":{"start":{"line":137,"column":1},"end":{"line":144,"column":1}},"key":"NEOkQF8Db1"},{"type":"paragraph","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"text","value":"The only difference is that because the latter example is about extension, we need to include everything from its parent module.","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"key":"JjyewTkmbP"}],"key":"HEfRNK6nBX"}],"key":"b24S83nWqf"}],"key":"wMHgtnr1IT"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Modules","url":"/2020-02-11-modules","group":"CS3110 Functional Programming"},"next":{"title":"Specifications","url":"/2020-02-18-specifications","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}