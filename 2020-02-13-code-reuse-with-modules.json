{"version":2,"kind":"Article","sha256":"dc5a2b7baadb6be1b6df57899c0d91aeea4a2d3f84ef5986e5c64798a48d8761","slug":"2020-02-13-code-reuse-with-modules","location":"/CS3110/2020-02-13-Code-Reuse-with-Modules.md","dependencies":[],"frontmatter":{"title":"Code Reuse with Modules","tags":["Cornell","20SP","CS3110"],"date":"2020-02-13","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-02-13-Code-Reuse-with-Modules.md","url":"/build/2020-02-13-Code-Reus-1064b3e39a2da194d310af45526dd733.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"xYix6QXzWq"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Code Reuse with Modules","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"xbsoDT4luM"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/modules/reuse.html","key":"AwpBKx8uog"}],"key":"m8uznDbYJY"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"oo1qbHetTN"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Includes","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"QbLBTZ2iSU"}],"identifier":"includes","label":"Includes","html_id":"includes","implicit":true,"key":"hhF3Ld5nwS"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"UKBUqIiASL"}],"key":"yPUrdBvGdx"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"nyCgw6NodD"},{"type":"inlineCode","value":"includes","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"ubh9QpVPUM"},{"type":"text","value":" enables a structure to include all the values defined by another structure, or a signature to include all the names declared by another signature.","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"IW50YO94QD"}],"key":"e7DMs52Hj9"},{"type":"comment","value":"more","key":"IaFUVcH11n"},{"type":"heading","depth":3,"position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"lbJe8s3RZ5"}],"identifier":"syntax","label":"Syntax","html_id":"syntax","implicit":true,"key":"elE7BSlQyu"},{"type":"code","lang":"ocaml","value":"module type SetExtended = sig\n  include Set\n  (*all other definitions specific to SetExtended*)\n  val of_list : 'a list -> 'a t\nend\n\nmodule ListSetDupsExtended = struct\n  include ListSetDups\n  (*all other definitions specific to SetExtended*)\n  let of_list lst = List.fold_right add lst empty\nend","position":{"start":{"line":22,"column":1},"end":{"line":34,"column":1}},"key":"FYaSSXr3oI"},{"type":"heading","depth":3,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Encapsulation","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"t5hu20PsOi"}],"identifier":"encapsulation","label":"Encapsulation","html_id":"encapsulation","implicit":true,"key":"fp3zW4jjAN"},{"type":"code","lang":"ocaml","value":"module ListSetDupsImpl = struct\n  type 'a t   = 'a list\n  let empty   = []\n  let mem     = List.mem\n  let add x s = x::s\n  let elts s  = List.sort_uniq Stdlib.compare s\nend\n\nmodule ListSetDups : Set = ListSetDupsImpl\n\nmodule ListSetDupsExtended = struct\n  include ListSetDupsImpl\n  let of_list lst = lst\nend","position":{"start":{"line":38,"column":1},"end":{"line":53,"column":1}},"key":"Olg9mhpm0O"},{"type":"paragraph","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"The important change is that ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"hmlB1YBvTk"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"pICX4Rz3UW"},{"type":"text","value":" is not sealed, so its type ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"o5G4AWV2VV"},{"type":"inlineCode","value":"'a t","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"rGG6idLXVh"},{"type":"text","value":" is not abstract. Plus, OCaml compiler can infer it is an implementation of ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"nwy6T2XZWG"},{"type":"inlineCode","value":"Set","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"naQE4Ovp7B"},{"type":"text","value":" .When we include it in ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"BDumaLsu5U"},{"type":"inlineCode","value":"ListSetDupsExtended","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"qCV5FlKVpL"},{"type":"text","value":", we can therefore exploit the fact that it’s a synonym for ","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"L7TLTONT5i"},{"type":"inlineCode","value":"'a list","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"n9NO102iMR"},{"type":"text","value":".","position":{"start":{"line":55,"column":1},"end":{"line":55,"column":1}},"key":"wISJlgUllf"}],"key":"rkSsCAVu5q"},{"type":"paragraph","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"children":[{"type":"text","value":"The clients should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"AiLa70IhNl"},{"type":"inlineCode","value":"ListSetDups","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"MCtM0ZiuZm"},{"type":"text","value":", but when we use List to implement other things, we should use ","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"D3ZhEVGngB"},{"type":"inlineCode","value":"ListSetDupsImpl","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"bgEe6j98rw"},{"type":"text","value":" instead.","position":{"start":{"line":57,"column":1},"end":{"line":57,"column":1}},"key":"ASC67vZaCi"}],"key":"n4bhD9xsgA"},{"type":"heading","depth":3,"position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"children":[{"type":"text","value":"Includes vs. Open","position":{"start":{"line":59,"column":1},"end":{"line":59,"column":1}},"key":"oHCVxXiScZ"}],"identifier":"includes-vs-open","label":"Includes vs. Open","html_id":"includes-vs-open","implicit":true,"key":"KHWwR6BOhq"},{"type":"code","lang":"ocaml","value":"module M = struct\n  let x = 0\nend\n\nmodule N = struct\n  include M\n  let y = x + 1\n  let z = 1\nend\n\nmodule O = struct\n  open M\n  let y = x + 1\n  let z = 1\nend\n\n\nmodule M : sig val x : int end\nmodule N : sig val x : int val y : int val z : int end\nmodule O : sig val y : int val z : int end","position":{"start":{"line":61,"column":1},"end":{"line":82,"column":1}},"key":"U73YJnjMgD"},{"type":"paragraph","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"bfJptlJSRb"},{"type":"text","value":" has both an ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"tHrhrxdrek"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"BRZ489HuCx"},{"type":"text","value":" and ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"LyGYbhNzKz"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"D0Na7EFPna"},{"type":"text","value":", whereas ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"KPGW4m7VYE"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"AqztRbUJh4"},{"type":"text","value":" has only a ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"KOPkVdYnCj"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"GDrftZA5Ld"},{"type":"text","value":". The reason is that ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"HcqpFdeBrk"},{"type":"inlineCode","value":"include M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"hkh10jRI9e"},{"type":"text","value":" causes all the definitions of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ZKtV91SlZU"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"NMn5jvHH3l"},{"type":"text","value":" to also be included in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"FH9oes1Idw"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"WcXyGazg9I"},{"type":"text","value":", so the definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"JW27ZJEpn3"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"fXMyuWtkff"},{"type":"text","value":" from ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Fk20ZyvPc7"},{"type":"inlineCode","value":"M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"SLj1zaVCRu"},{"type":"text","value":" is present in ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"FtqoLsSmal"},{"type":"inlineCode","value":"N","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"P2vHxs3eEB"},{"type":"text","value":". But ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ieNXttEPBk"},{"type":"inlineCode","value":"open M","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"q4iZGngwI6"},{"type":"text","value":" only made those definitions available in the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"iWjuVpxGrl"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"scope","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"JS9KbFtptk"}],"key":"bt2p7asTSi"},{"type":"text","value":" of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"lweEWzF4g3"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"oXFLziWadb"},{"type":"text","value":", aka. a part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"muKCQru9mU"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"implementation","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"kLi2mWMnnF"}],"key":"R97Ewo2idV"},{"type":"text","value":"; it doesn’t actually make them part of the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"D9TkDq2tAa"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"structure","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"YbToV85TWo"}],"key":"YdOE1HKPiI"},{"type":"text","value":", aka. the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"Qv9xyoaBFS"},{"type":"emphasis","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"client","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"LudCPw3uVK"}],"key":"ijN61c69KL"},{"type":"text","value":" cannot see them. So ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"PLrK3F5ewZ"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"jJDkhMNKIq"},{"type":"text","value":" does not contain a definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"qtBXdl556S"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"hiSBKszsBT"},{"type":"text","value":", even though ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"NKLSpAE3bv"},{"type":"inlineCode","value":"x","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"apv5E8MPmA"},{"type":"text","value":" is in scope during the evaluation of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"uFvy91VKYe"},{"type":"inlineCode","value":"O","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ZEJ1YegSIZ"},{"type":"text","value":"’s definition of ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"chegxy6tU9"},{"type":"inlineCode","value":"y","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"YpjfOLJqhe"},{"type":"text","value":".","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"WqSsrspegz"}],"key":"J9MiufLIMG"},{"type":"heading","depth":2,"position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"children":[{"type":"text","value":"Functors","position":{"start":{"line":88,"column":1},"end":{"line":88,"column":1}},"key":"vczuXypCXi"}],"identifier":"functors","label":"Functors","html_id":"functors","implicit":true,"key":"xTApAK3z6R"},{"type":"paragraph","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"strong","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"children":[{"type":"text","value":"Def","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"zlEXcyn1m3"}],"key":"wpbGXQl2j9"},{"type":"text","value":": a functor is simply a “function” from structures to structures. It is a parametrized module.","position":{"start":{"line":90,"column":1},"end":{"line":90,"column":1}},"key":"JxoQXFFhRU"}],"key":"o4aB7qVxjj"},{"type":"heading","depth":3,"position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"key":"qMsjmNVClZ"}],"identifier":"syntax","label":"Syntax","html_id":"syntax-1","implicit":true,"key":"EKJqurPtOM"},{"type":"code","lang":"ocaml","value":"module F (M : S) = struct\n  ...\nend\n\n(*annonymous functors*)\nmodule F = functor (M : S) -> struct\n  ...\nend\n\n(*functors parametriezed with multiple modules*)\nmodule F (M1 : S1) ... (Mn : Sn) = struct\n  ...\nend\n\n(* above are the desugared version of the codes above*)\nmodule F = functor (M1 : S1) -> ... -> functor (Mn : Sn) -> struct\n  ...\nend","position":{"start":{"line":94,"column":1},"end":{"line":113,"column":1}},"key":"aUHBdsQtCd"},{"type":"code","lang":"ocaml","value":"module ANewModule = F(OldModule)\nmodule ListSetNoDupsExtended = ExtendSet(ListSetNoDups)","position":{"start":{"line":115,"column":1},"end":{"line":118,"column":1}},"key":"t89yv0S53I"},{"type":"heading","depth":3,"position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"children":[{"type":"text","value":"Application","position":{"start":{"line":120,"column":1},"end":{"line":120,"column":1}},"key":"DLSHOw1e7L"}],"identifier":"application","label":"Application","html_id":"application","implicit":true,"key":"S2LK99OWAm"},{"type":"heading","depth":4,"position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"Extension","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"mj4Qv4NaPr"}],"identifier":"extension","label":"Extension","html_id":"extension","implicit":true,"key":"ccH0Do0Dzw"},{"type":"code","lang":"ocaml","value":"module ExtendSet(S:Set) = struct\n  include S\n\n  let add_all lst set =\n    let add' s x = S.add x s in\n    List.fold_left add' set lst\nend","position":{"start":{"line":125,"column":1},"end":{"line":133,"column":1}},"key":"wiBhsCePVP"},{"type":"heading","depth":4,"position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"children":[{"type":"text","value":"Other than Extension: Testing","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"mLAIUr55me"}],"identifier":"other-than-extension-testing","label":"Other than Extension: Testing","html_id":"other-than-extension-testing","implicit":true,"key":"zBjdh1ZRZU"},{"type":"code","lang":"ocaml","value":"module SackTester (S: StackSig) = struct\n\tlet _ = assert (S.(empty |> push 1 |> peek) = 1)\nend\n\nmodule MyStackTester = StackTester(MyStack)\nmodule ListStackTester = StackTester(ListStack)","position":{"start":{"line":137,"column":1},"end":{"line":144,"column":1}},"key":"fqr9rFZPhr"},{"type":"paragraph","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"children":[{"type":"text","value":"The only difference is that because the latter example is about extension, we need to include everything from its parent module.","position":{"start":{"line":147,"column":1},"end":{"line":147,"column":1}},"key":"ssiXkQf37C"}],"key":"Yw8X6opcOE"}],"key":"FXA4DOHH7V"}],"key":"Yc6Iu9BS81"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Modules","url":"/2020-02-11-modules","group":"C S3110"},"next":{"title":"Specifications","url":"/2020-02-18-specifications","group":"C S3110"}}},"domain":"http://localhost:3000"}