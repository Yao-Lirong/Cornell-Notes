{"version":2,"kind":"Article","sha256":"095b8078d970d4594862d50bdc31a29327d63bee20cefa139063b4b342bc563f","slug":"2020-01-28-functions","location":"/CS3110/2020-01-28-Functions.md","dependencies":[],"frontmatter":{"title":"Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-01-28","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-28-Functions.md","url":"/cornell-notes/build/2020-01-28-Functions-f553c406fb3c19c3ed94894e476d1b06.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"tvMiRpKr6l"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"KHAHHRzrkg"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","key":"xK69NXTvtJ"}],"key":"w4Zr4TRJyH"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"d88CZ7VHla"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"J3mw6fwo1Z"}],"identifier":"functions","label":"Functions","html_id":"functions","implicit":true,"key":"u208qngdUC"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"C7v5Ulk94s"}],"key":"MWsCRfJpCQ"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"i8dS1f8Zsd"},{"type":"inlineCode","value":"let f x1 x2 ... xn = e","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"VgA6axzDDI"},{"type":"text","value":" (f is the function name; xi is input, and there can be multiple inputs; e is the output)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"rFXmUTOJyh"}],"key":"AGqxD45Owj"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"We can think of ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"n6LjfA94GO"},{"type":"inlineCode","value":"t1 -> t2 -> u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"LmmJn7r9zh"},{"type":"text","value":" as the type of a function that takes two inputs, the first of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"dgxwxc7mnr"},{"type":"inlineCode","value":"t1","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"WSxonj5Mib"},{"type":"text","value":" and the second of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"aV8iSD1BQk"},{"type":"inlineCode","value":"t2","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"k4E53zyoOn"},{"type":"text","value":", and returns an output of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"AWmy77apgu"},{"type":"inlineCode","value":"u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"ofTpU6rAcK"},{"type":"text","value":". Likewise for a function that takes ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"UYVsSABf1x"},{"type":"inlineCode","value":"n","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"vTliImt7O3"},{"type":"text","value":" arguments.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"jOvf1y128y"}],"key":"VpY7RtFziy"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"A function is already a value (that’s how you assign the value “function” to a variable name), so there is nothing to be evaluated when we evaluate its dynamic semantic.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"OLa12EHEmG"}],"key":"DSQxBBsEOT"},{"type":"comment","value":"more","key":"qXKLc9dDDL"},{"type":"heading","depth":3,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Anonymous Function","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"w53jMoW9YS"}],"identifier":"anonymous-function","label":"Anonymous Function","html_id":"anonymous-function","implicit":true,"key":"gI289jInVB"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"strong","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"p1lxEQprbr"}],"key":"kIQSus9b7Z"},{"type":"text","value":": ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"EtRt26mHJ9"},{"type":"inlineCode","value":"fun x -> x+1","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"oDMvedetle"},{"type":"text","value":" (","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"fU8aogs7eA"},{"type":"inlineCode","value":"fun","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"h03dIcIr7J"},{"type":"text","value":" is a keyword indicating an anonymous function)","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"WCwT6q0EOD"}],"key":"ayFHJcyUlv"},{"type":"blockquote","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Anonymous functions are also called ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"zGkgVlEfIV"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda expressions","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"r0ua3nnda6"}],"key":"o0ux94Mhlh"},{"type":"text","value":", a term that comes out of the ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"OLqMUeEfi1"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda calculus","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"sqxMxvZrgj"}],"key":"FOLfnfLopr"},{"type":"text","value":", which is a mathematical model of computation in the same sense that Turing machines are a model of computation. In the lambda calculus, ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"MfsEGF2TaO"},{"type":"inlineCode","value":"fun x -> e","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"eOsKBk5Nmr"},{"type":"text","value":" would be written ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"fahHjtsYXp"},{"type":"inlineMath","value":"λx.e.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">λx.e.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">.</span></span></span></span>","key":"y4TUQFABAr"},{"type":"text","value":" The λ denotes an anonymous function.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"gWNPhqNE99"}],"key":"MsNCuQEMZu"}],"key":"I9viWKu8fo"},{"type":"heading","depth":3,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Function Application","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"KGtQMwZjms"}],"identifier":"function-application","label":"Function Application","html_id":"function-application","implicit":true,"key":"zZOLUkYtpQ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":32,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Normal way:","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"ltkPJvDMTc"},{"type":"inlineCode","value":"(fun x -> e3) ((fun x -> e2) e1);;","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"YQWPykKCNh"}],"key":"iMdDxfaxlc"},{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Pipeline: ","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Pgx0mShJZZ"},{"type":"inlineCode","value":"e1 |> fun x->e2 |> fun x->e3;;","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"TmiBoQsaxM"}],"key":"o1dHSdeoVd"}],"key":"Ncfnrz0uUf"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"They are semantically the same as “let expressions” : ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"chNXoCWNxA"},{"type":"inlineCode","value":"let x = e1 in let x = e2 in e3 ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"nvlyvaJdOF"},{"type":"text","value":" (In fact, the let expression is just a syntactic sugar of function application)","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"QmhLdkkQR8"}],"key":"rbe5Zw0OGV"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Function application is left-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"pBn1agesai"},{"type":"inlineCode","value":"g f x = (g f) x","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"CgdbtWCF0d"},{"type":"text","value":", while function types are right-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"vYmHcad6PG"},{"type":"inlineCode","value":"g -> f -> x = g -> (f -> x)","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"ALyyhpxP3N"}],"key":"ZMDddR7b5o"},{"type":"heading","depth":3,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Polymorphic Functions","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"lKZ5wJXQOa"}],"identifier":"polymorphic-functions","label":"Polymorphic Functions","html_id":"polymorphic-functions","implicit":true,"key":"MuW7wFBTaq"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"AEQ4ECuCCD"},{"type":"inlineCode","value":"'a","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"czWaeDPcRc"},{"type":"text","value":" is a ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"d9468Gshb9"},{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"type variable","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"bCVouyVwgV"}],"key":"kVC7iG4Gvm"},{"type":"text","value":": it stands for an unknown type, just like a regular variable stands for an unknown value.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"Y60c9meOJJ"}],"key":"YbNrLM7ycK"},{"type":"heading","depth":3,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Labeled Arguments","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"mmQmoklBes"}],"identifier":"labeled-arguments","label":"Labeled Arguments","html_id":"labeled-arguments","implicit":true,"key":"KnUzGfaAxs"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"OCaml supports labeled arguments to functions. You can declare this kind of function using the following syntax:","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"PQQtHD1cvB"}],"key":"Pm3sOkDNFM"},{"type":"code","lang":"ocaml","value":"# let f ~name1:arg1 ~name2:arg2 = arg1 + arg2;;\nval f : name1:int -> name2:int -> int = <fun>","position":{"start":{"line":47,"column":1},"end":{"line":50,"column":1}},"key":"jR3BmHpqdC"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"This function can be called by passing the labeled arguments in either order:","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"VtnbbXBUOB"}],"key":"XbaXV5ucgs"},{"type":"code","lang":"ocaml","value":"f ~name2:3 ~name1:4;;","position":{"start":{"line":54,"column":1},"end":{"line":56,"column":1}},"key":"A7BFpRJqgY"},{"type":"paragraph","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"A sugar of declaring function with labeled arguments is","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"p1mPYaBYIt"}],"key":"LMMx9zrxly"},{"type":"code","lang":"ocaml","value":"let f ~name1 ~name2 = name1 + name2","position":{"start":{"line":60,"column":1},"end":{"line":62,"column":1}},"key":"HNfjscWzBH"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Partial Application","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"OGxF2dw3nO"}],"identifier":"partial-application","label":"Partial Application","html_id":"partial-application","implicit":true,"key":"x2UIhCULMp"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"A function of two variables: ","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"BKSaF16Mml"},{"type":"inlineCode","value":"let add x y = x + y","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"JOTxsVsiyU"}],"key":"vsmWoFPyHw"},{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"A composite function: ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"NOPDGHqBqA"},{"type":"inlineCode","value":"let addx x = fun y -> x + y","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"IDDkAza2TU"}],"key":"J1tbR7QC29"},{"type":"thematicBreak","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"S6YrS3RoRq"},{"type":"code","lang":"ocaml","value":"let add x y = x+y\nlet add x = fun y -> x+y\nlet add = fun x -> (fun y -> x+y)","position":{"start":{"line":71,"column":1},"end":{"line":75,"column":1}},"key":"XTreG9w4or"},{"type":"paragraph","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"text","value":"The top two are just syntactic sugar for the last statement. Now, think about what does the last line mean? Does the ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"BrmW396dHB"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"HUCqAuYb9F"},{"type":"text","value":" actually knows that there exists an ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"oqNXYKoqDz"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"V2KYkX7tej"},{"type":"text","value":"? The answer is yes. That’s because the statement ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"KRWdpOo8jL"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"UXKbTIvoae"},{"type":"text","value":" is in the scope of ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"aP8mGIkSKc"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"O5kVKqHBl3"},{"type":"text","value":"’s declaration.","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"GXsiHVlW59"}],"key":"EZt0vK9y9y"},{"type":"thematicBreak","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"key":"J7v1L3Yfjs"},{"type":"paragraph","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"For the codes below, the outermost function actually takes in a value of type t1 and produces a ","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"oRg1IpVUh8"},{"type":"strong","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"function","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"r6kMY86mrj"}],"key":"FeT8VHrYbF"},{"type":"text","value":" that is of type t2 -> (t3 -> t4)","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"aCuMO5TTjH"}],"key":"yirFh901dQ"},{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"And the type of such a function","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"wjelDP25KW"}],"key":"Z6ITuDKG4t"},{"type":"code","lang":"ocaml","value":"t1 -> t2 -> t3 -> t4","position":{"start":{"line":85,"column":1},"end":{"line":87,"column":1}},"key":"c1DBeSLT0Z"},{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"really means the same as","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"ogVKAI2Wi5"}],"key":"Y15Bs3lc5a"},{"type":"code","lang":"ocaml","value":"t1 -> (t2 -> (t3 -> t4))","position":{"start":{"line":91,"column":1},"end":{"line":93,"column":1}},"key":"odaYzbzK8b"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"That is, function types are ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"t2I5iaV3fU"},{"type":"strong","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"right associative","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"sGl4L9FRZq"}],"key":"DuXMO9oOo4"},{"type":"text","value":": there are implicit parentheses around function types, from right to left. The intuition here is that a function takes a single argument and returns a new function that expects the remaining arguments.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"wcgLJ9UzXi"}],"key":"HYzNPVCjk9"},{"type":"thematicBreak","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"rCpedjhHSR"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"Below is an example of Partial Application: The bottom two are syntactic sugars of the first statement","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"nQ1O9jNLIC"}],"key":"Oix4f3VsiL"},{"type":"code","lang":"ocaml","value":"let comp = fun f g -> fun x -> g(f x);;\nlet compa f g = fun x -> g(f x);;\nlet compb f g x = g(f x);;","position":{"start":{"line":101,"column":1},"end":{"line":105,"column":1}},"key":"Uq3o2VU0X9"},{"type":"paragraph","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"children":[{"type":"text","value":"Applying ","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"BH4L5aSoHZ"},{"type":"inlineCode","value":"comp","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"hyrc8l29J9"},{"type":"text","value":" to other functions:","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"vu2YRhAKBE"}],"key":"gZ0fL7wvrp"},{"type":"code","lang":"ocaml","value":"utop # let inc x = x+1;;\nval inc : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # let inc2 = comp inc inc;;\nval inc2 : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # inc 1;;\n- : int = 2\n────────────────────────────────────────────────────────\nutop # inc2 1;;\n- : int = 3","position":{"start":{"line":109,"column":1},"end":{"line":121,"column":1}},"key":"to3ty57pT0"},{"type":"paragraph","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"A useful application of Partial Application is precomputation: When we want to use a process multiple times, we can just write a function that takes in other function and do that job. g. predefine ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"I09PjgBcbx"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"PS2MMX2Ao4"},{"type":"text","value":" so that when we want to composite two functions, we only need to apply it to the function ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"Mp6IEPFP2n"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"T8XyKNxIgd"},{"type":"text","value":" instead of writing out the composite function on ourselves every time.","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"zZhJb1lImt"}],"key":"Oky7ySmR32"},{"type":"heading","depth":3,"position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"text","value":"Unit Function","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"LfxRbmj7il"}],"identifier":"unit-function","label":"Unit Function","html_id":"unit-function","implicit":true,"key":"WGFaLO0Iz4"},{"type":"paragraph","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"children":[{"type":"text","value":"There is only one value of this type, which is written ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"fnFwxrawIs"},{"type":"inlineCode","value":"()","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"xFGPofDM1K"},{"type":"text","value":" and is also pronounced “unit”. So ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"uiaLqYB9B1"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"rB2jSHiXMD"},{"type":"text","value":" is like ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"I3ZrSqkdvK"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"FLVng1YTWr"},{"type":"text","value":", except there is one fewer value of type ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"E9cKPM4CH8"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"ESSyBIlYu1"},{"type":"text","value":" than there is of ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"Ep3JHl8u7y"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"L2237NsQw4"},{"type":"text","value":". Unit is therefore used when you need to take an argument or return a value, but there’s no interesting value to pass or return.","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"iXAwSLevvM"}],"key":"rgn707inTu"},{"type":"heading","depth":3,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"text","value":"Type Inference","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"M0Pg4qLqDy"}],"identifier":"type-inference","label":"Type Inference","html_id":"type-inference","implicit":true,"key":"uEFYGrCne7"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"How to determine the type of a very complicated function?","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"j0RkSjlRd0"}],"key":"VdHPseCmki"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":133,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Add right-associative parameters; Rewrite the function as a more understandable ","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"QPMf9PGr78"},{"type":"inlineCode","value":"let expression","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"lTTIWto1ex"}],"key":"PRxf4ypaaL"},{"type":"listItem","spread":true,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Find out which variables have to take in a value (then it must be a function), which doesn’t (then it can be anything)","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"AIIUJcX2jV"}],"key":"AT8i5RxJfG"},{"type":"listItem","spread":true,"position":{"start":{"line":135,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"Determine the type of each variable from the last statement, and write their types from left to right in the sequence they were taken in.","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"jmN0uTFCYg"}],"key":"qbTDspyLKa"}],"key":"bySQeMAXFR"},{"type":"paragraph","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"mEHiY1RmdR"},{"type":"inlineCode","value":"fun f g -> fun x -> g(f x)","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"C7GEFzClmv"},{"type":"text","value":" as an example:","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"nNpHbSQifH"}],"key":"a2dd8VOqnV"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":139,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":139,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> ( fun x -> g(f x) )","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"fWenetVT4p"}],"key":"MRk8IkKHwE"}],"key":"KucM9X5HuZ"},{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"Zokm5QteyI"}],"key":"LTnZS5F0j4"},{"type":"listItem","spread":true,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"f takes in x, so f must be a function of type a’ -> b’","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"ZqWbtk5moK"}],"key":"NUqsk0QGUm"},{"type":"listItem","spread":true,"position":{"start":{"line":143,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"text","value":"g takes in the output of f, so g must be a function of type b’ -> c’","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"XGLOSsWRwh"}],"key":"OJ9WVGC56u"}],"key":"RM4rR1wokR"}],"key":"XckK2x0UAY"},{"type":"listItem","spread":true,"position":{"start":{"line":145,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"QHAxBQNeKZ"}],"key":"dePkmMEHmX"},{"type":"code","lang":"ocaml","value":"\tf\t\t\t  g\t\t\tx\t(output:g(f x))\n(a' -> b') -> (b' -> c') -> a' -> c'","position":{"start":{"line":147,"column":1},"end":{"line":150,"column":1}},"key":"nylUlMKhp7"}],"key":"XMmMR4dLK8"}],"key":"FW9LVlZQDH"},{"type":"paragraph","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"CYBtPBD3lS"},{"type":"inlineCode","value":"fun f g -> fun x -> (g f) x","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"fNG1YWrXMF"},{"type":"text","value":" as another example:","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"SbLomouqbP"}],"key":"a7II28v8DX"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":154,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> (fun x -> (g f) x)","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"key":"iIotutmFz6"}],"key":"pVadeLP1kw"}],"key":"lQGW6QvcKq"},{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"key":"sswQ7Uokrg"}],"key":"hlJ7wYceO6"},{"type":"listItem","spread":true,"position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"f doesn’t take in a value, so f is a variable of type b’","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"W6N8Z4Itv1"}],"key":"vDIXCBJbVR"},{"type":"listItem","spread":true,"position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"g takes in f, so g must be a function whose input is of type b’; plus its output takes in another variable x, so its output is also a function, which takes in a type a’. Therefore, g is of type ","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"u6g6SFUKSs"},{"type":"inlineCode","value":"b' -> (a' -> c')","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"VCPYNaGMrY"}],"key":"sYZzROv99g"}],"key":"wXB6BSUVGs"}],"key":"jynNMHwG7j"},{"type":"listItem","spread":true,"position":{"start":{"line":158,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"key":"odOph55Fcc"}],"key":"wL1rHp5THI"},{"type":"code","lang":"ocaml","value":"f \t\t\tg\t\t\t  x  (output:(g f) x)\nb' -> (b' -> a' -> c') -> a' -> c'","position":{"start":{"line":160,"column":1},"end":{"line":163,"column":1}},"key":"g9uICrlVxX"}],"key":"rjpsDc6J6C"}],"key":"K5S4zqUDhA"}],"key":"iKK6RHCi1n"}],"key":"p5rk8LcIRg"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Problem Analysis","url":"/2019-12-05-problem-analysis","group":"C S2112"},"next":{"title":"Standard Data Types","url":"/2020-01-30-standard-data-types","group":"C S3110"}}},"domain":"http://localhost:3000"}