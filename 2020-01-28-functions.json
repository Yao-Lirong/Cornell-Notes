{"version":2,"kind":"Article","sha256":"095b8078d970d4594862d50bdc31a29327d63bee20cefa139063b4b342bc563f","slug":"2020-01-28-functions","location":"/CS3110/2020-01-28-Functions.md","dependencies":[],"frontmatter":{"title":"Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-01-28","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-28-Functions.md","url":"/cornell-notes/build/2020-01-28-Functions-362689428110677216abba030125e68e.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"VukQn2mBfz"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"KBfNX8bdFw"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","key":"dMDl4Sa9m7"}],"key":"v9P8a8XsVI"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"z7hsdeDa8j"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"JbUXQOdiBK"}],"identifier":"functions","label":"Functions","html_id":"functions","implicit":true,"key":"d2cQ2fo1Hh"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"yfDGTpM8gM"}],"key":"b4TctWHZFC"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"SlpJLiDeY1"},{"type":"inlineCode","value":"let f x1 x2 ... xn = e","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"WicvW149Vk"},{"type":"text","value":" (f is the function name; xi is input, and there can be multiple inputs; e is the output)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"rif9cbAlAK"}],"key":"BSGXXhubZu"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"We can think of ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"EJrSfI2zOK"},{"type":"inlineCode","value":"t1 -> t2 -> u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"seM9HM7qqj"},{"type":"text","value":" as the type of a function that takes two inputs, the first of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"S7oCN2tP8G"},{"type":"inlineCode","value":"t1","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Q3FjuPdykt"},{"type":"text","value":" and the second of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"QI2zqRV0zY"},{"type":"inlineCode","value":"t2","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"J92iPZqBlc"},{"type":"text","value":", and returns an output of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Es4Okn3Wnu"},{"type":"inlineCode","value":"u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"cbMJ7HAqM8"},{"type":"text","value":". Likewise for a function that takes ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"QoHwibPF0D"},{"type":"inlineCode","value":"n","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"tW602Rwg1c"},{"type":"text","value":" arguments.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"WpKwZGMSwJ"}],"key":"IT7pplnjT2"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"A function is already a value (that’s how you assign the value “function” to a variable name), so there is nothing to be evaluated when we evaluate its dynamic semantic.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"j8N4qLkMhS"}],"key":"JyPI7sluUq"},{"type":"comment","value":"more","key":"QU5sxVR286"},{"type":"heading","depth":3,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Anonymous Function","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"nnRhdOYiBp"}],"identifier":"anonymous-function","label":"Anonymous Function","html_id":"anonymous-function","implicit":true,"key":"oC13310gkw"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"strong","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"fZjKDtsbPw"}],"key":"LkQcY2n5h9"},{"type":"text","value":": ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"J9asqVVCCH"},{"type":"inlineCode","value":"fun x -> x+1","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"IVqacnsuoh"},{"type":"text","value":" (","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"SCIMS3rjhU"},{"type":"inlineCode","value":"fun","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"xBzkcvgeip"},{"type":"text","value":" is a keyword indicating an anonymous function)","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"gKiZI59BzP"}],"key":"a8t8lfsU6o"},{"type":"blockquote","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Anonymous functions are also called ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"teQXTcKdBg"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda expressions","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"Yj0SO5B7fy"}],"key":"NbVeoGxQn7"},{"type":"text","value":", a term that comes out of the ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"eFySY4UheZ"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda calculus","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"g6o1DUbg33"}],"key":"oDkQJVJWYz"},{"type":"text","value":", which is a mathematical model of computation in the same sense that Turing machines are a model of computation. In the lambda calculus, ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"U9DbLuwbok"},{"type":"inlineCode","value":"fun x -> e","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"QQmffVK9ez"},{"type":"text","value":" would be written ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"fLFpU2hud9"},{"type":"inlineMath","value":"λx.e.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">λx.e.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">.</span></span></span></span>","key":"SruDBA5QfO"},{"type":"text","value":" The λ denotes an anonymous function.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"Trv6E6RZxa"}],"key":"yn9JChyT0Y"}],"key":"g8QBlXBu08"},{"type":"heading","depth":3,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Function Application","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"JIPEeR7PuA"}],"identifier":"function-application","label":"Function Application","html_id":"function-application","implicit":true,"key":"vvHTUDuLxJ"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":32,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Normal way:","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"NdWtASoyjM"},{"type":"inlineCode","value":"(fun x -> e3) ((fun x -> e2) e1);;","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"YfAMQHBQqJ"}],"key":"ujtnpOEYGM"},{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Pipeline: ","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"bLRkHm2oRV"},{"type":"inlineCode","value":"e1 |> fun x->e2 |> fun x->e3;;","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"tDDIktQ3XP"}],"key":"ahldXMXBc7"}],"key":"K2lIrdnNr9"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"They are semantically the same as “let expressions” : ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"L4XE7Iwh9k"},{"type":"inlineCode","value":"let x = e1 in let x = e2 in e3 ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"IYIXdAwQsj"},{"type":"text","value":" (In fact, the let expression is just a syntactic sugar of function application)","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"ALZpIoikW0"}],"key":"snRuMYPloS"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Function application is left-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"I8okM184tY"},{"type":"inlineCode","value":"g f x = (g f) x","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"B5RlhXtF10"},{"type":"text","value":", while function types are right-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"I8KhIs3Asd"},{"type":"inlineCode","value":"g -> f -> x = g -> (f -> x)","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"HlILh3YeMj"}],"key":"Mf6s4liP6c"},{"type":"heading","depth":3,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Polymorphic Functions","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"HYVONfFSWS"}],"identifier":"polymorphic-functions","label":"Polymorphic Functions","html_id":"polymorphic-functions","implicit":true,"key":"PKVc6WIwyZ"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"wVWxa79WyF"},{"type":"inlineCode","value":"'a","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"JKC0jlDgQz"},{"type":"text","value":" is a ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"sTXvyMK0g4"},{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"type variable","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"pZW8gK2Kcy"}],"key":"fOergjQGgY"},{"type":"text","value":": it stands for an unknown type, just like a regular variable stands for an unknown value.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"lT0uwgR4UW"}],"key":"jXy4L49KK5"},{"type":"heading","depth":3,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Labeled Arguments","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"ggAp0Of4qE"}],"identifier":"labeled-arguments","label":"Labeled Arguments","html_id":"labeled-arguments","implicit":true,"key":"nwweSEhTvD"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"OCaml supports labeled arguments to functions. You can declare this kind of function using the following syntax:","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"EPHuDA92G6"}],"key":"FTO9Y0E6uN"},{"type":"code","lang":"ocaml","value":"# let f ~name1:arg1 ~name2:arg2 = arg1 + arg2;;\nval f : name1:int -> name2:int -> int = <fun>","position":{"start":{"line":47,"column":1},"end":{"line":50,"column":1}},"key":"SBEVHIMvdR"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"This function can be called by passing the labeled arguments in either order:","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"C4bvvGGRN0"}],"key":"wcIpDj1ySf"},{"type":"code","lang":"ocaml","value":"f ~name2:3 ~name1:4;;","position":{"start":{"line":54,"column":1},"end":{"line":56,"column":1}},"key":"FHaCqLbzp6"},{"type":"paragraph","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"A sugar of declaring function with labeled arguments is","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"JEVdY4nyIL"}],"key":"cXnS4jfipk"},{"type":"code","lang":"ocaml","value":"let f ~name1 ~name2 = name1 + name2","position":{"start":{"line":60,"column":1},"end":{"line":62,"column":1}},"key":"PoFq9t2z6t"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Partial Application","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"X60IWZxg25"}],"identifier":"partial-application","label":"Partial Application","html_id":"partial-application","implicit":true,"key":"KYUPXtkAZ9"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"A function of two variables: ","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"yY03VYGxTQ"},{"type":"inlineCode","value":"let add x y = x + y","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"K89i46RsfR"}],"key":"qJD7SKbaT3"},{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"A composite function: ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"hswqCSuLcN"},{"type":"inlineCode","value":"let addx x = fun y -> x + y","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"GwwThYkBIX"}],"key":"UJKckkj0FE"},{"type":"thematicBreak","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"FGK1zl3VIN"},{"type":"code","lang":"ocaml","value":"let add x y = x+y\nlet add x = fun y -> x+y\nlet add = fun x -> (fun y -> x+y)","position":{"start":{"line":71,"column":1},"end":{"line":75,"column":1}},"key":"LRxjcCdgUR"},{"type":"paragraph","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"text","value":"The top two are just syntactic sugar for the last statement. Now, think about what does the last line mean? Does the ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"BUrsk9KDFm"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"m0xqzPyoXC"},{"type":"text","value":" actually knows that there exists an ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"WYBiOOgyC3"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"UhzSING6X4"},{"type":"text","value":"? The answer is yes. That’s because the statement ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"ruIxHjQmUB"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"I0jC4uTZnJ"},{"type":"text","value":" is in the scope of ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"LXLaIQl0Px"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"roANLtcrpC"},{"type":"text","value":"’s declaration.","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"RFcw4gWDfX"}],"key":"UZAdaGvAYr"},{"type":"thematicBreak","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"key":"cXgGCWVjPh"},{"type":"paragraph","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"For the codes below, the outermost function actually takes in a value of type t1 and produces a ","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"VWZhU1J9ec"},{"type":"strong","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"function","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"iFQ5nZtD7i"}],"key":"EhuY1oeuHz"},{"type":"text","value":" that is of type t2 -> (t3 -> t4)","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"uKzYU9gm8Q"}],"key":"nGZZM6ttxa"},{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"And the type of such a function","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"EGnn41Ucl7"}],"key":"t8UHRsRBZw"},{"type":"code","lang":"ocaml","value":"t1 -> t2 -> t3 -> t4","position":{"start":{"line":85,"column":1},"end":{"line":87,"column":1}},"key":"l01pWo7VVw"},{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"really means the same as","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"rkfhfFg0Sn"}],"key":"nLvFaNTaIY"},{"type":"code","lang":"ocaml","value":"t1 -> (t2 -> (t3 -> t4))","position":{"start":{"line":91,"column":1},"end":{"line":93,"column":1}},"key":"ceQxW4Ke56"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"That is, function types are ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"XKSBt0FvKi"},{"type":"strong","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"right associative","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"Rrc7FaeMyR"}],"key":"Plqcm1oef8"},{"type":"text","value":": there are implicit parentheses around function types, from right to left. The intuition here is that a function takes a single argument and returns a new function that expects the remaining arguments.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"pnlpXAFDWb"}],"key":"rCd6YBZVkl"},{"type":"thematicBreak","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"VPOrCzGqyL"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"Below is an example of Partial Application: The bottom two are syntactic sugars of the first statement","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"KqRUC9KgAK"}],"key":"bYvUi5y2fE"},{"type":"code","lang":"ocaml","value":"let comp = fun f g -> fun x -> g(f x);;\nlet compa f g = fun x -> g(f x);;\nlet compb f g x = g(f x);;","position":{"start":{"line":101,"column":1},"end":{"line":105,"column":1}},"key":"hzfq0uvRHS"},{"type":"paragraph","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"children":[{"type":"text","value":"Applying ","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"lIrH5HxMVG"},{"type":"inlineCode","value":"comp","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"ckavZNQiVb"},{"type":"text","value":" to other functions:","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"RgafMekEO0"}],"key":"cVFtX9BMK7"},{"type":"code","lang":"ocaml","value":"utop # let inc x = x+1;;\nval inc : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # let inc2 = comp inc inc;;\nval inc2 : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # inc 1;;\n- : int = 2\n────────────────────────────────────────────────────────\nutop # inc2 1;;\n- : int = 3","position":{"start":{"line":109,"column":1},"end":{"line":121,"column":1}},"key":"wuPqgjjIRt"},{"type":"paragraph","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"A useful application of Partial Application is precomputation: When we want to use a process multiple times, we can just write a function that takes in other function and do that job. g. predefine ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"cw1zttskVT"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"d0zKk33TDZ"},{"type":"text","value":" so that when we want to composite two functions, we only need to apply it to the function ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"ZOI0mU1Bkk"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"gsDgwim9S1"},{"type":"text","value":" instead of writing out the composite function on ourselves every time.","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"GvCvd0MkNY"}],"key":"YYdrteSLJk"},{"type":"heading","depth":3,"position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"text","value":"Unit Function","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"kc1vPIBqnb"}],"identifier":"unit-function","label":"Unit Function","html_id":"unit-function","implicit":true,"key":"ekspahWBAe"},{"type":"paragraph","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"children":[{"type":"text","value":"There is only one value of this type, which is written ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"WnWAXvSBu1"},{"type":"inlineCode","value":"()","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"Icma93MZGY"},{"type":"text","value":" and is also pronounced “unit”. So ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"W38HCodvnI"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"wJHzPJDKZw"},{"type":"text","value":" is like ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"wG0pFsw9Q7"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"bDk9evqPZA"},{"type":"text","value":", except there is one fewer value of type ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"Q0y9t7EUh9"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"JcLgfTSKNJ"},{"type":"text","value":" than there is of ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"UPUBTt1Anb"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"JKrqCySU0P"},{"type":"text","value":". Unit is therefore used when you need to take an argument or return a value, but there’s no interesting value to pass or return.","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"iKYaz7TzvB"}],"key":"Nem10Vzmxn"},{"type":"heading","depth":3,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"text","value":"Type Inference","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"jVsfEVqdCz"}],"identifier":"type-inference","label":"Type Inference","html_id":"type-inference","implicit":true,"key":"IkpFHBw8Z7"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"How to determine the type of a very complicated function?","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"GfQTKWY3TG"}],"key":"JJQ2sWQfJB"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":133,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Add right-associative parameters; Rewrite the function as a more understandable ","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"FdWUos237F"},{"type":"inlineCode","value":"let expression","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"WuBTH14hSn"}],"key":"YxWhb0LJii"},{"type":"listItem","spread":true,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Find out which variables have to take in a value (then it must be a function), which doesn’t (then it can be anything)","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"vLTUaWUp1n"}],"key":"Y80YpxVfNF"},{"type":"listItem","spread":true,"position":{"start":{"line":135,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"Determine the type of each variable from the last statement, and write their types from left to right in the sequence they were taken in.","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"ykmRG4W4zI"}],"key":"c41MbX6aPR"}],"key":"qneSHSemj0"},{"type":"paragraph","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"VFpkT5DKsN"},{"type":"inlineCode","value":"fun f g -> fun x -> g(f x)","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"XgrZ2Tr2tH"},{"type":"text","value":" as an example:","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"OvMiCE5fs0"}],"key":"g22Td9gglL"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":139,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":139,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> ( fun x -> g(f x) )","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"m4MbOOzvzJ"}],"key":"AeAUGIKUOn"}],"key":"hW8oLPYmaq"},{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"UY4lVHJWob"}],"key":"p3oj5b4XGT"},{"type":"listItem","spread":true,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"f takes in x, so f must be a function of type a’ -> b’","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"uHFfg8BpWs"}],"key":"IONmIetmiz"},{"type":"listItem","spread":true,"position":{"start":{"line":143,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"text","value":"g takes in the output of f, so g must be a function of type b’ -> c’","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"Za0Qnwb8Zp"}],"key":"s5nWsQnMWf"}],"key":"VaiKH3uIqD"}],"key":"sbArXvEipI"},{"type":"listItem","spread":true,"position":{"start":{"line":145,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"TZlz9KuYyi"}],"key":"dnfbStD7Tg"},{"type":"code","lang":"ocaml","value":"\tf\t\t\t  g\t\t\tx\t(output:g(f x))\n(a' -> b') -> (b' -> c') -> a' -> c'","position":{"start":{"line":147,"column":1},"end":{"line":150,"column":1}},"key":"SBJ65jMEmY"}],"key":"hzJZy0a0dL"}],"key":"aQeru50twL"},{"type":"paragraph","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"yzDGd67NrI"},{"type":"inlineCode","value":"fun f g -> fun x -> (g f) x","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"Dk2uJDHgl1"},{"type":"text","value":" as another example:","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"AHKT8w9TW8"}],"key":"ar3dxu6iji"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":154,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> (fun x -> (g f) x)","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"key":"U0pvlUb7Uj"}],"key":"RctIXBuJoA"}],"key":"DJQYDno9nw"},{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"key":"f5UrOS5dM2"}],"key":"Pi3cNkXcjZ"},{"type":"listItem","spread":true,"position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"f doesn’t take in a value, so f is a variable of type b’","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"U7QwdfHRKp"}],"key":"ylpQvJpfcn"},{"type":"listItem","spread":true,"position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"g takes in f, so g must be a function whose input is of type b’; plus its output takes in another variable x, so its output is also a function, which takes in a type a’. Therefore, g is of type ","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"vQNHRmwVOp"},{"type":"inlineCode","value":"b' -> (a' -> c')","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"Vv5zxJRCAl"}],"key":"KpxsLPz4lw"}],"key":"Xckspa4MAz"}],"key":"cWdxKkUGFG"},{"type":"listItem","spread":true,"position":{"start":{"line":158,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"key":"Q4W0oDgGCb"}],"key":"TfDjCQoSKk"},{"type":"code","lang":"ocaml","value":"f \t\t\tg\t\t\t  x  (output:(g f) x)\nb' -> (b' -> a' -> c') -> a' -> c'","position":{"start":{"line":160,"column":1},"end":{"line":163,"column":1}},"key":"b7dEI2dMsM"}],"key":"ida29nwRbU"}],"key":"lFdXpc3v0D"}],"key":"rCj46EuIMO"}],"key":"KCaJttLNpl"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Problem Analysis","url":"/2019-12-05-problem-analysis","group":"CS2112 Object-Oriented Design (Honors)"},"next":{"title":"Standard Data Types","url":"/2020-01-30-standard-data-types","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}