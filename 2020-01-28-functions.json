{"version":2,"kind":"Article","sha256":"095b8078d970d4594862d50bdc31a29327d63bee20cefa139063b4b342bc563f","slug":"2020-01-28-functions","location":"/CS3110/2020-01-28-Functions.md","dependencies":[],"frontmatter":{"title":"Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-01-28","numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-28-Functions.md","url":"/build/2020-01-28-Functions-f553c406fb3c19c3ed94894e476d1b06.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"pl2LnsYf3b"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"rwYVQ3706P"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","key":"abYIz5nZ11"}],"key":"KkuSBh4LU6"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"hWUTsOA223"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"wja1FBUnZQ"}],"identifier":"functions","label":"Functions","html_id":"functions","implicit":true,"key":"VvJyc4onqz"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"SNS5jHbLtl"}],"key":"UycBd8IWBj"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"r2Oj0D4QqT"},{"type":"inlineCode","value":"let f x1 x2 ... xn = e","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"VOOCAKyedJ"},{"type":"text","value":" (f is the function name; xi is input, and there can be multiple inputs; e is the output)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"fcPtp1Vx8n"}],"key":"saGqtNGToE"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"We can think of ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"aA949hyafV"},{"type":"inlineCode","value":"t1 -> t2 -> u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"NaWTNzcORc"},{"type":"text","value":" as the type of a function that takes two inputs, the first of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"ZWKFD1ronC"},{"type":"inlineCode","value":"t1","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"dWUFKB5D2d"},{"type":"text","value":" and the second of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"zVH16rELr7"},{"type":"inlineCode","value":"t2","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"cTHLkwx01L"},{"type":"text","value":", and returns an output of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"y1skwSViu1"},{"type":"inlineCode","value":"u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"av6MnTsSQ1"},{"type":"text","value":". Likewise for a function that takes ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"AMfGdJFJml"},{"type":"inlineCode","value":"n","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"aS3RA6wSN1"},{"type":"text","value":" arguments.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"JMx7Ejxeog"}],"key":"UkeEyVirHu"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"A function is already a value (that’s how you assign the value “function” to a variable name), so there is nothing to be evaluated when we evaluate its dynamic semantic.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"wYXXhYLoLR"}],"key":"ZO0ZOb7DyO"},{"type":"comment","value":"more","key":"wP6urjYxC4"},{"type":"heading","depth":3,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Anonymous Function","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"oAXaMp2iip"}],"identifier":"anonymous-function","label":"Anonymous Function","html_id":"anonymous-function","implicit":true,"key":"f1hDqlvhvT"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"strong","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"uoL46AXh68"}],"key":"nh6VPC0qaL"},{"type":"text","value":": ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"nQXIvsoMAK"},{"type":"inlineCode","value":"fun x -> x+1","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"FTnjqPT6lb"},{"type":"text","value":" (","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"Ow6DcIoTJ1"},{"type":"inlineCode","value":"fun","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"EE3qRg4tK6"},{"type":"text","value":" is a keyword indicating an anonymous function)","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"w6DWUS7y4z"}],"key":"oUDKertMpO"},{"type":"blockquote","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Anonymous functions are also called ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"juG1EDpY0S"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda expressions","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"ZNLeYtfpL4"}],"key":"O6hR28ZcFF"},{"type":"text","value":", a term that comes out of the ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"BADYzCH4UU"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda calculus","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"ncry86DBMc"}],"key":"K4JmJM9v64"},{"type":"text","value":", which is a mathematical model of computation in the same sense that Turing machines are a model of computation. In the lambda calculus, ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"AKkCXlRHeB"},{"type":"inlineCode","value":"fun x -> e","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"Ng1eDM87wq"},{"type":"text","value":" would be written ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"OjKgJNtdxk"},{"type":"inlineMath","value":"λx.e.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">λx.e.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">.</span></span></span></span>","key":"n1sFukSxuj"},{"type":"text","value":" The λ denotes an anonymous function.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"IrbhrCaUNP"}],"key":"iuRAnRy3iy"}],"key":"Kwujs9G0Tp"},{"type":"heading","depth":3,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Function Application","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"ZHvwXHH4Ua"}],"identifier":"function-application","label":"Function Application","html_id":"function-application","implicit":true,"key":"ZYPN7Cj9xq"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":32,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Normal way:","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"obtmTwDLOg"},{"type":"inlineCode","value":"(fun x -> e3) ((fun x -> e2) e1);;","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"PphEFKMliY"}],"key":"uvhOq8gkSX"},{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Pipeline: ","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"gXY9VsLyt7"},{"type":"inlineCode","value":"e1 |> fun x->e2 |> fun x->e3;;","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"jKluf268VV"}],"key":"LgKoWGhBCf"}],"key":"l4DqL27ryq"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"They are semantically the same as “let expressions” : ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"roha2eJzhp"},{"type":"inlineCode","value":"let x = e1 in let x = e2 in e3 ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"TqtYqHNMzC"},{"type":"text","value":" (In fact, the let expression is just a syntactic sugar of function application)","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"Wlc5v4WWXn"}],"key":"J9astfrN0d"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Function application is left-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"uSDr0lS0Jj"},{"type":"inlineCode","value":"g f x = (g f) x","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"w2kOIkvhqu"},{"type":"text","value":", while function types are right-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"Pq7Hpa8Chb"},{"type":"inlineCode","value":"g -> f -> x = g -> (f -> x)","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"vZe71OIdEv"}],"key":"lxaWvMCB14"},{"type":"heading","depth":3,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Polymorphic Functions","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"W9v7sIH6FD"}],"identifier":"polymorphic-functions","label":"Polymorphic Functions","html_id":"polymorphic-functions","implicit":true,"key":"DPrDwgGhqM"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"DZgsgm1WU7"},{"type":"inlineCode","value":"'a","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"MTEKOCSc1s"},{"type":"text","value":" is a ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"zkijeMc7hD"},{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"type variable","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"Tkf6stI4Kp"}],"key":"dgtn2NZ2Cc"},{"type":"text","value":": it stands for an unknown type, just like a regular variable stands for an unknown value.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"Ib1xkq6N0k"}],"key":"dqdjMNAOay"},{"type":"heading","depth":3,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Labeled Arguments","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"AP7vGlZxBj"}],"identifier":"labeled-arguments","label":"Labeled Arguments","html_id":"labeled-arguments","implicit":true,"key":"bpgnvkzbIL"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"OCaml supports labeled arguments to functions. You can declare this kind of function using the following syntax:","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"P8aYAEHdhv"}],"key":"I26sSzvqAg"},{"type":"code","lang":"ocaml","value":"# let f ~name1:arg1 ~name2:arg2 = arg1 + arg2;;\nval f : name1:int -> name2:int -> int = <fun>","position":{"start":{"line":47,"column":1},"end":{"line":50,"column":1}},"key":"tdaw5L0NlQ"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"This function can be called by passing the labeled arguments in either order:","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"jknHB4DYVx"}],"key":"VOkuYFCXLg"},{"type":"code","lang":"ocaml","value":"f ~name2:3 ~name1:4;;","position":{"start":{"line":54,"column":1},"end":{"line":56,"column":1}},"key":"Smi5Xq4MSB"},{"type":"paragraph","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"A sugar of declaring function with labeled arguments is","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"uEEaOFRsIY"}],"key":"DKnZtv1E7X"},{"type":"code","lang":"ocaml","value":"let f ~name1 ~name2 = name1 + name2","position":{"start":{"line":60,"column":1},"end":{"line":62,"column":1}},"key":"zCm9SYKfiN"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Partial Application","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"N6kxJUdido"}],"identifier":"partial-application","label":"Partial Application","html_id":"partial-application","implicit":true,"key":"QtlyxwSyrn"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"A function of two variables: ","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"tyThkW7YFX"},{"type":"inlineCode","value":"let add x y = x + y","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"KTsXrmJOXl"}],"key":"jr4BislJeu"},{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"A composite function: ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"SSXLYrQqQj"},{"type":"inlineCode","value":"let addx x = fun y -> x + y","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"QF4Wdex87e"}],"key":"eFCylUKMuk"},{"type":"thematicBreak","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"NdKooana2O"},{"type":"code","lang":"ocaml","value":"let add x y = x+y\nlet add x = fun y -> x+y\nlet add = fun x -> (fun y -> x+y)","position":{"start":{"line":71,"column":1},"end":{"line":75,"column":1}},"key":"iXZvybsIof"},{"type":"paragraph","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"text","value":"The top two are just syntactic sugar for the last statement. Now, think about what does the last line mean? Does the ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"pw7bR6Pr5C"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"a8WKPzbUHC"},{"type":"text","value":" actually knows that there exists an ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"ISahEsKEZ5"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"X7IizSS9Nd"},{"type":"text","value":"? The answer is yes. That’s because the statement ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"RwXFfuJpKc"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"drRwpVMNmB"},{"type":"text","value":" is in the scope of ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"Hb9eVa0ylu"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"a6hQQltQff"},{"type":"text","value":"’s declaration.","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"GBiJ6BrLrG"}],"key":"Z0FGDOaWDC"},{"type":"thematicBreak","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"key":"n8eaSIoJ7F"},{"type":"paragraph","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"For the codes below, the outermost function actually takes in a value of type t1 and produces a ","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"JE3fPVAxq0"},{"type":"strong","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"function","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"Z9VxPsefiX"}],"key":"F2PEUihEQL"},{"type":"text","value":" that is of type t2 -> (t3 -> t4)","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"WdfnlkLuu7"}],"key":"djsvrUnSgl"},{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"And the type of such a function","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"tnw9moa5aG"}],"key":"lbuNtsy1TN"},{"type":"code","lang":"ocaml","value":"t1 -> t2 -> t3 -> t4","position":{"start":{"line":85,"column":1},"end":{"line":87,"column":1}},"key":"nmFlJYvmfF"},{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"really means the same as","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"M9qMYzrGKv"}],"key":"CAaqwNmzk7"},{"type":"code","lang":"ocaml","value":"t1 -> (t2 -> (t3 -> t4))","position":{"start":{"line":91,"column":1},"end":{"line":93,"column":1}},"key":"v9qYePAuHK"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"That is, function types are ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"qVc59rWLzb"},{"type":"strong","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"right associative","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"dvdwkYCD5L"}],"key":"LdHdp76EfZ"},{"type":"text","value":": there are implicit parentheses around function types, from right to left. The intuition here is that a function takes a single argument and returns a new function that expects the remaining arguments.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"WWqQv449qv"}],"key":"UTDrH6HpRp"},{"type":"thematicBreak","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"ZmqsPna4Oz"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"Below is an example of Partial Application: The bottom two are syntactic sugars of the first statement","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"b8G8xAOJcN"}],"key":"QoxPuugcZM"},{"type":"code","lang":"ocaml","value":"let comp = fun f g -> fun x -> g(f x);;\nlet compa f g = fun x -> g(f x);;\nlet compb f g x = g(f x);;","position":{"start":{"line":101,"column":1},"end":{"line":105,"column":1}},"key":"FKyGUeOGl9"},{"type":"paragraph","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"children":[{"type":"text","value":"Applying ","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"rJvHVywRpa"},{"type":"inlineCode","value":"comp","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"imfUTsuLWM"},{"type":"text","value":" to other functions:","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"OMH7CfmVxU"}],"key":"npn1FVgFWy"},{"type":"code","lang":"ocaml","value":"utop # let inc x = x+1;;\nval inc : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # let inc2 = comp inc inc;;\nval inc2 : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # inc 1;;\n- : int = 2\n────────────────────────────────────────────────────────\nutop # inc2 1;;\n- : int = 3","position":{"start":{"line":109,"column":1},"end":{"line":121,"column":1}},"key":"Nl7NJq4Wub"},{"type":"paragraph","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"A useful application of Partial Application is precomputation: When we want to use a process multiple times, we can just write a function that takes in other function and do that job. g. predefine ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"krfwxNj8c8"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"w4sLQb5nG3"},{"type":"text","value":" so that when we want to composite two functions, we only need to apply it to the function ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"yiMpSnREhN"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"ao5ZD9uMw1"},{"type":"text","value":" instead of writing out the composite function on ourselves every time.","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"TL292hwtiL"}],"key":"YUQHuqfeVR"},{"type":"heading","depth":3,"position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"text","value":"Unit Function","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"kdQ6lo1rGf"}],"identifier":"unit-function","label":"Unit Function","html_id":"unit-function","implicit":true,"key":"STdnBrCSTs"},{"type":"paragraph","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"children":[{"type":"text","value":"There is only one value of this type, which is written ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"Dq8eeZIvvv"},{"type":"inlineCode","value":"()","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"Ohg0n7X8HR"},{"type":"text","value":" and is also pronounced “unit”. So ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"J9cFccUV9M"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"a7iXmKjc8n"},{"type":"text","value":" is like ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"usVEkMfwQj"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"vr6NQy0kbi"},{"type":"text","value":", except there is one fewer value of type ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"E47tO23G9l"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"O7rRDVSKbN"},{"type":"text","value":" than there is of ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"QCqmWuNTaa"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"uSgHSNJ1x7"},{"type":"text","value":". Unit is therefore used when you need to take an argument or return a value, but there’s no interesting value to pass or return.","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"YR4K8rkupA"}],"key":"bTYW6GvFuB"},{"type":"heading","depth":3,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"text","value":"Type Inference","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"nt3J9OvNtF"}],"identifier":"type-inference","label":"Type Inference","html_id":"type-inference","implicit":true,"key":"QblOjDWCO3"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"How to determine the type of a very complicated function?","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"PE8LQbiCEK"}],"key":"JT7K7YM3NY"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":133,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Add right-associative parameters; Rewrite the function as a more understandable ","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"gkw9hs2xY1"},{"type":"inlineCode","value":"let expression","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"NWl3QhRoIh"}],"key":"Ox0tV1lEoG"},{"type":"listItem","spread":true,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Find out which variables have to take in a value (then it must be a function), which doesn’t (then it can be anything)","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"GG8n52vs7Q"}],"key":"sIhI4MKFHk"},{"type":"listItem","spread":true,"position":{"start":{"line":135,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"Determine the type of each variable from the last statement, and write their types from left to right in the sequence they were taken in.","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"i3RUNdUWxF"}],"key":"wROx8Q6A8N"}],"key":"iYs8CkM8ye"},{"type":"paragraph","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"l7WMqZ7TH2"},{"type":"inlineCode","value":"fun f g -> fun x -> g(f x)","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"ZSOVAfGEnN"},{"type":"text","value":" as an example:","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"QYgWygn4un"}],"key":"meSKpFnWUr"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":139,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":139,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> ( fun x -> g(f x) )","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"dcHP1mwPAk"}],"key":"UDHDz6PPam"}],"key":"P6EFWFybu8"},{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"ERUb0QEwUJ"}],"key":"HzTAUmZ36G"},{"type":"listItem","spread":true,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"f takes in x, so f must be a function of type a’ -> b’","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"GCV5oT2ZfT"}],"key":"sJxZ6d3vaE"},{"type":"listItem","spread":true,"position":{"start":{"line":143,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"text","value":"g takes in the output of f, so g must be a function of type b’ -> c’","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"Y8Z5UnLGCx"}],"key":"xfHSt3ylfG"}],"key":"Zm4OUUSMsm"}],"key":"O4frozlwtg"},{"type":"listItem","spread":true,"position":{"start":{"line":145,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"kYAnS43Knz"}],"key":"Bh1j9Md06V"},{"type":"code","lang":"ocaml","value":"\tf\t\t\t  g\t\t\tx\t(output:g(f x))\n(a' -> b') -> (b' -> c') -> a' -> c'","position":{"start":{"line":147,"column":1},"end":{"line":150,"column":1}},"key":"KWQAnHujF5"}],"key":"JpqHK6TPqq"}],"key":"vpZjfNQGmj"},{"type":"paragraph","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"HsFBCA6j26"},{"type":"inlineCode","value":"fun f g -> fun x -> (g f) x","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"TE9fwVFiYz"},{"type":"text","value":" as another example:","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"WHJYxgSO4s"}],"key":"DJ5bvFBl1R"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":154,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> (fun x -> (g f) x)","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"key":"iQxZywDT2w"}],"key":"SqJVQRJYzy"}],"key":"QwMmQkzxPS"},{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"key":"KhwE1yOKvh"}],"key":"agkCQKA21C"},{"type":"listItem","spread":true,"position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"f doesn’t take in a value, so f is a variable of type b’","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"zBtmz97zda"}],"key":"aNNT8j098X"},{"type":"listItem","spread":true,"position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"g takes in f, so g must be a function whose input is of type b’; plus its output takes in another variable x, so its output is also a function, which takes in a type a’. Therefore, g is of type ","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"FajrbzfG1P"},{"type":"inlineCode","value":"b' -> (a' -> c')","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"PIYPqp9tlF"}],"key":"Ygdiu7M6im"}],"key":"Qwc68Xufez"}],"key":"dxPdTXceAd"},{"type":"listItem","spread":true,"position":{"start":{"line":158,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"key":"RwX0u4F3A5"}],"key":"VcKqxBCd3N"},{"type":"code","lang":"ocaml","value":"f \t\t\tg\t\t\t  x  (output:(g f) x)\nb' -> (b' -> a' -> c') -> a' -> c'","position":{"start":{"line":160,"column":1},"end":{"line":163,"column":1}},"key":"Ud6Gtamczf"}],"key":"iOOmhBbPXH"}],"key":"NwlgdgODPt"}],"key":"V6uL7Nu7ka"}],"key":"F2beYYzBF0"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Problem Analysis","url":"/2019-12-05-problem-analysis","group":"C S2112"},"next":{"title":"Standard Data Types","url":"/2020-01-30-standard-data-types","group":"C S3110"}}},"domain":"http://localhost:3000"}