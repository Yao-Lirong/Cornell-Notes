{"version":2,"kind":"Article","sha256":"095b8078d970d4594862d50bdc31a29327d63bee20cefa139063b4b342bc563f","slug":"2020-01-28-functions","location":"/CS3110/2020-01-28-Functions.md","dependencies":[],"frontmatter":{"title":"Functions","tags":["Cornell","20SP","CS3110"],"date":"2020-01-28","authors":[{"nameParsed":{"literal":"Yao Lirong","given":"Yao","family":"Lirong"},"name":"Yao Lirong","affiliations":["Cornell University"],"url":"https://yao-lirong.github.io","linkedin":"https://www.linkedin.com/in/yao-lirong/","id":"contributors-myst-generated-uid-0"}],"keywords":["Cornell","CS","Yao Lirong"],"affiliations":[{"id":"Cornell University","name":"Cornell University"}],"numbering":{"title":{"offset":1}},"exports":[{"format":"md","filename":"2020-01-28-Functions.md","url":"/cornell-notes/build/2020-01-28-Functions-362689428110677216abba030125e68e.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"From Textbook: ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"GnYfA0fjLR"},{"type":"link","url":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"qmzvmEw10p"}],"urlSource":"https://www.cs.cornell.edu/courses/cs3110/2020sp/textbook/basics/functions.html","key":"a1BJ4PkMov"}],"key":"NEqQ4PNJBU"},{"type":"thematicBreak","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"TpTQB6e9o7"},{"type":"heading","depth":2,"position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"Functions","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"ILjHdZTTak"}],"identifier":"functions","label":"Functions","html_id":"functions","implicit":true,"key":"AgqgnR6yhV"},{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"strong","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"HNxbogNGLs"}],"key":"BLe4q5c3gG"},{"type":"text","value":": ","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"sKMTkx877e"},{"type":"inlineCode","value":"let f x1 x2 ... xn = e","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"DIYPORVzmI"},{"type":"text","value":" (f is the function name; xi is input, and there can be multiple inputs; e is the output)","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"goQbtHjVed"}],"key":"Wx6B7UGWaH"},{"type":"paragraph","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"We can think of ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"kBa4BkqqpK"},{"type":"inlineCode","value":"t1 -> t2 -> u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"KvrqR3hzrd"},{"type":"text","value":" as the type of a function that takes two inputs, the first of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"UGzXQ0UnOc"},{"type":"inlineCode","value":"t1","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"oE9ogMOkat"},{"type":"text","value":" and the second of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"UQCENH2SUB"},{"type":"inlineCode","value":"t2","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"exJAC4XM6W"},{"type":"text","value":", and returns an output of type ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"kcPvHpiDUO"},{"type":"inlineCode","value":"u","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"SO92vtC4aE"},{"type":"text","value":". Likewise for a function that takes ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"hlkdIl2LZq"},{"type":"inlineCode","value":"n","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"PPcnbJxR5R"},{"type":"text","value":" arguments.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"Z4nWoY0DJG"}],"key":"v7WItYMa3u"},{"type":"paragraph","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"A function is already a value (that’s how you assign the value “function” to a variable name), so there is nothing to be evaluated when we evaluate its dynamic semantic.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"DZWvNF4ZYz"}],"key":"skFPLCsDTU"},{"type":"comment","value":"more","key":"Qhyc926eE8"},{"type":"heading","depth":3,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Anonymous Function","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"Y1EUnZjCDU"}],"identifier":"anonymous-function","label":"Anonymous Function","html_id":"anonymous-function","implicit":true,"key":"p8PhQW9kCc"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"strong","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"children":[{"type":"text","value":"Definition","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"q2sR9VSnJM"}],"key":"C6U4uh3Tdu"},{"type":"text","value":": ","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"EjY4Sani0P"},{"type":"inlineCode","value":"fun x -> x+1","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"j9zvxjO46g"},{"type":"text","value":" (","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"Fc6RWJONAe"},{"type":"inlineCode","value":"fun","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"DgggCL37Hc"},{"type":"text","value":" is a keyword indicating an anonymous function)","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"C7Itpp84gq"}],"key":"gEwYwKwUir"},{"type":"blockquote","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Anonymous functions are also called ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"qjmNzPxemc"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda expressions","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"F9kmFtps4b"}],"key":"szGvHh8PXX"},{"type":"text","value":", a term that comes out of the ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"vON9ybIJVd"},{"type":"emphasis","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"lambda calculus","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"s5t3ZlwGzJ"}],"key":"SBhn2HfbbT"},{"type":"text","value":", which is a mathematical model of computation in the same sense that Turing machines are a model of computation. In the lambda calculus, ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"CwYHokHxCl"},{"type":"inlineCode","value":"fun x -> e","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"Je2RsZdYFs"},{"type":"text","value":" would be written ","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"bQWaWvTv6k"},{"type":"inlineMath","value":"λx.e.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>λ</mi><mi>x</mi><mi mathvariant=\"normal\">.</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">λx.e.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">λ</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">.</span></span></span></span>","key":"O7HTl0ZQeZ"},{"type":"text","value":" The λ denotes an anonymous function.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"s2RHTmPekj"}],"key":"ynFD6j6NVG"}],"key":"wa5Nbwm1LZ"},{"type":"heading","depth":3,"position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"Function Application","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"lnC30qJoG7"}],"identifier":"function-application","label":"Function Application","html_id":"function-application","implicit":true,"key":"x3W0G9peg7"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":32,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Normal way:","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"famO1JVQvE"},{"type":"inlineCode","value":"(fun x -> e3) ((fun x -> e2) e1);;","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"ozFXMngAGT"}],"key":"v2DStXcsIZ"},{"type":"listItem","spread":true,"position":{"start":{"line":33,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Pipeline: ","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"MlklOAkY4p"},{"type":"inlineCode","value":"e1 |> fun x->e2 |> fun x->e3;;","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Z3SEHCoHCG"}],"key":"LjoVh5TAvl"}],"key":"OkB2w1Ifo4"},{"type":"paragraph","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"They are semantically the same as “let expressions” : ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"fK0LEQ4HW6"},{"type":"inlineCode","value":"let x = e1 in let x = e2 in e3 ","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"zvQHU4VgEo"},{"type":"text","value":" (In fact, the let expression is just a syntactic sugar of function application)","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"DPS9dNWRWE"}],"key":"HUufyat6hU"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Function application is left-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"YttPrTHS4K"},{"type":"inlineCode","value":"g f x = (g f) x","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"Vd18y9NOrB"},{"type":"text","value":", while function types are right-associative: ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"RP79o8QdRx"},{"type":"inlineCode","value":"g -> f -> x = g -> (f -> x)","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"QbhtxiPyYj"}],"key":"XsDsNOZ0Xs"},{"type":"heading","depth":3,"position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Polymorphic Functions","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"Oc5ajAk03B"}],"identifier":"polymorphic-functions","label":"Polymorphic Functions","html_id":"polymorphic-functions","implicit":true,"key":"o9Z9jFOklA"},{"type":"paragraph","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"YWF74d7DbO"},{"type":"inlineCode","value":"'a","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"Xjh5uOG1uR"},{"type":"text","value":" is a ","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"T3CfM1veMt"},{"type":"emphasis","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"type variable","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"oosZzESt2n"}],"key":"cPkp1vbs71"},{"type":"text","value":": it stands for an unknown type, just like a regular variable stands for an unknown value.","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"AFpZHFBYng"}],"key":"NHcElQemyH"},{"type":"heading","depth":3,"position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"Labeled Arguments","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"BtjxwmdRiA"}],"identifier":"labeled-arguments","label":"Labeled Arguments","html_id":"labeled-arguments","implicit":true,"key":"pDD6Fbtz7a"},{"type":"paragraph","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"OCaml supports labeled arguments to functions. You can declare this kind of function using the following syntax:","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"sEutB2eFeV"}],"key":"BFIoML8CjC"},{"type":"code","lang":"ocaml","value":"# let f ~name1:arg1 ~name2:arg2 = arg1 + arg2;;\nval f : name1:int -> name2:int -> int = <fun>","position":{"start":{"line":47,"column":1},"end":{"line":50,"column":1}},"key":"tAOJGikk6k"},{"type":"paragraph","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"children":[{"type":"text","value":"This function can be called by passing the labeled arguments in either order:","position":{"start":{"line":52,"column":1},"end":{"line":52,"column":1}},"key":"W9FLurNHTL"}],"key":"nutitmSsKq"},{"type":"code","lang":"ocaml","value":"f ~name2:3 ~name1:4;;","position":{"start":{"line":54,"column":1},"end":{"line":56,"column":1}},"key":"Mo0cSmZS2z"},{"type":"paragraph","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"A sugar of declaring function with labeled arguments is","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"xCG8dXvkZa"}],"key":"qfsbvGN84F"},{"type":"code","lang":"ocaml","value":"let f ~name1 ~name2 = name1 + name2","position":{"start":{"line":60,"column":1},"end":{"line":62,"column":1}},"key":"h1JwRMt2z9"},{"type":"heading","depth":3,"position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"Partial Application","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"NTXY9oNw6K"}],"identifier":"partial-application","label":"Partial Application","html_id":"partial-application","implicit":true,"key":"lsq73gyolh"},{"type":"paragraph","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"children":[{"type":"text","value":"A function of two variables: ","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"i6mZwRSS6O"},{"type":"inlineCode","value":"let add x y = x + y","position":{"start":{"line":65,"column":1},"end":{"line":65,"column":1}},"key":"itwnWiV3bR"}],"key":"YBnR1oLkDs"},{"type":"paragraph","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"children":[{"type":"text","value":"A composite function: ","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"bUKbAglyaK"},{"type":"inlineCode","value":"let addx x = fun y -> x + y","position":{"start":{"line":67,"column":1},"end":{"line":67,"column":1}},"key":"r9ge2eVufS"}],"key":"rrB5G8DG7w"},{"type":"thematicBreak","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"LhOLhQUr9W"},{"type":"code","lang":"ocaml","value":"let add x y = x+y\nlet add x = fun y -> x+y\nlet add = fun x -> (fun y -> x+y)","position":{"start":{"line":71,"column":1},"end":{"line":75,"column":1}},"key":"fKywBGiIDW"},{"type":"paragraph","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"children":[{"type":"text","value":"The top two are just syntactic sugar for the last statement. Now, think about what does the last line mean? Does the ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"avQItjlk8O"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"fQvC8LF2S7"},{"type":"text","value":" actually knows that there exists an ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"kjwExjo87V"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"Lx6FiFpJY3"},{"type":"text","value":"? The answer is yes. That’s because the statement ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"JujUiI8cul"},{"type":"inlineCode","value":"fun y -> x+y","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"vvAJzipETi"},{"type":"text","value":" is in the scope of ","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"Zz0WVKVhoF"},{"type":"inlineCode","value":"x","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"LAIBHlqyYl"},{"type":"text","value":"’s declaration.","position":{"start":{"line":77,"column":1},"end":{"line":77,"column":1}},"key":"dZsrhXnIFy"}],"key":"FFLZmZr3mC"},{"type":"thematicBreak","position":{"start":{"line":79,"column":1},"end":{"line":79,"column":1}},"key":"ctLGdnjLPB"},{"type":"paragraph","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"For the codes below, the outermost function actually takes in a value of type t1 and produces a ","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"Q7qhtegCkG"},{"type":"strong","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"function","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"ueSTBQD70V"}],"key":"plihQoHueJ"},{"type":"text","value":" that is of type t2 -> (t3 -> t4)","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"qbhscIWt2y"}],"key":"oaHOWOHxYS"},{"type":"paragraph","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"children":[{"type":"text","value":"And the type of such a function","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"PeDoMiRjD4"}],"key":"zq1QfSMkUe"},{"type":"code","lang":"ocaml","value":"t1 -> t2 -> t3 -> t4","position":{"start":{"line":85,"column":1},"end":{"line":87,"column":1}},"key":"EAq5TKTyzX"},{"type":"paragraph","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"children":[{"type":"text","value":"really means the same as","position":{"start":{"line":89,"column":1},"end":{"line":89,"column":1}},"key":"kgYLwAj3EW"}],"key":"wxWAqXphLx"},{"type":"code","lang":"ocaml","value":"t1 -> (t2 -> (t3 -> t4))","position":{"start":{"line":91,"column":1},"end":{"line":93,"column":1}},"key":"bl9QKmypiF"},{"type":"paragraph","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"That is, function types are ","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"rWrFGhBpTH"},{"type":"strong","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"children":[{"type":"text","value":"right associative","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"ZUae6Rh5lu"}],"key":"ynut0Ja6eB"},{"type":"text","value":": there are implicit parentheses around function types, from right to left. The intuition here is that a function takes a single argument and returns a new function that expects the remaining arguments.","position":{"start":{"line":95,"column":1},"end":{"line":95,"column":1}},"key":"UFid8SUIb1"}],"key":"tHXVI88hoW"},{"type":"thematicBreak","position":{"start":{"line":97,"column":1},"end":{"line":97,"column":1}},"key":"YeOjLbx4Tp"},{"type":"paragraph","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"children":[{"type":"text","value":"Below is an example of Partial Application: The bottom two are syntactic sugars of the first statement","position":{"start":{"line":99,"column":1},"end":{"line":99,"column":1}},"key":"dJFCrD1dtb"}],"key":"IQuItaCu1L"},{"type":"code","lang":"ocaml","value":"let comp = fun f g -> fun x -> g(f x);;\nlet compa f g = fun x -> g(f x);;\nlet compb f g x = g(f x);;","position":{"start":{"line":101,"column":1},"end":{"line":105,"column":1}},"key":"Vpe0UCgjU3"},{"type":"paragraph","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"children":[{"type":"text","value":"Applying ","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"YdnsDHJptF"},{"type":"inlineCode","value":"comp","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"jP9vkAmGFp"},{"type":"text","value":" to other functions:","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"ZBPztYFoIh"}],"key":"bBetEZOv8v"},{"type":"code","lang":"ocaml","value":"utop # let inc x = x+1;;\nval inc : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # let inc2 = comp inc inc;;\nval inc2 : int -> int = <fun>\n────────────────────────────────────────────────────────\nutop # inc 1;;\n- : int = 2\n────────────────────────────────────────────────────────\nutop # inc2 1;;\n- : int = 3","position":{"start":{"line":109,"column":1},"end":{"line":121,"column":1}},"key":"Rz9EnqaVMC"},{"type":"paragraph","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"children":[{"type":"text","value":"A useful application of Partial Application is precomputation: When we want to use a process multiple times, we can just write a function that takes in other function and do that job. g. predefine ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"fXitv3TDBy"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"WkhTRmzTLz"},{"type":"text","value":" so that when we want to composite two functions, we only need to apply it to the function ","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"EEmuJuxnSF"},{"type":"inlineCode","value":"comp","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"apFFG9yM75"},{"type":"text","value":" instead of writing out the composite function on ourselves every time.","position":{"start":{"line":123,"column":1},"end":{"line":123,"column":1}},"key":"ETeliJo8yU"}],"key":"uOLOVXObUI"},{"type":"heading","depth":3,"position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"text","value":"Unit Function","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"yu4mcGEVVN"}],"identifier":"unit-function","label":"Unit Function","html_id":"unit-function","implicit":true,"key":"hY7VG2kblt"},{"type":"paragraph","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"children":[{"type":"text","value":"There is only one value of this type, which is written ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"tmS2b08F4a"},{"type":"inlineCode","value":"()","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"sEydsPwzcd"},{"type":"text","value":" and is also pronounced “unit”. So ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"p8y88RBwby"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"JQ8AS4kfAH"},{"type":"text","value":" is like ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"uDi2CRfRIx"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"YNglYiOf1s"},{"type":"text","value":", except there is one fewer value of type ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"tWvCjrCWbC"},{"type":"inlineCode","value":"unit","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"STflGmsM2N"},{"type":"text","value":" than there is of ","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"W9IrAJLFqP"},{"type":"inlineCode","value":"bool","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"r9ej2xVI15"},{"type":"text","value":". Unit is therefore used when you need to take an argument or return a value, but there’s no interesting value to pass or return.","position":{"start":{"line":127,"column":1},"end":{"line":127,"column":1}},"key":"J7naQEHFOh"}],"key":"idOcgbtBJs"},{"type":"heading","depth":3,"position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"children":[{"type":"text","value":"Type Inference","position":{"start":{"line":129,"column":1},"end":{"line":129,"column":1}},"key":"j8kTPjqN86"}],"identifier":"type-inference","label":"Type Inference","html_id":"type-inference","implicit":true,"key":"TO6Kze8Rfi"},{"type":"paragraph","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"How to determine the type of a very complicated function?","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"MvenZ2Ndzh"}],"key":"rT3Tfn7LmF"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":133,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"children":[{"type":"text","value":"Add right-associative parameters; Rewrite the function as a more understandable ","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"mx70sEc2HK"},{"type":"inlineCode","value":"let expression","position":{"start":{"line":133,"column":1},"end":{"line":133,"column":1}},"key":"b9l0bYRwnp"}],"key":"DlPfRer04C"},{"type":"listItem","spread":true,"position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"children":[{"type":"text","value":"Find out which variables have to take in a value (then it must be a function), which doesn’t (then it can be anything)","position":{"start":{"line":134,"column":1},"end":{"line":134,"column":1}},"key":"DmgyPVSM78"}],"key":"LxQion8kLJ"},{"type":"listItem","spread":true,"position":{"start":{"line":135,"column":1},"end":{"line":136,"column":1}},"children":[{"type":"text","value":"Determine the type of each variable from the last statement, and write their types from left to right in the sequence they were taken in.","position":{"start":{"line":135,"column":1},"end":{"line":135,"column":1}},"key":"PWJAYmFXtC"}],"key":"gjQcjalc4Z"}],"key":"hvfGjI5s76"},{"type":"paragraph","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"l92MrhH9Eh"},{"type":"inlineCode","value":"fun f g -> fun x -> g(f x)","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"P1Uf0pjHyR"},{"type":"text","value":" as an example:","position":{"start":{"line":137,"column":1},"end":{"line":137,"column":1}},"key":"XMew0j9BbC"}],"key":"HKMKu5jiCq"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":139,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":139,"column":1},"end":{"line":140,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> ( fun x -> g(f x) )","position":{"start":{"line":139,"column":1},"end":{"line":139,"column":1}},"key":"hkDYYh6RcJ"}],"key":"UX4ufMfunr"}],"key":"XEwsqncYOY"},{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":141,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":141,"column":1},"end":{"line":141,"column":1}},"key":"Ke4FTIqA7s"}],"key":"R5GGeQTSe8"},{"type":"listItem","spread":true,"position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"children":[{"type":"text","value":"f takes in x, so f must be a function of type a’ -> b’","position":{"start":{"line":142,"column":1},"end":{"line":142,"column":1}},"key":"CDyAjm0yLC"}],"key":"pquo0YyQsu"},{"type":"listItem","spread":true,"position":{"start":{"line":143,"column":1},"end":{"line":144,"column":1}},"children":[{"type":"text","value":"g takes in the output of f, so g must be a function of type b’ -> c’","position":{"start":{"line":143,"column":1},"end":{"line":143,"column":1}},"key":"hPZqvFzEjd"}],"key":"e2GZv1EofO"}],"key":"CQFH9yK4J9"}],"key":"mHKiTOsex1"},{"type":"listItem","spread":true,"position":{"start":{"line":145,"column":1},"end":{"line":151,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":145,"column":1},"end":{"line":145,"column":1}},"key":"b13CFI0qvz"}],"key":"zOFTXvifyD"},{"type":"code","lang":"ocaml","value":"\tf\t\t\t  g\t\t\tx\t(output:g(f x))\n(a' -> b') -> (b' -> c') -> a' -> c'","position":{"start":{"line":147,"column":1},"end":{"line":150,"column":1}},"key":"AeUZbMDTVL"}],"key":"g5GQOWJJJH"}],"key":"dlyBMHN0PU"},{"type":"paragraph","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"children":[{"type":"text","value":"Take ","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"EO6YLIARmU"},{"type":"inlineCode","value":"fun f g -> fun x -> (g f) x","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"Z8gfJQWrIa"},{"type":"text","value":" as another example:","position":{"start":{"line":152,"column":1},"end":{"line":152,"column":1}},"key":"dpR5bgpFNK"}],"key":"A0L0e4KhTg"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":154,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"children":[{"type":"inlineCode","value":"let h = fun f g -> (fun x -> (g f) x)","position":{"start":{"line":154,"column":1},"end":{"line":154,"column":1}},"key":"QPwLqYRO8n"}],"key":"FJ8gUdqWMm"}],"key":"XdVRfkcgNU"},{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":155,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"children":[{"type":"text","value":"x doesn’t take in a value, so x is a variable of type a’","position":{"start":{"line":155,"column":1},"end":{"line":155,"column":1}},"key":"ZcugN5o2GA"}],"key":"t1IPfPLwJI"},{"type":"listItem","spread":true,"position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"children":[{"type":"text","value":"f doesn’t take in a value, so f is a variable of type b’","position":{"start":{"line":156,"column":1},"end":{"line":156,"column":1}},"key":"hKiFQdRA12"}],"key":"dTXkYMkCoL"},{"type":"listItem","spread":true,"position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"children":[{"type":"text","value":"g takes in f, so g must be a function whose input is of type b’; plus its output takes in another variable x, so its output is also a function, which takes in a type a’. Therefore, g is of type ","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"Gq4q2qwAgN"},{"type":"inlineCode","value":"b' -> (a' -> c')","position":{"start":{"line":157,"column":1},"end":{"line":157,"column":1}},"key":"X6vfpjOhlW"}],"key":"Lrl7uh0WJ4"}],"key":"nygBEfowkL"}],"key":"GsnqFhtcaz"},{"type":"listItem","spread":true,"position":{"start":{"line":158,"column":1},"end":{"line":163,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"children":[{"type":"text","value":"The type of this function is","position":{"start":{"line":158,"column":1},"end":{"line":158,"column":1}},"key":"dSUQtgT6aj"}],"key":"GLWxFGmCc3"},{"type":"code","lang":"ocaml","value":"f \t\t\tg\t\t\t  x  (output:(g f) x)\nb' -> (b' -> a' -> c') -> a' -> c'","position":{"start":{"line":160,"column":1},"end":{"line":163,"column":1}},"key":"VZFp7ZaF7C"}],"key":"ZT2q1kR5NF"}],"key":"yhJoNLgDc2"}],"key":"E3czMn74kq"}],"key":"uRy8zY7heu"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Problem Analysis","url":"/2019-12-05-problem-analysis","group":"CS2112 Object-Oriented Design (Honors)"},"next":{"title":"Standard Data Types","url":"/2020-01-30-standard-data-types","group":"CS3110 Functional Programming"}}},"domain":"http://localhost:3000"}